<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
  <head>
    <meta http-equiv="content-type" content="text/html;
      charset=windows-1252">
    <title>OTL 4.0, Example 380 (Insert/Update/Select, DB2 CLOBs in
      stream mode, and std::strings)</title>
    <meta name="Author" content="Sergei Kuchin">
    <meta name="GENERATOR" content="Mozilla/3.03Gold (Win95; I)
      [Netscape]">
    <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database
      API, C++, Template Library">
  </head>
  <body>
    <h1 align="center">OTL 4.0, Example 380 (Insert/Update/Select,&nbsp;
      DB2 CLOBs in stream mode, and std:strings)</h1>
    <p>This example demonstrates INSERT, UPDATE, and SELECT statements
      with the DB2 CLOB datatype in <a href="otl3_lob_stream.htm">stream

        mode</a> and <span style="font-style: italic;">std::strings</span>.<br>
    </p>
    <h2>Source Code</h2>
    <pre>#include &lt;iostream&gt;<br>#include &lt;string&gt;<br>using namespace std;<br><br>#include &lt;stdio.h&gt;</pre>
<pre>#define OTL_DB2_CLI // Compile OTL 4.0/DB2 CLI<br>#define OTL_STL // enable OTL support for STL<br><br>#if (defined(__clang__) || defined(__GNUC__)) &amp;&amp; \<br>    (defined(OTL_CPP_14_ON) || defined(OTL_CPP_17_ON))<br>#include &lt;experimental/string_view&gt;<br>#define <a href="otl3_compile.htm#OTL_STD_STRING_VIEW_CLASS">OTL_STD_STRING_VIEW_CLASS</a> std::experimental::string_view<br>#elif defined(_MSC_VER) &amp;&amp; (_MSC_VER&gt;=1910) &amp;&amp; defined(OTL_CPP_17_ON)<br>// VC++ 2017 or higher when /std=c++latest is used<br>#include &lt;string_view&gt;<br>#define OTL_STD_STRING_VIEW_CLASS std::string_view<br>#endif<br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br><a href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br>void insert()<br>// insert rows into table<br>{<br> string f2; <br>&nbsp;<a href="otl3_stream_class.htm">otl_stream</a> o; // defined an otl_stream variable<br>&nbsp;o.<a href="otl3_stream_class.htm#set_lob_stream_mode">set_lob_stream_mode</a>(true); // set the "lob stream mode" flag<br>&nbsp;o.<a href="otl3_stream_class.htm#open">open</a>(1, // buffer size has to be set to 1 for operations with LOBs<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "insert into test_tab values(:f1&lt;int&gt;,:f2&lt;<a href="otl3_bind_variables.htm#varchar_long">varchar_long</a>&gt;) ",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // SQL statement<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db // connect object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br> o.<a href="otl3_stream_class.htm#set_commit">set_commit</a>(0); // setting stream "auto-commit" to "off". It is required<br>                  // when LOB stream mode is used.<br><br> <a href="otl3_lob_stream.htm">otl_lob_stream</a> lob; // LOB stream for reading/writing unlimited number<br>                     // of bytes regardless of the buffer size.<br> for(int i=1;i&lt;=20;++i){<br>  f2.erase();<br>  f2.append(50000,'*');<br>  f2 += '?';<br>  o&lt;&lt;i;<br>  o<a href="otl3_stream_class.htm#stream_write_lob">&lt;&lt;</a>lob; // Initialize otl_lob_stream by writing it<br>          // into otl_stream<br><br>  lob.<a href="otl3_lob_stream.htm#set_len">set_len</a>(50001+23123); // setting the total size of<br>                            // the CLOB to be written.<br>   // It is required for bakward compatibility<br> <br>#if defined(<a href="otl3_compile.htm#OTL_STD_STRING_VIEW_CLASS">OTL_STD_STRING_VIEW_CLASS</a>)<br>  OTL_STD_STRING_VIEW_CLASS f2_sv(f2.c_str(),f2.length());<br>  lob<a href="otl3_lob_stream.htm#OTL_STD_STRING_VIEW_CLASS">&lt;&lt;</a>f2_sv; // writing first chunk into the lob<br>#else<br>  lob<a href="otl3_lob_stream.htm#write_string">&lt;&lt;</a>f2; // writing first chunk into the lob<br>#endif<br><br>  f2.erase();<br>  f2.append(23122,'*');<br>  f2 += '?';<br>#if defined(<a href="otl3_compile.htm#OTL_STD_STRING_VIEW_CLASS">OTL_STD_STRING_VIEW_CLASS</a>)<br>  OTL_STD_STRING_VIEW_CLASS f2_sv(f2.c_str(),f2.length());<br>  lob<a href="otl3_lob_stream.htm#OTL_STD_STRING_VIEW_CLASS">&lt;&lt;</a>f2_sv; // writing second chunk into the lob<br>#else<br>  lob<a href="otl3_lob_stream.htm#write_string">&lt;&lt;</a>f2; // writing second chunk into the lob<br>#endif<br><br>  lob.<a href="otl3_lob_stream.htm">close</a>(); // closing the otl_lob_stream<br> }<br><br> db.commit(); // committing transaction.<br>}</pre>
<pre>void update()<br>// insert rows in table<br>{ <br> string f2; <br>&nbsp;<a href="otl3_stream_class.htm">otl_stream</a> o; // defined an otl_stream variable<br>&nbsp;o.<a href="otl3_stream_class.htm#set_lob_stream_mode">set_lob_stream_mode</a>(true); // set the "lob stream mode" flag<br>&nbsp;o.<a href="otl3_stream_class.htm#open">open</a>(1, // buffer size has to be set to 1 for operations with LOBs<br>        "update test_tab "<br>        "   set f2=:f2&lt;varchar_long&gt; "<br>        "where f1=:f1&lt;int&gt; ",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // SQL statement<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db // connect object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br> <a href="otl3_lob_stream.htm">otl_lob_stream</a> lob;<br> o.<a href="otl3_stream_class.htm#set_commit">set_commit</a>(0); // setting stream "auto-commit" to "off". <br> f2.append(6000,'#');<br> f2+='?';<br> o<a href="otl3_stream_class.htm#stream_write_lob">&lt;&lt;</a>lob; // Initialize otl_lob_stream by writing it<br>         // into otl_stream.<br> o&lt;&lt;5;<br> lob.<a href="otl3_lob_stream.htm#set_len">set_len</a>(6001*4); // setting the total size of of the CLOB to be written<br> for(int i=1;i&lt;=4;++i)<br>  lob<a href="otl3_lob_stream.htm#write_string">&lt;&lt;</a>f2; // writing chunks of the CLOB into the otl_lob_stream<br> lob.<a href="otl3_lob_stream.htm#close">close</a>(); // closing the otl_lob_stream<br> db.commit(); // committing transaction<br><br>}<br><br>void select()<br>{ <span style="text-decoration: underline;"><br></span> string f2;<br>&nbsp;<a href="otl3_stream_class.htm">otl_stream</a> i; // defined an otl_stream variable<br>&nbsp;i.<a href="otl3_stream_class.htm#set_lob_stream_mode">set_lob_stream_mode</a>(true); // set the "lob stream mode" flag<br>&nbsp;i.<a href="otl3_stream_class.htm#open">open</a>(1, // buffer size. To read CLOBs, it should be set to 1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "select * from test_tab where f1&gt;=:f11&lt;int&gt; and f1&lt;=:f12&lt;int&gt;*2",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  // SELECT statement<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db // connect object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );&nbsp;<br>&nbsp;&nbsp; // create select stream<br> <br> int f1;<br> <a href="otl3_lob_stream.htm">otl_lob_stream</a> lob; // Stream for reading CLOB<br><br> lob.<a href="otl3_lob_stream.htm#SET_STRING_BUFFER">setStringBuffer</a>(40000); // Set a bigger internal buffer (default is 4096 bytes)<br>                             // for reading chunks of the CLOB, before each chunk<br>                             // gets appended to the output string.<br> i&lt;&lt;4&lt;&lt;4; // assigning :f11 = 4, :f12 = 4<br>   // SELECT automatically executes when all input variables are<br>   // assigned. First portion of output rows is fetched to the buffer<br><br> while(!i.eof()){ // while not end-of-data<br>  i&gt;&gt;f1;<br>  cout&lt;&lt;"f1="&lt;&lt;f1;<br>  i<a href="otl3_stream_class.htm#stream_read_lob">&gt;&gt;</a>lob; // initializing CLOB stream by reading the CLOB reference <br>          // into the otl_lob_stream from the otl_stream.<br>  lob<a href="otl3_lob_stream.htm#STRING_READ">&gt;&gt;</a>f2;<br>  cout&lt;&lt;", f2="&lt;&lt;f2[0]&lt;&lt;f2[f2.length()-1]&lt;&lt;", len="&lt;&lt;(int)f2.length()&lt;&lt;endl;<br>  lob.<a href="otl3_lob_stream.htm#close">close</a>(); // closing the otl_lob_stream. This step may be skipped.<br>  <br> }<br><br>}<br><br>int main()<br>{<br> <a href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize the database API environment<br> try{<br><br>  db.rlogon("scott/tiger@db2sql"); // connect to the database<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "drop table test_tab",<br>    otl_exception::disabled // disable OTL exceptions<br>   ); // drop table<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "create table test_tab(f1 int, f2 clob(1M))"<br>    );  // create table<br><br>  insert(); // insert records into table<br>  update(); // update records in table<br>  select(); // select records from table<br><br> }<br><br> catch(<a href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br> }<br><br> db.logoff(); // disconnect from the database<br><br> return 0;<br><br>}<br></pre>
<h2>Output</h2>
<pre>f1=4, f2=*?, len=73124<br>f1=5, f2=#?, len=24004<br>f1=6, f2=*?, len=73124<br>f1=7, f2=*?, len=73124<br>f1=8, f2=*?, len=73124<br><br><hr width="100%"></pre>
<center>
<p><a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a>
<a href="home.htm">Go Home</a> </p>
</center>
<p>Copyright © 1996-2023, Sergei Kuchin, email: <a href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>,
<a href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>
<script language="JavaScript"><!-- hide from oldgmailsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </script>.</p>
<p><i>Permission to use, copy, modify and redistribute this document
for
any purpose is hereby granted without fee, provided that the above
copyright
notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. </i></p>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>


</body></html>
