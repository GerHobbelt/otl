<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;
      charset=ISO-8859-1">
    <meta name="Author" content="Sergei Kuchin">
    <meta name="GENERATOR" content="Mozilla/4.77 [en] (Win95; U)
      [Netscape]">
    <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database
      API, C++, Template Library">
    <title>OTL 4.0, Example 745 (UTF-8 client encoding: Insert/Select)</title>
  </head>
  <body>
    <center>
      <h1>OTL 4.0, Example 745 (UTF-8 client encoding: Insert/Select)</h1>
    </center>
    This example demonstrates a simple UTF8 INSERT, SELECT and constant
    SQL statements.
    <h2>Source Code</h2>
    <pre>#include &lt;iostream&gt;<br>using namespace std;<br><br>#include &lt;stdio.h&gt;</pre>
    <pre>// #define OTL_ODBC_UNIX // uncomment this line if UnixODBC is used<br>#define <a href="otl3_compile.htm#OTL_ODBC_ALTERNATE_RPC">OTL_ODBC_ALTERNATE_RPC</a><br>#if !defined(_WIN32) &amp;&amp; !defined(_WIN64)<br>#define <a href="otl3_compile.htm#OTL_ODBC">OTL_ODBC</a><br>#else <br>#define <a href="otl3_compile.htm#OTL_ODBC_POSTGRESQL">OTL_ODBC_POSTGRESQL</a> // required with PG ODBC on Windows<br>#endif<br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br><a href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br>// Sample UTF8 based string<br>unsigned char utf8_sample[]=<br>{0x61,0x62,0x63,0xd0,0x9e,0xd0,0x9b,0xd0,<br> 0xac,0xd0,0x93,0xd0,0x90,0x0};<br><br>void insert()<br>// insert rows into table<br>{&nbsp;<br>&nbsp;<a href="otl3_stream_class.htm">otl_stream</a> o(50, // buffer size<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "insert into test_tab values(:f1&lt;int&gt;,:f2&lt;char[31]&gt;)",&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // SQL statement<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db // connect object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br><br>&nbsp;unsigned char tmp[31];<br><br>&nbsp;for(int i=1;i&lt;=100;++i){<br>#if defined(_MSC_VER)<br>#if (_MSC_VER &gt;= 1400) // VC++ 8.0 or higher<br>   strcpy_s(reinterpret_cast&lt;char*&gt;(tmp),<br>            sizeof(tmp),<br>            reinterpret_cast&lt;const char*&gt;(utf8_sample));<br>#else<br>   strcpy(reinterpret_cast&lt;char*&gt;(tmp),reinterpret_cast&lt;const char*&gt;(utf8_sample));<br>#endif<br>#else<br>   strcpy(reinterpret_cast&lt;char*&gt;(tmp),reinterpret_cast&lt;const char*&gt;(utf8_sample));<br>#endif<br> &nbsp; o&lt;&lt;i;<br> &nbsp; o&lt;&lt;tmp;<br>&nbsp;}<br><br>}<br><br>void select()<br>{&nbsp;<br>&nbsp;<a href="otl3_stream_class.htm">otl_stream</a> i(50, // buffer size<br>              "select * from test_tab where f1&gt;=:f11&lt;int&gt; and f1&lt;=:f12&lt;int&gt;*2",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // SELECT statement<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db // connect object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );&nbsp;<br>&nbsp;&nbsp; // create select stream<br>&nbsp;<br>&nbsp;int f1;<br>&nbsp;unsigned char f2[31];<br><br> i&lt;&lt;8&lt;&lt;8; // assigning :f11 = 8, : :f12 = 8<br>&nbsp;&nbsp; // SELECT automatically executes when all input variables are<br>&nbsp;&nbsp; // assigned. First portion of output rows is fetched to the buffer<br><br>&nbsp;while(!i.eof()){ // while not end-of-data<br> &nbsp; i&gt;&gt;f1;<br> &nbsp; i&gt;&gt;f2;<br> &nbsp; cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", f2=";<br> &nbsp; for(int j=0;f2[j]!=0;++j)<br>     printf("%2x ", f2[j]);<br> &nbsp; cout&lt;&lt;endl;<br>&nbsp;}<br><br>}<br><br>int main()<br>{<br>&nbsp;<a href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize the database environment<br>&nbsp;try{<br><br>  db.rlogon("scott/tiger@postgresql"); // connect to the database<br><br>  db.direct_exec("set client_encoding='utf-8'"); // set the UTF-8 client encoding<br><br>&nbsp; <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>&nbsp;&nbsp; (<br>&nbsp;&nbsp;&nbsp; db,<br>&nbsp;&nbsp;&nbsp; "drop table test_tab",<br>&nbsp;&nbsp;&nbsp; otl_exception::disabled // disable OTL exceptions<br>&nbsp;&nbsp; ); // drop table<br><br>&nbsp; <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>&nbsp;&nbsp; (<br>&nbsp;&nbsp;&nbsp; db,<br>&nbsp;&nbsp;&nbsp; "create table test_tab(f1 int, f2 varchar(30))"<br>&nbsp;&nbsp;&nbsp; );&nbsp; // create table<br><br>&nbsp; insert(); // insert records into table<br>&nbsp; select(); // select records from table<br><br>&nbsp;}<br><br>&nbsp;catch(<a href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>&nbsp; cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>&nbsp; cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>&nbsp; cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br>&nbsp;}<br><br>&nbsp;db.logoff(); // disconnect from the database<br><br>&nbsp;return 0;<br><br>}</pre>
    <h2>
      Output</h2>
    <pre>f1=8, f2=61 62 63 d0 9e d0 9b d0 ac d0 93 d0 90<br>f1=9, f2=61 62 63 d0 9e d0 9b d0 ac d0 93 d0 90<br>f1=10, f2=61 62 63 d0 9e d0 9b d0 ac d0 93 d0 90<br>f1=11, f2=61 62 63 d0 9e d0 9b d0 ac d0 93 d0 90<br>f1=12, f2=61 62 63 d0 9e d0 9b d0 ac d0 93 d0 90<br>f1=13, f2=61 62 63 d0 9e d0 9b d0 ac d0 93 d0 90<br>f1=14, f2=61 62 63 d0 9e d0 9b d0 ac d0 93 d0 90<br>f1=15, f2=61 62 63 d0 9e d0 9b d0 ac d0 93 d0 90<br>f1=16, f2=61 62 63 d0 9e d0 9b d0 ac d0 93 d0 90<br><br><hr width="100%"></pre>
    <center><a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a><a
        href="home.htm">Go
        Home</a></center>
    <p>Copyright &copy; 1996-2023, Sergei Kuchin, email: <a
        href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>,
      <a href="mailto:skuchin@gmail.com">skuchin@gmail.com
        <script language="JavaScript">
<!-- hide from old browsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </script></a>.
    </p>
    <p><i>Permission to use, copy, modify and redistribute this document
        for
        any purpose is hereby granted without fee, provided that the
        above
        copyright
        notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS"
        AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
        SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
        FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
        DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
        WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
        IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
        ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
        THIS SOFTWARE.</i>
    </p>
    <script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
    <script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>
  </body>
</html>
