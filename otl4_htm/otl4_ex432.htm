<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <meta name="Author" content="Sergei Kuchin">
  <meta name="GENERATOR"
 content="Mozilla/4.77 [en] (Win95; U) [Netscape]">
  <meta name="KeyWords"
 content="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">
  <title>OTL 4.0, Example 432 (user defined class and TEXTs, Sybase SQL
Server )</title>
</head>
<body>
<br>
<center>
<h1>OTL 4.0, Example 432 (user defined string class and TEXTs, Sybase
SQL
Server)</h1>
</center>
This example demonstrates how to use a <span
 style="font-style: italic;">user defined string class</span> (other
than std::string) with the database large string table columns. The
user defined string class should be compliant with the std::string, at
least with some of the std::strng functions should exist in the user
defined string class. See "class user_defined_string" in the example
for more detail.<br>
<br>
<h2>
Source Code</h2>
<pre>#include &lt;iostream&gt;<br>using namespace std;<br><br>#include &lt;string.h&gt;<br><br>class user_defined_string{<br>public:<br><br>  user_defined_string(void)<br>  {<br>    buf[0]=0;<br>  }<br><br>  user_defined_string(const char* s)<br>  {<br>    strcpy(buf,s);<br>  }<br><br>  user_defined_string(const user_defined_string&amp; s)<br>  {<br>    strcpy(buf,s.buf);<br>  }<br><br>  ~user_defined_string(){}<br><br>  user_defined_string&amp; operator=(const char* s)<br>  {<br>    strcpy(buf,s);<br>    return *this;<br>  }<br><br>  void assign(int size,char filler)<br>  {<br>    for(int i=0;i&lt;size;++i)<br>      buf[i]=filler;<br>    buf[size]=0;<br>  }<br><br>  void assign(char* temp_buf,int len)<br>  {<br>    for(int i=0;i&lt;len;++i)<br>      buf[i]=temp_buf[i];<br>    buf[len]=0;<br>  }<br><br>  char&amp; operator[](int ndx)<br>  {<br>    return buf[ndx];<br>  }<br><br>  int length(void) const <br>  {<br>    return strlen(buf);<br>  }<br><br>  user_defined_string&amp; operator=(const user_defined_string&amp; s)<br>  {<br>    strcpy(buf,s.buf);<br>    return *this;<br>  }<br><br>  const char* c_str(void) const<br>  {<br>    return buf;<br>  }<br><br>protected:<br><br>   char buf[7000];<br><br>};<br><br>ostream&amp; operator&lt;&lt;(ostream&amp; s,const user_defined_string&amp; str)<br>{<br>  s&lt;&lt;str.c_str();<br>  return s;<br>}<br><br>#define OTL_ODBC_UNIX // Compile OTL 4.0/ODBC<br>#define OTL_USER_DEFINED_STRING_CLASS_ON<br>#define USER_DEFINED_STRING_CLASS user_defined_string<br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><a
 using="" namespace="" std="" href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br>void insert()<br>// insert rows into table<br>{</pre>
<pre>&nbsp;user_defined_string f2;&nbsp;<br>&nbsp;db.<a
 href="otl3_connect_class.htm#set_max_long_size">set_max_long_size</a>(7000); // set maximum long string size for connect object<br><br>&nbsp;<a
 href="otl3_stream_class.htm">otl_stream</a> o(1, // buffer size has to be set to 1 for operations with LOBs<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "insert into test_tab values(:f1&lt;int&gt;,:f2&lt;<a
 href="otl3_bind_variables.htm#varchar_long">varchar_long</a>&gt;)",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // SQL statement<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db // connect object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br><br>&nbsp;for(int i=1;i&lt;=20;++i){<br>&nbsp; f2.assign(5001,' ');&nbsp;<br>&nbsp; for(int j=0;j&lt;5000;++j)<br>&nbsp;&nbsp; f2[j]='*';<br>&nbsp; f2[5000]='?';<br>  f2[5001]=0;<br>&nbsp; o&lt;&lt;i&lt;&lt;f2;<br>&nbsp;}<br><br>}<br><br>void select()<br>{&nbsp;<br>&nbsp;user_defined_string f2;<br>&nbsp;db.<a
 href="otl3_connect_class.htm#set_max_long_size">set_max_long_size</a>(7000); // set maximum long string size for connect object<br><br>&nbsp;<a
 href="otl3_stream_class.htm">otl_stream</a> i(1, // buffer size needs to be set to 1 for operations with LOBs<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "select * from test_tab where f1&gt;=:f11&lt;int&gt; and f1&lt;=:f12&lt;int&gt;*2",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // SELECT statement<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db // connect object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );&nbsp;<br>&nbsp;&nbsp; // create select stream<br>&nbsp;<br>&nbsp;float f1;<br><br>&nbsp;i&lt;&lt;8&lt;&lt;8; // assigning :f11 = 8, :f12 = 8<br>&nbsp;&nbsp; // SELECT automatically executes when all input variables are<br>&nbsp;&nbsp; // assigned. First portion of output rows is fetched to the buffer<br><br>&nbsp;while(!i.eof()){ // while not end-of-data<br>&nbsp; i&gt;&gt;f1&gt;&gt;f2;<br>&nbsp; cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", f2="&lt;&lt;f2[0]&lt;&lt;f2[f2.length()-1]&lt;&lt;", len="<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt;f2.length()&lt;&lt;endl;<br>&nbsp;}<br><br>&nbsp;i&lt;&lt;4&lt;&lt;4; // assigning :f11 = 4, :f12 = 4<br>&nbsp;&nbsp; // SELECT automatically executes when all input variables are<br>&nbsp;&nbsp; // assigned. First portion of output rows is fetched to the buffer<br><br>&nbsp;while(!i.eof()){ // while not end-of-data<br>&nbsp; i&gt;&gt;f1&gt;&gt;f2;<br>&nbsp; cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", f2="&lt;&lt;f2[0]&lt;&lt;f2[f2.length()-1]&lt;&lt;", len="<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt;f2.length()&lt;&lt;endl;<br>&nbsp;}<br><br>}<br><br>int main()<br>{<br>&nbsp;<a
 href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize ODBC environment<br>&nbsp;try{<br><br>&nbsp; db.rlogon("scott/tigger@sybsql"); // connect to ODBC<br><br>&nbsp; <a
 href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>&nbsp;&nbsp; (<br>&nbsp;&nbsp;&nbsp; db,<br>&nbsp;&nbsp;&nbsp; "drop table test_tab",<br><br>&nbsp;&nbsp;&nbsp; otl_exception::disabled // disable OTL exceptions<br>&nbsp;&nbsp; ); // drop table<br><br>&nbsp; <a
 href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>&nbsp;&nbsp; (<br>&nbsp;&nbsp;&nbsp; db,<br>&nbsp;&nbsp;&nbsp; "create table test_tab(f1 int, f2 text)"<br>&nbsp;&nbsp;&nbsp; );&nbsp; // create table<br><br>&nbsp; insert(); // insert records into table<br>&nbsp; select(); // select records from table<br><br>&nbsp;}<br><br>&nbsp;catch(<a
 href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>&nbsp; cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>&nbsp; cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>&nbsp; cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br>&nbsp;}<br><br>&nbsp;db.logoff(); // disconnect from ODBC<br><br>&nbsp;return 0;<br><br>}</pre>
<h2>
Output</h2>
<pre>f1=8, f2=*?, len=5001<br>f1=9, f2=*?, len=5001<br>f1=10, f2=*?, len=5001<br>f1=11, f2=*?, len=5001<br>f1=12, f2=*?, len=5001<br>f1=13, f2=*?, len=5001<br>f1=14, f2=*?, len=5001<br>f1=15, f2=*?, len=5001<br>f1=16, f2=*?, len=5001<br>f1=4, f2=*?, len=5001<br>f1=5, f2=*?, len=5001<br>f1=6, f2=*?, len=5001<br>f1=7, f2=*?, len=5001<br>f1=8, f2=*?, len=5001<br><br><hr
 width="100%"></pre>
<center><a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a><a
 href="home.htm">Go
Home</a></center>
<p>Copyright &copy; 1996-2023, Sergei Kuchin, email: <a
 href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>,
<a href="mailto:skuchin@gmail.com">skuchin@gmail.com/a&gt;.
<script language="JavaScript">
<!-- hide from old browsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </script></a></p>
<p><a href="mailto:skuchin@gmail.com"><i>Permission to use, copy,
modify and redistribute this document
for
any purpose is hereby granted without fee, provided that the above
copyright
notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</i>
</a></p>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>
</body>
</html>
