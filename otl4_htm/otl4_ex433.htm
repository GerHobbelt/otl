<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
  <title>OTL 4.0, Example 433 (OTL tracing, ODBC, Sybase SQL Server)</title>
  <meta content="Sergei Kuchin" name="Author">
  <meta content="Mozilla/3.03Gold (Win95; I) [Netscape]"
 name="GENERATOR">
  <meta
 content="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library"
 name="KeyWords">
</head>
<body>
<h1 align="center">OTL 4.0, Example 433 (OTL tracing, ODBC, Sybase SQL
Server)</h1>
<p>This example demonstrates how to use OTL tracing to trace OTL
function calls.</p>
<h2>Source Code</h2>
<pre>#include &lt;iostream&gt;<br>using namespace std;<br>#include &lt;stdio.h&gt;</pre>
<pre>unsigned int my_trace_level=<br><span style="color: rgb(0, 0, 0);">   0x1 | // 1st level of tracing</span><br
 style="color: rgb(0, 0, 0);"><span style="color: rgb(0, 0, 0);">   0x2 | // 2nd level of tracing</span><br
 style="color: rgb(0, 0, 0);"><span style="color: rgb(0, 0, 0);">   0x4 | // 3rd level of tracing</span><br
 style="color: rgb(0, 0, 0);"><span style="color: rgb(0, 0, 0);">   0x8 | // 4th level of tracing<br>   0x10; // 5th level of tracing</span><br>// each level of tracing is represented by its own bit, <br>// so levels of tracing can be combined in an arbitrary order.<br><br>#define <a
 href="otl3_compile.htm#OTL_TRACE">OTL_TRACE_LEVEL</a> my_trace_level <br>   // enables OTL tracing, and uses my_trace_level as a trace control variable.<br><br>#define OTL_TRACE_STREAM cerr <br>   // directs all OTL tracing to cerr<br><br>#define OTL_TRACE_LINE_PREFIX "MY OTL TRACE ==&gt; " <br>   // redefines the default OTL trace line prefix. This #define is optional<br><br>#define OTL_ODBC_UNIX // Compile OTL 4.0/ODBC<br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br><a
 href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br>void insert()<br>// insert rows into table<br>{ <br> <a
 href="otl3_stream_class.htm">otl_stream</a> o(10, // buffer size<br>              "insert into test_tab values(:f1&lt;int&gt;,:f2&lt;char[31]&gt;)", <br>                 // SQL statement<br>              db // connect object<br>             );<br> char tmp[32];<br><br> for(int i=1;i&lt;=23;++i){<br>  sprintf(tmp,"Name%d",i);<br>  o&lt;&lt;i&lt;&lt;tmp;<br> }<br>}<br><br>void select()<br>{ <br> <a
 href="otl3_stream_class.htm">otl_stream</a> i(5, // buffer size<br>              "select * from test_tab where f1&gt;=:f&lt;int&gt; and f1&lt;=:ff&lt;int&gt;*2",<br>                 // SELECT statement<br>              db // connect object<br>             ); <br>   // create select stream<br> <br> float f1;<br> char f2[31];<br><br> i&lt;&lt;8&lt;&lt;8; // assigning :f = 8; :ff = 8<br>   // SELECT automatically executes when all input variables are<br>   // assigned. First portion of output rows is fetched to the buffer<br><br> while(!i.eof()){ // while not end-of-data<br>  i&gt;&gt;f1&gt;&gt;f2;<br>  cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", f2="&lt;&lt;f2&lt;&lt;endl;<br> }<br><br>}<br><br>int main()<br>{<br> <a
 href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize ODBC environment<br> try{<br><br>  db.rlogon("scott/tigger@sybsql"); // connect to the database<br><br>  <a
 href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "drop table test_tab",<br>    otl_exception::disabled // disable OTL exceptions<br>   ); // drop table<br><br>  <a
 href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "create table test_tab(f1 int, f2 varchar(30))"<br>    );  // create table<br><br>  insert(); // insert records into table<br>  select(); // select records from table<br><br> }<br><br> catch(<a
 href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br> }<br><br> db.logoff(); // disconnect from the database<br><br> return 0;<br><br>}<br></pre>
<h2>Output</h2>
<pre>MY OTL TRACE ==&gt; otl_connect(this=0x805c608)::rlogon(connect_str="scott/******@sybsql", auto_commit=0);<br>MY OTL TRACE ==&gt; otl_cursor::direct_exec(connect=0x805c600,sqlstm="drop table test_tab",exception_enabled=0);<br>MY OTL TRACE ==&gt; otl_cursor::direct_exec(connect=0x805c600,sqlstm="create table test_tab(f1 int, f2 varchar(30))",exception_enabled=1);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::open(buffer_size=10, sqlstm=insert into test_tab values(:f1&lt;int&gt;,:f2&lt;char[31]&gt;), connect=0x805c600, implicit_select=0);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f1, value=1);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(char*: ftype=1, placeholder=:f2, value="Name1");<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f1, value=2);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(char*: ftype=1, placeholder=:f2, value="Name2");<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f1, value=3);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(char*: ftype=1, placeholder=:f2, value="Name3");<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f1, value=4);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(char*: ftype=1, placeholder=:f2, value="Name4");<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f1, value=5);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(char*: ftype=1, placeholder=:f2, value="Name5");<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f1, value=6);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(char*: ftype=1, placeholder=:f2, value="Name6");<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f1, value=7);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(char*: ftype=1, placeholder=:f2, value="Name7");<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f1, value=8);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(char*: ftype=1, placeholder=:f2, value="Name8");<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f1, value=9);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(char*: ftype=1, placeholder=:f2, value="Name9");<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f1, value=10);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(char*: ftype=1, placeholder=:f2, value="Name10");<br>MY OTL TRACE ==&gt; otl_stream, executing SQL Stm=insert into test_tab values(?       ,?            ), current batch size=10, row offset=0<br>MY OTL TRACE ==&gt; otl_connect(this=0x805c600)::commit();<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f1, value=11);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(char*: ftype=1, placeholder=:f2, value="Name11");<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f1, value=12);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(char*: ftype=1, placeholder=:f2, value="Name12");<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f1, value=13);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(char*: ftype=1, placeholder=:f2, value="Name13");<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f1, value=14);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(char*: ftype=1, placeholder=:f2, value="Name14");<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f1, value=15);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(char*: ftype=1, placeholder=:f2, value="Name15");<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f1, value=16);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(char*: ftype=1, placeholder=:f2, value="Name16");<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f1, value=17);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(char*: ftype=1, placeholder=:f2, value="Name17");<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f1, value=18);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(char*: ftype=1, placeholder=:f2, value="Name18");<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f1, value=19);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(char*: ftype=1, placeholder=:f2, value="Name19");<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f1, value=20);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(char*: ftype=1, placeholder=:f2, value="Name20");<br>MY OTL TRACE ==&gt; otl_stream, executing SQL Stm=insert into test_tab values(?       ,?            ), current batch size=10, row offset=0<br>MY OTL TRACE ==&gt; otl_connect(this=0x805c600)::commit();<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f1, value=21);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(char*: ftype=1, placeholder=:f2, value="Name21");<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f1, value=22);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(char*: ftype=1, placeholder=:f2, value="Name22");<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f1, value=23);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(char*: ftype=1, placeholder=:f2, value="Name23");<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::close();<br>MY OTL TRACE ==&gt; otl_stream, executing SQL Stm=insert into test_tab values(?       ,?            ), current batch size=3, row offset=0<br>MY OTL TRACE ==&gt; otl_connect(this=0x805c600)::commit();<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::open(buffer_size=5, sqlstm=select * from test_tab where f1&gt;=:f&lt;int&gt; and f1&lt;=:ff&lt;int&gt;*2, connect=0x805c600, implicit_select=0);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:f, value=8);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &lt;&lt;(int: ftype=4, placeholder=:ff, value=8);<br>MY OTL TRACE ==&gt; otl_stream, executing SQL Stm=select * from test_tab where f1&gt;=?       and f1&lt;=?       *2, buffer size=5<br>MY OTL TRACE ==&gt; otl_stream, fetched the first batch of rows, SQL Stm=select * from test_tab where f1&gt;=?       and f1&lt;=?       *2, RPC=5<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &gt;&gt;(float&amp; : ftype=4, placeholder=f1, value=8);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &gt;&gt;(char* : ftype=1, placeholder=f2, value=Name8);<br>f1=8, f2=Name8<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &gt;&gt;(float&amp; : ftype=4, placeholder=f1, value=9);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &gt;&gt;(char* : ftype=1, placeholder=f2, value=Name9);<br>f1=9, f2=Name9<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &gt;&gt;(float&amp; : ftype=4, placeholder=f1, value=10);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &gt;&gt;(char* : ftype=1, placeholder=f2, value=Name10);<br>f1=10, f2=Name10<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &gt;&gt;(float&amp; : ftype=4, placeholder=f1, value=11);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &gt;&gt;(char* : ftype=1, placeholder=f2, value=Name11);<br>f1=11, f2=Name11<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &gt;&gt;(float&amp; : ftype=4, placeholder=f1, value=12);<br>MY OTL TRACE ==&gt; otl_stream, fetched the next batch of rows, SQL Stm=select * from test_tab where f1&gt;=?       and f1&lt;=?       *2, RPC=9<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &gt;&gt;(char* : ftype=1, placeholder=f2, value=Name12);<br>f1=12, f2=Name12<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &gt;&gt;(float&amp; : ftype=4, placeholder=f1, value=13);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &gt;&gt;(char* : ftype=1, placeholder=f2, value=Name13);<br>f1=13, f2=Name13<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &gt;&gt;(float&amp; : ftype=4, placeholder=f1, value=14);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &gt;&gt;(char* : ftype=1, placeholder=f2, value=Name14);<br>f1=14, f2=Name14<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &gt;&gt;(float&amp; : ftype=4, placeholder=f1, value=15);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &gt;&gt;(char* : ftype=1, placeholder=f2, value=Name15);<br>f1=15, f2=Name15<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &gt;&gt;(float&amp; : ftype=4, placeholder=f1, value=16);<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::operator &gt;&gt;(char* : ftype=1, placeholder=f2, value=Name16);<br>f1=16, f2=Name16<br>MY OTL TRACE ==&gt; otl_stream(this=0xbff53cbc)::close();<br>MY OTL TRACE ==&gt; otl_connect(this=0x805c600)::logoff();<br><br><br><br><hr
 width="100%"></pre>
<center>
<p><a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a>
<a href="home.htm">Go Home</a> </p>
</center>
<p>Copyright &copy; 1996-2023, Sergei Kuchin, email: <a
 href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>,
<a href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>
<script language="JavaScript">
<!-- hide from old browsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </script>.</p>
<p><i>Permission to use, copy, modify and redistribute this document
for
any purpose is hereby granted without fee, provided that the above
copyright
notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. </i></p>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>
</body>
</html>
