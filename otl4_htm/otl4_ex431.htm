<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
  <head>

    <meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
    <title>OTL 4.0, Example 431 (64-bit integers (bigint), Sybase SQL
      Server, OTL/DOBC)</title>
    <meta name="Author" content="Sergei Kuchin">
    <meta name="GENERATOR" content="Mozilla/3.03Gold (Win95; I)
      [Netscape]">
    <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database
      API, C++, Template Library">
  </head>
  <body>
    <h1 align="center">OTL 4.0, Example 431 (64-bit integers (bigint),
      Sybase SQL Server, OTL/ODBC)</h1>
    <p>This example demonstrates the use of 64-bit integer bind
      variables
      with Sybase SQL Server, OTL/ODBC.</p>
    <h2>Source Code</h2>
    <pre>#include &lt;iostream&gt;<br>#include &lt;stdio.h&gt;<br>using namespace std;<br><br>#define OTL_ODBC_UNIX // Compile OTL 4.0/ODBC<br><pre>#define <a href="otl3_compile.htm#OTL_BIGINT">OTL_BIGINT</a> long long // Enabling 64-bit integers<br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br><a href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br>void insert()<br>// insert rows into table<br>{ <br> <a href="otl3_stream_class.htm">otl_stream</a> o(50, // buffer size<br>              "insert into test_tab values(:f1&lt;<a href="otl3_bind_variables.htm#bigint">bigint</a>&gt;,:f2&lt;char[31]&gt;)", <br>                 // SQL statement<br>              db // connect object<br>             );<br> char tmp[32];<br><br> for(OTL_BIGINT i=1;i&lt;=100;++i){<br>  sprintf(tmp,"Name%d",(int)i);<br>  o&lt;&lt;i&lt;&lt;tmp;<br> }<br>}<br><br>void select()<br>{ <br> <a href="otl3_stream_class.htm">otl_stream</a> i(50, // buffer size<br>              "select * from test_tab where f1&gt;=:f&lt;bigint&gt; and f1&lt;=:ff&lt;bigint&gt;*2",<br>                 // SELECT statement<br>              db // connect object<br>             ); <br>   // create select stream<br> <br> OTL_BIGINT f1;<br> char f2[31];<br><br> i&lt;&lt;(OTL_BIGINT)8&lt;&lt;(OTL_BIGINT)8; // assigning :f = 8; :ff = 8<br>   // SELECT automatically executes when all input variables are<br>   // assigned. First portion of output rows is fetched to the buffer<br><br> while(!i.eof()){ // while not end-of-data<br>  i&gt;&gt;f1&gt;&gt;f2;<br>  cout&lt;&lt;"f1=";<br>  cout&lt;&lt;f1&lt;&lt;", f2="&lt;&lt;f2&lt;&lt;endl;<br> }<br><br>}<br><br>int main()<br>{<br> <a href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize ODBC environment<br> try{<br><br>  db.rlogon("scott/tigger@sybsql"); // connect to ODBC<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "drop table test_tab",<br>    otl_exception::disabled // disable OTL exceptions<br>   ); // drop table<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "create table test_tab(f1 bigint, f2 varchar(30))"<br>    );  // create table<br><br>  insert(); // insert records into table<br>  select(); // select records from table<br><br> }<br><br> catch(<a href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>  cerr&lt;&lt;p.sqlstate&lt;&lt;endl; // print out SQLSTATE message<br>  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br> }<br><br> db.logoff(); // disconnect from Oracle<br><br> return 0;<br><br>}<br></pre>
<h2>Output</h2>
<pre>f1=8, f2=Name8<br>f1=9, f2=Name9<br>f1=10, f2=Name10<br>f1=11, f2=Name11<br>f1=12, f2=Name12<br>f1=13, f2=Name13<br>f1=14, f2=Name14<br>f1=15, f2=Name15<br>f1=16, f2=Name16<br><hr width="100%"></pre></pre>
    <div style="text-align: center;">
      <center>
        <p><a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a>
          <a href="home.htm">Go Home</a> </p>
      </center>
      <p>Copyright &copy; 1996-2023, Sergei Kuchin, email: <a
          href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>,
        <a href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>.
        <script language="JavaScript"><!-- hide from oldgmailsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </script></p>
      <p><i>Permission to use, copy, modify and redistribute this
          document
          for
          any purpose is hereby granted without fee, provided that the
          above
          copyright
          notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS"
          AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
          SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
          AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
          SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY
          DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
          PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
          TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE
          OR PERFORMANCE OF THIS SOFTWARE. </i></p>
    </div>
    <pre><center>
</center>


</pre>
    <script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
    <script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>
  </body>
</html>
