<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;
      charset=windows-1252">
    <meta name="Author" content="Sergei Kuchin">
    <meta name="GENERATOR" content="Mozilla/4.77 [en] (Win95; U)
      [Netscape]">
    <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database
      API, C++, Template Library">
    <title>OTL 4.0, Example 80 (otl_datetime container and datetime/date
      table containers)</title>
  </head>
  <body>
    <center>
      <h1>OTL 4.0, Example 80 (otl_datetime container and datetime/date
        table
        columns,
        MyODBC 2.50)</h1>
    </center>
    <h1>
      Example 80 (otl_datetime container and datetime/date table
      columns,
      MyODBC
      2.50)</h1>
    This example demonstrates simple INSERT/SELECT with MySQL's
    DATETIMEs/DATEs
    and <a href="otl3_stream_class.htm#otl_datetime">otl_datetime</a>.
    <h2>Source Code</h2>
    <pre>#include &lt;iostream&gt;<br>using namespace std;<br><br>#include &lt;stdio.h&gt;</pre>
    <pre>#define OTL_ODBC_MYSQL // Compile OTL 4.0/MyODBC<br>// #define OTL_ODBC_UNIX // uncomment this line if UnixODBC is used<br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br><a href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br>void insert(void)<br>// insert rows into table<br>{&nbsp;<br>&nbsp;otl_stream o(1, // buffer size should be == 1 on INSERT<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "insert into test_tab2 "<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "values(:f1&lt;int&gt;,:f2&lt;timestamp&gt;,:f3&lt;timestamp&gt;)",&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // INSERT statement<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db // connect object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br><br>&nbsp;otl_datetime tm;<br><br>&nbsp;for(int i=1;i&lt;=10;++i){<br>&nbsp; tm.year=1998;<br>&nbsp; tm.month=10;<br>&nbsp; tm.day=19;<br>&nbsp; tm.hour=23;<br>&nbsp; tm.minute=12;<br>&nbsp; tm.second=12;<br>&nbsp; o&lt;&lt;i&lt;&lt;tm&lt;&lt;tm;<br>&nbsp;}<br>}<br><br>void select(void)<br>{&nbsp;<br>&nbsp;otl_stream i(50, // buffer size may be &gt; 1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "select * from test_tab2",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // SELECT statement<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db // connect object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );&nbsp;<br>&nbsp;&nbsp; // create select stream<br>&nbsp;<br>&nbsp;int f1;<br>&nbsp;otl_datetime f2,f3;<br><br>#if (defined(_MSC_VER) &amp;&amp; _MSC_VER&gt;=1600) || defined(OTL_CPP_11_ON)<br>// C++11 (or higher) compiler<br> for(auto&amp; it : i){<br>  it&gt;&gt;f1&gt;&gt;f2&gt;&gt;f3;<br>  cout&lt;&lt;"f1="&lt;&lt;f1;<br>  cout&lt;&lt;", f2="&lt;&lt;f2.month&lt;&lt;"/"&lt;&lt;f2.day&lt;&lt;"/"<br>      &lt;&lt;f2.year&lt;&lt;" "&lt;&lt;f2.hour&lt;&lt;":"&lt;&lt;f2.minute&lt;&lt;":"<br>      &lt;&lt;f2.second;<br>  cout&lt;&lt;", f3="&lt;&lt;f3.month&lt;&lt;"/"&lt;&lt;f3.day&lt;&lt;"/"<br>      &lt;&lt;f3.year&lt;&lt;" "&lt;&lt;f3.hour&lt;&lt;":"&lt;&lt;f3.minute&lt;&lt;":"<br>      &lt;&lt;f3.second;<br>  cout&lt;&lt;endl;<br> }<br>#else<br>// C++98/03 compiler<br> while(!i.eof()){ // while not end-of-data<br>  i&gt;&gt;f1&gt;&gt;f2&gt;&gt;f3;<br>  cout&lt;&lt;"f1="&lt;&lt;f1;<br>  cout&lt;&lt;", f2="&lt;&lt;f2.month&lt;&lt;"/"&lt;&lt;f2.day&lt;&lt;"/"<br>      &lt;&lt;f2.year&lt;&lt;" "&lt;&lt;f2.hour&lt;&lt;":"&lt;&lt;f2.minute&lt;&lt;":"<br>      &lt;&lt;f2.second;<br>  cout&lt;&lt;", f3="&lt;&lt;f3.month&lt;&lt;"/"&lt;&lt;f3.day&lt;&lt;"/"<br>      &lt;&lt;f3.year&lt;&lt;" "&lt;&lt;f3.hour&lt;&lt;":"&lt;&lt;f3.minute&lt;&lt;":"<br>      &lt;&lt;f3.second;<br>  cout&lt;&lt;endl;<br> }<br>#endif<br><br>&nbsp;<br>}</pre>
    <pre>int main()<br>{<br>&nbsp;<a href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize ODBC environment<br>&nbsp;try{<br><br>&nbsp; db.rlogon("scott/tiger@mysql"); // connect to ODBC<br><br>&nbsp; <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>&nbsp;&nbsp; (<br>&nbsp;&nbsp;&nbsp; db,<br>&nbsp;&nbsp;&nbsp; "drop table test_tab2",<br>&nbsp;&nbsp;&nbsp; otl_exception::disabled // disable OTL exceptions<br>&nbsp;&nbsp; ); // drop table<br><br>&nbsp; <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>&nbsp;&nbsp; (<br>&nbsp;&nbsp;&nbsp; db,<br>&nbsp;&nbsp;&nbsp; "create table test_tab2(f1 int, f2 datetime, f3 date)"<br>&nbsp;&nbsp;&nbsp; );&nbsp; // create table<br><br>&nbsp; insert(); // insert records into table<br>&nbsp; select(); // select records from table<br><br>&nbsp;}<br><br>&nbsp;catch(<a href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>&nbsp; cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>&nbsp; cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>&nbsp; cerr&lt;&lt;p.sqlstate&lt;&lt;endl; // print out SQLSTATE message<br>&nbsp; cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br>&nbsp;}<br><br>&nbsp;db.logoff(); // disconnect from ODBC<br><br>&nbsp;return 0;<br><br>}</pre>
    <h2>
      Output</h2>
    <pre>f1=1, f2=10/19/1998 23:12:12, f3=10/19/1998 0:0:0&nbsp;<br>f1=2, f2=10/19/1998 23:12:12, f3=10/19/1998 0:0:0<br>f1=3, f2=10/19/1998 23:12:12, f3=10/19/1998 0:0:0<br>f1=4, f2=10/19/1998 23:12:12, f3=10/19/1998 0:0:0<br>f1=5, f2=10/19/1998 23:12:12, f3=10/19/1998 0:0:0<br>f1=6, f2=10/19/1998 23:12:12, f3=10/19/1998 0:0:0<br>f1=7, f2=10/19/1998 23:12:12, f3=10/19/1998 0:0:0<br>f1=8, f2=10/19/1998 23:12:12, f3=10/19/1998 0:0:0<br>f1=9, f2=10/19/1998 23:12:12, f3=10/19/1998 0:0:0<br>f1=10, f2=10/19/1998 23:12:12, f3=10/19/1998 0:0:0<br><br><br><br><br><hr width="100%"></pre>
    <center><a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a><a
        href="home.htm">Go
        Home</a></center>
    <p>Copyright © 1996-2022, Sergei Kuchin, email: <a
        href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>,
      <a href="mailto:skuchin@gmail.com">skuchin@gmail.com
        <script language="JavaScript"><!-- hide from old browsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </script></a>.
    </p>
    <p><i>Permission to use, copy, modify and redistribute this document
        for
        any purpose is hereby granted without fee, provided that the
        above
        copyright
        notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS"
        AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
        SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
        FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
        DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
        WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
        IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
        ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
        THIS SOFTWARE.</i>
    </p>
    <script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
    <script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>
  </body>
</html>
