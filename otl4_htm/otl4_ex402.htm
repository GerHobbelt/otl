<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
  <title>OTL 4.0, Example 402 (Simple Insert/Select and
otl_stream::clean() function for OTL/ODBC and Sybase SQL Server)</title>
  <meta name="Author" content="Sergei Kuchin">
  <meta name="GENERATOR"
 content="Mozilla/3.03Gold (Win95; I) [Netscape]">
  <meta name="KeyWords"
 content="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">
</head>
<body>
<h1 align="center">OTL 4.0, Example 402 (Simple Insert/Select and
otl_stream::clean()
function for OTL /ODBC and Sybase SQL Server)</h1>
<p>This example demonstrates simple INSERT, SELECT and the use of the <a
 href="otl3_stream_class.htm#clean">otl_stream::clean</a>()
function for OTL/ODBC and Sybase&nbsp; SQL Server..</p>
<h2>Source Code</h2>
<pre>#include &lt;iostream&gt;<br>using namespace std;<br><br>#include &lt;stdio.h&gt;</pre>
<pre>#define OTL_ODBC_UNIX // Compile OTL 4.0/ODBC<br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br><a
 href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br>void insert()<br>// insert rows into table<br>{ <br> <a
 href="otl3_stream_class.htm">otl_stream</a> o(10, // buffer size<br>              "insert into test_tab values(:f1&lt;int&gt;,:f2&lt;char[31]&gt;)", <br>                 // SQL statement<br>              db // connect object<br>             );<br><br> o.<a
 href="otl3_stream_class.htm#set_commit">set_commit</a>(0); // set stream's auto-commit to OFF.<br><br> try{<br>  o&lt;&lt;1&lt;&lt;"Line1"; // Enter one row into the stream<br>  o.<a
 href="otl3_stream_class.htm#flush">flush</a>(); // flush the strem buffer, i.e. force<br>             // the stream to execute<br>  o&lt;&lt;1&lt;&lt;"Line1"; // Enter the same data into the stream<br>                 // and cause a "duplicate key" error.<br>  o.<a
 href="otl3_stream_class.htm#flush">flush</a>();<br> }catch(<a
 href="otl3_exception_class.htm">otl_exception</a>&amp; p){<br>  if(p.code==2601){<br>   // ... duplicate key ...<br>   o.<a
 href="otl3_stream_class.htm#clean">clean</a>(1); // clean up the stream's buffer<br>               // and clean up the stream's internal<br>               // error flag as well. By doing this, <br>               // it's possible to recover from <br>               // a database error without closing<br>               // the stream. Remember, the number of <br>               // situtation when it's possible is <br>               // limited and the recover procedure should<br>               // be carefully designed.<br>  }else<br>   throw; // re-throw the exception to the outer catch block.<br> }<br><br><br> o&lt;&lt;2&lt;&lt;"Line2"; // Enter one more row of data after<br>                // recovering from the "duplicate key" <br>                // error<br> o.flush();<br><br> db.<a
 href="otl3_connect_class.htm#commit">commit</a>(); // commit transaction<br><br>}<br><br>void select()<br>{ <br> <a
 href="otl3_stream_class.htm">otl_stream</a> i(10, // buffer size<br>              "select * from test_tab",<br>                 // SELECT statement<br>              db // connect object<br>             ); <br>   // create select stream<br> <br> int f1;<br> char f2[31];<br><br> while(!i.eof()){ // while not end-of-data<br>  i&gt;&gt;f1&gt;&gt;f2;<br>  cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", f2="&lt;&lt;f2&lt;&lt;endl;<br> }<br><br>}<br><br>int main()<br>{<br> <a
 href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize ODBC environment<br> try{<br><br>  db.rlogon("scott/tigger@sybsql"); // connect to the database<br><br>  <a
 href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "drop table test_tab",<br>    otl_exception::disabled // disable OTL exceptions<br>   ); // drop table<br><br>  <a
 href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "create table test_tab(f1 int, f2 varchar(30))"<br>    );  // create table<br><br>  <a
 href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "create unique index ind001 on test_tab(f1)"<br>    );  // create unique index <br><br>  insert(); // insert records into table<br>  select(); // select records from table<br><br> }<br><br> catch(<a
 href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>  cerr&lt;&lt;p.code&lt;&lt;endl; // print out error code<br>  cerr&lt;&lt;p.sqlstate&lt;&lt;endl; // print out error SQLSTATE<br>  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br> }<br><br> db.logoff(); // disconnect from the database<br><br> return 0;<br><br>}<br></pre>
<h2>Output</h2>
<pre>f1=1, f2=Line1<br>f1=2, f2=Line2<br><br><hr width="100%"></pre>
<center>
<p><a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a>
<a href="home.htm">Go Home</a> </p>
</center>
<p>Copyright &copy; 1996-2023, Sergei Kuchin, email: <a
 href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>,
<a href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>.
<script language="JavaScript"><!-- hide from oldgmailsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </script></p>
<p><i>Permission to use, copy, modify and redistribute this document
for
any purpose is hereby granted without fee, provided that the above
copyright
notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. </i></p>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>
</body>
</html>
