<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
  <head>
    <meta http-equiv="content-type" content="text/html;
      charset=ISO-8859-1">
    <title>OTL 4.0, Example 65 (Simple Insert/Select and
      otl_stream::clean() function for Oracle 7)</title>
    <meta name="Author" content="Sergei Kuchin">
    <meta name="GENERATOR" content="Mozilla/3.03Gold (Win95; I)
      [Netscape]">
    <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database
      API, C++, Template Library">
  </head>
  <body>
    <h1 align="CENTER">OTL 4.0, Example 65 (Simple Insert/Select and
      otl_stream::clean() function for Oracle 7)</h1>
    <h1>Example 65 (Simple Insert/Select and otl_stream::clean()
      function for Oracle 7)</h1>
    <p>This example demonstrates simple INSERT, SELECT and the use of
      the <a href="otl3_stream_class.htm#clean">otl_stream::clean</a>()
      function for Oracle 7.</p>
    <h2>Source Code</h2>
    <pre>#include &lt;iostream&gt;
using namespace std;

#include &lt;stdio.h&gt;</pre>
    <pre>#define OTL_ORA7 // Compile OTL 4.0/OCI7
#include &lt;otlv4.h&gt; // include the OTL 4.0 header file

<a href="otl3_connect_class.htm">otl_connect</a> db; // connect object

void insert()
// insert rows into table
{ 
 <a href="otl3_stream_class.htm">otl_stream</a> o(10, // buffer size
              "insert into test_tab values(:f1&lt;int&gt;,:f2&lt;char[31]&gt;)", 
                 // SQL statement
              db // connect object
             );

 o.<a href="otl3_stream_class.htm#set_commit">set_commit</a>(0); // set stream's auto-commit to OFF.

 try{
  o&lt;&lt;1&lt;&lt;"Line1"; // Enter one row into the stream
  o.<a href="otl3_stream_class.htm#flush">flush</a>(); // flush the strem buffer, i.e. force
             // the stream to execute
  o&lt;&lt;1&lt;&lt;"Line1"; // Enter the same data into the stream
                 // and cause a "duplicate key" error.
  o.<a href="otl3_stream_class.htm#flush">flush</a>();
 }catch(<a href="otl3_exception_class.htm">otl_exception</a>&amp; p){
  if(p.code==1){
   // ORA-0001: ... duplicate key ...<br>   cout&lt;&lt;"STREAM ERROR STATE="&lt;&lt;o.<a href="otl3_stream_class.htm#get_error_state">get_error_state</a>()&lt;&lt;endl;
   o.<a href="otl3_stream_class.htm#clean">clean</a>(1); // clean up the stream's buffer
               // and clean up the stream's internal
               // error flag as well. By doing this, 
               // it's possible to recover from 
               // a database error without closing
               // the stream. Remember, the number of 
               // situtation when it's possible is 
               // limited and the recovery procedure should
               // be carefully designed.
  }else
   throw; // re-throw the exception to the outer catch block.
 }


 o&lt;&lt;2&lt;&lt;"Line2"; // Enter one more row of data after
                // recovering from the "duplicate key" 
                // error
 o.flush();

 db.<a href="otl3_connect_class.htm#commit">commit</a>(); // commit transaction

}

void select()
{ 
 <a href="otl3_stream_class.htm">otl_stream</a> i(10, // buffer size
              "select * from test_tab",
                 // SELECT statement
              db // connect object
             ); 
   // create select stream
 
 int f1;
 char f2[31];

 while(!i.eof()){ // while not end-of-data
  i&gt;&gt;f1&gt;&gt;f2;
  cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", f2="&lt;&lt;f2&lt;&lt;endl;
 }

}

int main()
{
 <a href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize OCI environment
 try{

  db.rlogon("scott/tiger"); // connect to Oracle

  <a href="otl3_const_sql.htm">otl_cursor::direct_exec
</a>   (
    db,
    "drop table test_tab",
    otl_exception::disabled // disable OTL exceptions
   ); // drop table

  <a href="otl3_const_sql.htm">otl_cursor::direct_exec
</a>   (
    db,
    "create table test_tab(f1 number, f2 varchar2(30))"
    );  // create table

  <a href="otl3_const_sql.htm">otl_cursor::direct_exec
</a>   (
    db,
    "create unique index ind001 on test_tab(f1)"
    );  // create unique index 

  insert(); // insert records into table
  select(); // select records from table

 }

 catch(<a href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions
  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message
  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error
  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error
 }

 db.logoff(); // disconnect from Oracle

 return 0;

}
</pre>
    <h2>Output</h2>
    <pre>STREAM ERROR STATE=1<br>f1=1, f2=Line1
f1=2, f2=Line2


<hr width="100%"></pre>
    <center>
      <p><a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a>
        <a href="home.htm">Go Home</a> </p>
    </center>
    <p>Copyright &copy; 1996-2023, Sergei Kuchin, email: <a
        href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>, <a
        href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>.
      <script language="JavaScript"><!-- hide from oldgmailsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </script></p>
    <p><i>Permission to use, copy, modify and redistribute this document
        for any purpose is hereby granted without fee, provided that the
        above copyright notice appear in all copies. THE SOFTWARE IS
        PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
        REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
        MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE
        LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
        DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
        DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
        OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
        USE OR PERFORMANCE OF THIS SOFTWARE. </i></p>
    <script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
    <script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>
  </body>
</html>
