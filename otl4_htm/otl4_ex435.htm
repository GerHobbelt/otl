<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
  <title>OTL 4.0, Example 435 (#define
OTL_THROWS_ON_SQL_SUCCESS_WITH_INFO, ODBC, Sybase SQL Server)</title>
  <meta name="Author" content="Sergei Kuchin">
  <meta name="GENERATOR"
 content="Mozilla/3.03Gold (Win95; I) [Netscape]">
  <meta name="KeyWords"
 content="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">
</head>
<body>
<h1 align="center"><small>OTL 4.0, Example 435 (#define
OTL_THROWS_ON_SQL_SUCCESS_WITH_INFO, ODBC, Sybase SQL Server)</small></h1>
<p>This example demonstrates #define <a
 href="otl3_compile.htm#OTL_THROWS_ON_SQL_SUCCESS_WITH_INFO">OTL_THROWS_ON_SQL_SUCCESS_WITH_INFO</a>
in a combination with #define <a
 href="otl3_compile.htm#OTL_UNCAUGHT_EXCEPTION_ON">OTL_EXTENDED_EXCEPTION</a>
(also see the otl_exception's
<a href="otl3_exception_class.htm#EXTENDED">extended fields</a>).</p>
<h2>Source Code</h2>
<pre>#include &lt;iostream&gt;<br>using namespace std;<br><br>#include &lt;stdio.h&gt;<br>#define OTL_ODBC_UNIX // Compile OTL 4.0/ODBC<br>#define OTL_EXTENDED_EXCEPTION // Enable extended field in otl_exception<br>#define OTL_THROWS_ON_SQL_SUCCESS_WITH_INFO<br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br><a
 href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br>void insert()<br>// insert rows into table<br>{ <br>  try{<br>    // Setting the "OTL throws on SQL_SUCCESS_WITH_INFO flag" to true<br>    db.<a
 href="otl3_connect_class.htm#set_throw_on_sql_success_with_info">set_throw_on_sql_success_with_info</a>(true); <br>    // Executing a T-SQL batch of INSERT statements. <br>    otl_cursor::<a
 href="otl3_const_sql.htm">direct_exec</a><br>      (db,<br>       "SET NOCOUNT ON; " // NOCOUNT needs to be set to ON in order to<br>                          // work with OTL.<br>       "INSERT INTO test_tab VALUES(1,'Name1'); "<br>       "INSERT INTO test_tab VALUES(2,'Name2'); "<br>       "INSERT INTO test_tab VALUES(2,'*Name2'); "<br>       "INSERT INTO test_tab VALUES(3,'Name3') ",<br>       otl_exception::enabled<br>      );<br>  }catch(<a
 href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>    cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>    cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>    cerr&lt;&lt;p.sqlstate&lt;&lt;endl; // print out SQLSTATE message<br>    cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br>    if(p.arr_len&gt;0){ // checking if the extended fields were populated<br>      for(int j=0;j&lt;p.arr_len;++j){<br>        cout&lt;&lt;"MSG["&lt;&lt;j&lt;&lt;"]="&lt;&lt;p.msg_arr[j]&lt;&lt;endl; // message array<br>        cout&lt;&lt;"SQLSTATE["&lt;&lt;j&lt;&lt;"]="&lt;&lt;p.sqlstate_arr[j]&lt;&lt;endl; // sqlstate array<br>        cout&lt;&lt;"CODE["&lt;&lt;j&lt;&lt;"]="&lt;&lt;p.code_arr[j]&lt;&lt;endl; // code array<br>      }<br>    }<br>  }<br>  // Setting the "throw flag" back to false<br>  db.<a
 href="file:///D%7C/oscl/vc/doc/otl4/otl3_connect_class.htm#set_throw_on_sql_success_with_info">set_throw_on_sql_success_with_info</a>(false); <br><br>}<br><br>int main()<br>{<br> <a
 href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize ODBC environment<br> try{<br><br>  db.rlogon("scott/tigger@sybsql"); // connect to MS&nbsp;SQL Server<br><br>  <a
 href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "drop table test_tab",<br>    otl_exception::disabled // disable OTL exceptions<br>   ); // drop table<br><br>  <a
 href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "create table test_tab(f1 int not null unique, f2 varchar(30))"<br>    );  // create table<br><br>  insert(); // insert records into table<br><br> }<br><br> catch(<a
 href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>  cerr&lt;&lt;p.sqlstate&lt;&lt;endl; // print out SQLSTATE info.<br>  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br>  if(p.arr_len&gt;0){ // checking if the extended fields were populated<br>   for(int j=0;j&lt;p.arr_len;++j){<br>    cout&lt;&lt;"MSG["&lt;&lt;j&lt;&lt;"]="&lt;&lt;p.msg_arr[j]&lt;&lt;endl; // message array<br>    cout&lt;&lt;"SQLSTATE["&lt;&lt;j&lt;&lt;"]="&lt;&lt;p.sqlstate_arr[j]&lt;&lt;endl; // sqlstate array<br>    cout&lt;&lt;"CODE["&lt;&lt;j&lt;&lt;"]="&lt;&lt;p.code_arr[j]&lt;&lt;endl; // code array<br>   }<br>  }<br> }<br><br> db.logoff(); // disconnect from MS SQL&nbsp;Server<br> return 0;<br><br>}<br></pre>
<h2>Output</h2>
<pre>[Sybase][ODBC Driver][Adaptive Server Enterprise]Attempt to insert duplicate key row in object 'test_tab' with unique index 'test_tab_f1_7450506592'<br><br>SET NOCOUNT ON; INSERT INTO test_tab VALUES(1,'Name1'); INSERT INTO test_tab VALUES(2,'Name2'); INSERT INTO test_tab VALUES(2,'*Name2'); INSERT INTO test_tab VALUES(3,'Name3') <br>23000<br><br>MSG[0]=[Sybase][ODBC Driver][Adaptive Server Enterprise]Attempt to insert duplicate key row in object 'test_tab' with unique index 'test_tab_f1_7450506592'<br><br>SQLSTATE[0]=23000<br>CODE[0]=2601<br>MSG[1]=[Sybase][ODBC Driver][Adaptive Server Enterprise]Command has been aborted.<br><br>SQLSTATE[1]=ZZZZZ<br>CODE[1]=3621<br><br><hr
 width="100%"></pre>
<center>
<p><a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a>
<a href="home.htm">Go Home</a> </p>
</center>
<p>Copyright &copy; 1996-2023, Sergei Kuchin, email: <a
 href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>,
<a href="mailto:skuchin@gmail.com">skuchin@gmail.com/a&gt;.
<script language="JavaScript"><!-- hide from old browsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </script></a></p>
<p><a href="mailto:skuchin@gmail.com"><i>Permission to use, copy,
modify and redistribute this document
for
any purpose is hereby granted without fee, provided that the above
copyright
notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. </i></a></p>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>
</body>
</html>
