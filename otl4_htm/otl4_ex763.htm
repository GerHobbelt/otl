<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
  <head>
    <meta http-equiv="content-type" content="text/html;
      charset=windows-1252">
    <title>OTL 4.0, Example 763 (otl_connect_pool)</title>
    <meta name="Author" content="Sergei Kuchin">
    <meta name="GENERATOR" content="Mozilla/3.03Gold (Win95; I)
      [Netscape]">
    <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database
      API, C++, Template Library">
  </head>
  <body>
    <h1 align="center">OTL 4.0, Example 763 (otl_connect_pool)</h1>
    <p>This example demonstrates how to use <a
        href="otl4_connect_pool.htm">otl_connect_pool</a>.<br>
    </p>
    <h2>Source Code</h2>
    <pre>#include &lt;iostream&gt;<br>#include &lt;thread&gt;<br>using namespace std;<br><br>#include &lt;stdio.h&gt;</pre>
    <pre>#define OTL_ORA8 // Compile OTL 4.0/OCI8<br>#define <a href="otl3_compile.htm#OTL_CONNECT_POOL_ON">OTL_CONNECT_POOL_ON</a><br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br>using ConnectPoolType=<a href="otl4_connect_pool.htm">otl_connect_pool</a>&lt;otl_connect,otl_exception&gt;;<br><br>void f1(ConnectPoolType* p)<br>{<br>  ConnectPoolType&amp; pool=*p;<br>  ConnectPoolType::<a href="otl4_connect_pool.htm#connect_ptr">connect_ptr</a> p1=pool.<a href="otl4_connect_pool.htm#get">get</a>();<br>  if(!p1){<br>   cerr&lt;&lt;"p1 is empty&lt;&lt;"&lt;&lt;endl;<br>   return;<br>  }<br>  try{<br>    cout&lt;&lt;"Using a connect from the pool for the first time..."&lt;&lt;endl;<br>    p1-&gt;direct_exec("drop table test_tab",0);<br>    p1-&gt;direct_exec("create table test_tab(f1 int)");<br>    otl_stream o(3,"INSERT INTO test_tab VALUES(:f1&lt;int&gt;)",*p1);<br>    o&lt;&lt;10;<br>    o.flush();<br>    o.close();<br>    otl_stream s(3,"SELECT f1 FROM test_tab",*p1);<br>    int f1;<br>    while(!s.eof()){<br>      s&gt;&gt;f1;<br>      cout&lt;&lt;"F1="&lt;&lt;f1&lt;&lt;endl;<br>    }<br>  }catch(otl_exception&amp; p){ // intercept OTL exceptions<br>    cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>    cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>    cerr&lt;&lt;p.sqlstate&lt;&lt;endl; // print out SQLSTATE message<br>    cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br>  }<br>  pool.<a href="otl4_connect_pool.htm#put">put</a>(std::move(p1));<br>}<br><br>void f2(ConnectPoolType* p)<br>{<br>  ConnectPoolType&amp; pool=*p;<br>  ConnectPoolType::<a href="otl4_connect_pool.htm#connect_ptr">connect_ptr</a> p2=pool.<a href="otl4_connect_pool.htm#get">get</a>();<br>  if(!p2){<br>   cerr&lt;&lt;"p2 is empty&lt;&lt;"&lt;&lt;endl;<br>   return;<br> }<br> try{<br>    cout&lt;&lt;"Using a connect from the pool for the second time..."&lt;&lt;endl;<br>    p2-&gt;direct_exec("drop table test_tab2",0);<br>    p2-&gt;direct_exec("create table test_tab2(f1 int)");<br>    otl_stream o(3,"INSERT INTO test_tab2 VALUES(:f1&lt;int&gt;)",*p2);<br>    o&lt;&lt;10;<br>    o.flush();<br>    o.close();<br>    otl_stream s(3,"SELECT f1 FROM test_tab2",*p2);<br>    int f1;<br>    while(!s.eof()){<br>      s&gt;&gt;f1;<br>      cout&lt;&lt;"F1="&lt;&lt;f1&lt;&lt;endl;<br>    }<br>  }catch(otl_exception&amp; p){ // intercept OTL exceptions<br>    cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>    cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>    cerr&lt;&lt;p.sqlstate&lt;&lt;endl; // print out SQLSTATE message<br>    cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br>  }<br>  pool.<a href="file:///C:/oscl/vc/doc/otl4/otl4_connect_pool.htm#put">put</a>(std::move(p2));<br>}<br><br>int main()<br>{<br> <a href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(1); // initialize the database API for multi-threaded environment<br> try{<br>   ConnectPoolType pool;<br>   // open a pool of 8 connections with auto_commit set to false.<br>   pool.<a href="otl4_connect_pool.htm#open">open</a>("scott/tiger",false,8);  <br>   // spawn two threads and call f1() and f2() concurrently.<br>   thread t1(f1,&amp;pool);<br>   thread t2(f2,&amp;pool);<br>   // wait until both threads are finished.<br>   t1.join();<br>   t2.join();<br>   // shrink the minimum pool size from 8 to 4<br>   pool.<a href="otl4_connect_pool.htm#shrink_pool">shrink_pool</a>(4);<br>   // close the pool.<br>   pool.<a href="otl4_connect_pool.htm#close">close</a>();<br> }catch(<a href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br> }<br><br><br> return 0;<br><br>}<br></pre>
    <h2>Output</h2>
    <pre>Using a connect from the pool for the first time...<br>Using a connect from the pool for the second time...<br><br>F1=10<br>F1=10<br><hr width="100%"></pre>
    <center>
      <p><a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a>
        <a href="home.htm">Go Home</a> </p>
    </center>
    <p>Copyright © 1996-2023, Sergei Kuchin, email: <a
        href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>, <a
        href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>
      <script language="JavaScript"><!-- hide from old browsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </script>.</p>
    <p><i>Permission to use, copy, modify and redistribute this document
        for any purpose is hereby granted without fee, provided that the
        above copyright notice appear in all copies. THE SOFTWARE IS
        PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
        REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
        MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE
        LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
        DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
        DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
        OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
        USE OR PERFORMANCE OF THIS SOFTWARE. </i></p>
    <script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
    <script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>
  </body>
</html>
