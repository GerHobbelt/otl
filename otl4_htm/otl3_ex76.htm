<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
   <TITLE>OTL 4.0, Example 76 (STL-compliant OTL stream iterators, Oracle 8)</TITLE>
   <META NAME="Author" CONTENT="Sergei Kuchin">
   <META NAME="GENERATOR" CONTENT="Mozilla/3.03Gold (Win95; I) [Netscape]">
   <META NAME="KeyWords" CONTENT="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">
</HEAD>
<BODY>

<H1 ALIGN=CENTER>OTL 4.0, Example 76 (STL-compliant OTL stream iterators,
Oracle 8)</H1>

<H1>Example 76 (STL-compliant OTL stream iterators, Oracle 8)</H1>

<P>This example demonstrates STL-compliant OTL stream itertors, std::strings,
and ANSI C++ typecasts. </P>

<H2>Source Code</H2>

<PRE>#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;</PRE>

<PRE>#define OTL_ORA8 // Compile OTL 4.0/OCI8
#define OTL_STL // Turn on STL features
#define OTL_ANSI_CPP // Turn on ANSI C++ typecasts
#include &lt;otlv4.h&gt; // include the OTL 4.0 header file

using namespace std;

<A HREF="otl3_connect_class.htm">otl_connect</A> db; // connect object

// row container class
class row{
public:
 int f1;
 string f2;

// default constructor
 row(){f1=0;}

// destructor
 ~row(){}

// copy constructor
 row(const row&amp; row)
 {
  f1=row.f1;
  f2=row.f2;
 }
 
// assignment operator
 row&amp; operator=(const row&amp; row)
 {
  f1=row.f1;
  f2=row.f2;
  return *this;
 }

};

// redefined operator&gt;&gt; for reading row&amp; from otl_stream
otl_stream&amp; operator&gt;&gt;(otl_stream&amp; s, row&amp; row)
{
 s&gt;&gt;row.f1&gt;&gt;row.f2;
 return s;
}

// redefined operator&lt;&lt; for writing row&amp; into otl_stream
otl_stream&amp; operator&lt;&lt;(otl_stream&amp; s, const row&amp; row)
{
 s&lt;&lt;row.f1&lt;&lt;row.f2;
 return s;
}

// redefined operator&lt;&lt; writing row&amp; into ostream
ostream&amp; operator&lt;&lt;(ostream&amp; s, const row&amp; row)
{
 s&lt;&lt;&quot;f1=&quot;&lt;&lt;row.f1&lt;&lt;&quot;, f2=&quot;&lt;&lt;row.f2;
 return s;
}

void insert()
// insert rows into table
{ 
 <A HREF="otl3_stream_class.htm">otl_stream</A> o(50, // buffer size
              &quot;insert into test_tab values(:f1&lt;int&gt;,:f2&lt;char[31]&gt;)&quot;, 
                 // SQL statement
              db // connect object
             );

 row r; // single row buffer
 vector&lt;row&gt; vo; // vector of rows

// populate the vector
 for(int i=1;i&lt;=100;++i){
  r.f1=i;
  r.f2=&quot;NameXXX&quot;;
  vo.push_back(r);
 }

 cout&lt;&lt;&quot;vo.size=&quot;&lt;&lt;vo.size()&lt;&lt;endl;

// insert vector into table
 copy(vo.begin(), 
      vo.end(), 
      <A HREF="otl3_output_iterator.htm">otl_output_iterator</A>&lt;row&gt;(o)
     );

}

void select()
{ 
 <A HREF="otl3_stream_class.htm">otl_stream</A> i(50, // buffer size
              &quot;select * from test_tab where f1&gt;=:f&lt;int&gt; and f1&lt;=:f*2&quot;,
                 // SELECT statement
              db // connect object
             ); 
   // create select stream
 
 vector&lt;row&gt; v; // vector of rows

// assigning :f = 8
 i&lt;&lt;8;

// SELECT automatically executes when all input variables are
// assigned. First portion of out rows is fetched to the buffer

// copy all rows to be fetched into the vector

 copy(<A HREF="otl3_input_iterator.htm">otl_input_iterator</A>&lt;row,ptrdiff_t&gt;(i), 
      <A HREF="otl3_input_iterator.htm">otl_input_iterator</A>&lt;row,ptrdiff_t&gt;(),
      back_inserter(v));    

 cout&lt;&lt;&quot;Size=&quot;&lt;&lt;v.size()&lt;&lt;endl;

// send the vector to cout
 copy(v.begin(), v.end(), ostream_iterator&lt;row&gt;(cout, &quot;\n&quot;));

// clean up the vector
 v.erase(v.begin(),v.end());

 i&lt;&lt;4; // assigning :f = 4
   // SELECT automatically executes when all input variables are
   // assigned. First portion of out rows is fetched to the buffer

// copy all rows to be fetched to the vector
 copy(<A HREF="otl3_input_iterator.htm">otl_input_iterator</A>&lt;row,ptrdiff_t&gt;(i), 
      <A HREF="otl3_input_iterator.htm">otl_input_iterator</A>&lt;row,ptrdiff_t&gt;(),
      back_inserter(v));    

 cout&lt;&lt;&quot;Size=&quot;&lt;&lt;v.size()&lt;&lt;endl;

// send the vector to cout
 copy(v.begin(), v.end(), ostream_iterator&lt;row&gt;(cout, &quot;\n&quot;));

}

int main()
{
 <A HREF="otl3_connect_class.htm">otl_connect::otl_initialize</A>(); // initialize OCI environment
 try{

  db.rlogon(&quot;scott/tiger&quot;); // connect to Oracle

  <A HREF="otl3_const_sql.htm">otl_cursor::direct_exec
</A>   (
    db,
    &quot;drop table test_tab&quot;,
    otl_exception::disabled // disable OTL exceptions
   ); // drop table

  <A HREF="otl3_const_sql.htm">otl_cursor::direct_exec
</A>   (
    db,
    &quot;create table test_tab(f1 number, f2 varchar2(30))&quot;
    );  // create table

  insert(); // insert records into table
  select(); // select records from table

 }

 catch(<A HREF="otl3_exception_class.htm">otl_exception</A>&amp; p){ // intercept OTL exceptions
  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message
  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error
  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error
 }

 db.logoff(); // disconnect from Oracle

 return 0;

}
</PRE>

<H2>Output</H2>

<PRE>vo.size=100
Size=9
f1=8, f2=NameXXX
f1=9, f2=NameXXX
f1=10, f2=NameXXX
f1=11, f2=NameXXX
f1=12, f2=NameXXX
f1=13, f2=NameXXX
f1=14, f2=NameXXX
f1=15, f2=NameXXX
f1=16, f2=NameXXX
Size=5
f1=4, f2=NameXXX
f1=5, f2=NameXXX
f1=6, f2=NameXXX
f1=7, f2=NameXXX
f1=8, f2=NameXXX











<HR WIDTH="100%"></PRE>

<CENTER><P><A HREF="otl3_examples.htm">Examples</A> <A HREF="otl3.htm">Contents</A>
<A HREF="home.htm">Go Home</A> </P></CENTER>

<P>Copyright &copy; 1996-2022, Sergei Kuchin, email: <A HREF="mailto:skuchin@gmail.com">skuchin@gmail.com</A>,
<A HREF="mailto:skuchin@gmail.com">skuchin@gmail.com</A>. <SCRIPT Language="JavaScript"><!-- hide from oldgmailsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </SCRIPT></P>

<P><I>Permission to use, copy, modify and redistribute this document for
any purpose is hereby granted without fee, provided that the above copyright
notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. </I></P>

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>
</BODY>
</HTML>
