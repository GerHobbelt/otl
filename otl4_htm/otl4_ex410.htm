<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
  <title>OTL 4.0, Example 410 (Group datatype override in SELECT,
Sybase SQL Server)</title>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <meta name="Author" content="Sergei Kuchin">
  <meta name="GENERATOR"
 content="Mozilla/3.03Gold (Win95; I) [Netscape]">
  <meta name="KeyWords"
 content="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">
</head>
<body>
<h1 align="center">OTL 4.0, Example 410 (Group data type override in
SELECT,
Sybase SQL Server)</h1>
<p>This example demonstrates a SELECT statement with a group of numeric
columns, being converted into a null terminated string. It is a useful
technique when there is a need to read and write number, which are
larger
than 16 digits. Also, this example demonstrates the overriding of
datetime
columns.</p>
<h2>Source Code</h2>
<pre>#include &lt;iostream&gt;<br>using namespace std;<br><br>#include &lt;stdio.h&gt;</pre>
<pre>#define OTL_ODBC_UNIX // Compile OTL 4.0/ODBC<br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br><a
 href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br>void insert()<br>// insert rows into table<br>{&nbsp;<br>&nbsp;<a
 href="otl3_stream_class.htm">otl_stream</a> o(50, // buffer size<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "insert into test_tab values(12345678900000000+convert(numeric,:f1&lt;int&gt;),:f11&lt;int&gt;,:f2&lt;char[31]&gt;, GETDATE())",&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // SQL statement<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db // connect object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>&nbsp;char tmp[32];<br><br>&nbsp;for(int i=1;i&lt;=100;++i){<br>&nbsp; sprintf(tmp,"Name%d",i);<br>&nbsp; o&lt;&lt;i&lt;&lt;i&lt;&lt;tmp;<br>&nbsp;}<br>}<br><br>void select()<br>{&nbsp;<br>&nbsp;<a
 href="otl3_stream_class.htm">otl_stream</a> i;<br><br>&nbsp;i.<a
 href="otl3_stream_class.htm#set_all_column_types">set_all_column_types</a>(otl_all_num2str | otl_all_date2str); <br>   // map all numeric columns to strings as well as<br>   // map all date columns to strings<br><br>&nbsp;i.open(50, // buffer size<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "select * from test_tab "<br>        "where f1&gt;=12345678900000000+convert(numeric,:f11&lt;int&gt;) "<br>        "  and f1&lt;=12345678900000000+convert(numeric,:f12&lt;int&gt;)*2",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // SELECT statement<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db // connect object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );&nbsp;<br>&nbsp;&nbsp; // create select stream<br>&nbsp;<br>&nbsp;char f1[40];<br> char f11[40];<br>&nbsp;char f2[31];<br> char f3[40];<br><br>&nbsp;i&lt;&lt;8&lt;&lt;8; <br>&nbsp;&nbsp; // SELECT automatically executes when all input variables are<br>&nbsp;&nbsp; // assigned. First portion of output rows is fetched to the buffer<br><br>&nbsp;while(!i.eof()){ // while not end-of-data<br>&nbsp; i&gt;&gt;f1&gt;&gt;f11&gt;&gt;f2&gt;&gt;f3;<br>&nbsp; cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", f11="&lt;&lt;f11&lt;&lt;", f2="&lt;&lt;f2&lt;&lt;", f3="&lt;&lt;f3&lt;&lt;endl;<br>&nbsp;}<br><br>&nbsp;i&lt;&lt;4&lt;&lt;4;<br>&nbsp;&nbsp; // SELECT automatically executes when all input variables are<br>&nbsp;&nbsp; // assigned. First portion of output rows is fetched to the buffer<br><br>&nbsp;while(!i.eof()){ // while not end-of-data<br>&nbsp; i&gt;&gt;f1&gt;&gt;f11&gt;&gt;f2&gt;&gt;f3;<br>&nbsp; cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", f11="&lt;&lt;f11&lt;&lt;", f2="&lt;&lt;f2&lt;&lt;", f3="&lt;&lt;f3&lt;&lt;endl;<br>&nbsp;}<br><br>}<br><br>int main()<br>{<br>&nbsp;<a
 href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize ODBC environment<br>&nbsp;try{<br><br>&nbsp; db.rlogon("scott/tigger@sybsql"); // connect to ODBC<br><br>&nbsp; <a
 href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>&nbsp;&nbsp; (<br>&nbsp;&nbsp;&nbsp; db,<br>&nbsp;&nbsp;&nbsp; "drop table test_tab",<br>&nbsp;&nbsp;&nbsp; otl_exception::disabled // disable OTL exceptions<br>&nbsp;&nbsp; ); // drop table<br><br>&nbsp; <a
 href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>&nbsp;&nbsp; (<br>&nbsp;&nbsp;&nbsp; db,<br>&nbsp;&nbsp;&nbsp; "create table test_tab(f1 numeric, f11 int, f2 varchar(30), f3 datetime)"<br>&nbsp;&nbsp;&nbsp; );&nbsp; // create table<br><br>&nbsp; insert(); // insert records into table<br>&nbsp; select(); // select records from table<br><br>&nbsp;}<br><br>&nbsp;catch(<a
 href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>&nbsp; cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>&nbsp; cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>&nbsp; cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br>&nbsp;}<br><br>&nbsp;db.logoff(); // disconnect from ODBC<br><br>&nbsp;return 0;<br><br>}</pre>
<h2>Output</h2>
<pre>f1=12345678900000008, f11=8, f2=Name8, f3=2008-08-12 13:07:48.880<br>f1=12345678900000009, f11=9, f2=Name9, f3=2006-08-12 13:07:48.890<br>f1=12345678900000010, f11=10, f2=Name10, f3=2006-08-12 13:07:48.896<br>f1=12345678900000011, f11=11, f2=Name11, f3=2006-08-12 13:07:48.906<br>f1=12345678900000012, f11=12, f2=Name12, f3=2006-08-12 13:07:48.916<br>f1=12345678900000013, f11=13, f2=Name13, f3=2006-08-12 13:07:48.923<br>f1=12345678900000014, f11=14, f2=Name14, f3=2006-08-12 13:07:48.933<br>f1=12345678900000015, f11=15, f2=Name15, f3=2006-08-12 13:07:48.943<br>f1=12345678900000016, f11=16, f2=Name16, f3=2006-08-12 13:07:48.953<br>f1=12345678900000004, f11=4, f2=Name4, f3=2006-08-12 13:07:48.843<br>f1=12345678900000005, f11=5, f2=Name5, f3=2006-08-12 13:07:48.853<br>f1=12345678900000006, f11=6, f2=Name6, f3=2006-08-12 13:07:48.860<br>f1=12345678900000007, f11=7, f2=Name7, f3=2006-08-12 13:07:48.870<br>f1=12345678900000008, f11=8, f2=Name8, f3=2006-08-12 13:07:48.880<br><br><hr
 width="100%"></pre>
<center>
<p><a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a><a
 href="home.htm">Go
Home</a> </p>
</center>
<p>Copyright &copy; 1996-2023, Sergei Kuchin, email: <a
 href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>,
<a href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>.
<script language="JavaScript"><!-- hide from oldgmailsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </script></p>
<p><i>Permission to use, copy, modify and redistribute this document
for
any purpose is hereby granted without fee, provided that the above
copyright
notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</i> </p>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>
</body>
</html>
