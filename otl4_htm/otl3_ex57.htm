<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
  <head>
    <meta http-equiv="content-type" content="text/html;
      charset=windows-1252">
    <title>OTL 4.0, Example 57 (Insert/Update/Select with Oracle 8 BLOB
      in stream mode)</title>
    <meta name="Author" content="Sergei Kuchin">
    <meta name="GENERATOR" content="Mozilla/3.03Gold (Win95; I)
      [Netscape]">
    <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database
      API, C++, Template Library">
  </head>
  <body>
    <h1 align="CENTER">OTL 4.0, Example 57 (Insert/Update/Select with
      Oracle
      8 BLOB in stream mode)</h1>
    <h1>Example 57 (Insert/Update/Select with Oracle 8 BLOB in stream
      mode)</h1>
    <p>This example demonstrates INSERT, UPDATE, and SELECT statements
      with
      the Oracle 8 BLOB datatype in <a href="otl3_lob_stream.htm">stream
        mode</a>.</p>
    <h2>Source Code</h2>
    <pre>#include &lt;iostream&gt;<br>using namespace std;<br><br>#include &lt;stdio.h&gt;</pre>
    <pre>#define OTL_ORA8 // Compile OTL 4.0/OCI8<br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br><a href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br>void insert()<br>// insert rows into table<br>{<a href="otl3_long_string.htm">otl_long_string</a> f2(60000); // define long string variable<br> <a href="otl3_stream_class.htm">otl_stream</a> o(1, // buffer size has to be set to 1 for operations with LOBs<br>              "insert into test_tab values(:f1&lt;int&gt;,empty_blob()) "<br>              "returning f2 into :f2&lt;<a href="otl3_bind_variables.htm#blob">blob</a>&gt; ",<br>                 // SQL statement<br>              db // connect object<br>             );<br> o.<a href="otl3_stream_class.htm#set_commit">set_commit</a>(0); // setting stream "auto-commit" to "off". It is required<br>                  // when LOB stream mode is used.<br><br> <a href="otl3_lob_stream.htm">otl_lob_stream</a> lob; // LOB stream for reading/writing unlimited number<br>                     // of bytes regardless of the buffer size.<br><br> for(int i=1;i&lt;=20;++i){<br>  for(int j=0;j&lt;50000;++j)<br>   f2[j]='*';<br>  f2[50000]='?';<br>  f2.<a href="otl3_long_string.htm#set_len">set_len</a>(50001);<br><br>  o&lt;&lt;i;<br><br>  o<a href="otl3_stream_class.htm#stream_write_lob">&lt;&lt;</a>lob; // Initialize otl_lob_stream by writing it<br>          // into otl_stream. Weird, isn't it?<br><br>  lob.<a href="otl3_lob_stream.htm#set_len">set_len</a>(50001+23123); // setting the total  size of<br>                            // the BLOB to be written.<br>   // It is required for compatibility<br>   // with earlier releases of OCI8: OCI8.0.3, OCI8.0.4.<br> <br>  lob<a href="otl3_lob_stream.htm#write">&lt;&lt;</a>f2; // writing first chunk of the BLOB into lob<br><br>  f2[23122]='?';<br>  f2.set_len(23123); // setting the size of the second chunk<br><br>  lob&lt;&lt;f2; // writing the second chunk of the BLOB into lob<br>  lob.<a href="otl3_lob_stream.htm">close</a>(); // closing the otl_lob_stream<br> }<br><br> db.commit(); // committing transaction.<br>}</pre>
    <pre>void update()<br>// insert rows in table<br>{ </pre>
    <pre> <a href="otl3_long_string.htm">otl_long_string</a> f2(6200); // define long string variable<br><br> <a href="otl3_stream_class.htm">otl_stream</a> o(1, // buffer size has to be set to 1 for operations with LOBs<br>              "update test_tab "<br>              "   set f2=empty_blob() "<br>              "where f1=:f1&lt;int&gt; "<br>              "returning f2 into :f2&lt;<a href="otl3_bind_variables.htm#blob">blob</a>&gt; ",<br>                 // SQL statement<br>              db // connect object<br>             );<br><br>  <a href="otl3_lob_stream.htm">otl_lob_stream</a> lob;<br><br>  o.<a href="otl3_stream_class.htm#set_commit">set_commit</a>(0); // setting stream "auto-commit" to "off". <br><br><br> for(int j=0;j&lt;6000;++j){<br>  f2[j]='#';<br> }<br><br> f2[6000]='?';<br> f2.<a href="otl3_long_string.htm#set_len">set_len</a>(6001);<br><br> o&lt;&lt;5;<br> o<a href="otl3_stream_class.htm#stream_write_lob">&lt;&lt;</a>lob; // Initialize otl_lob_stream by writing it<br>         // into otl_stream.<br><br> long rpc=o.get_rpc(); // get the RPC count<br> if(rpc==1){<br>   lob.<a href="otl3_lob_stream.htm#set_len">set_len</a>(6001*4); // setting the total size of of the CLOB to be written<br>   for(int i=1;i&lt;=4;++i)<br>     lob<a href="otl3_lob_stream.htm#write">&lt;&lt;</a>f2; // writing chunks of the CLOB into the otl_lob_stream<br>   lob.<a href="otl3_lob_stream.htm#close">close</a>(); // closing the otl_lob_stream<br> }else if(rpc==0){<br>   // nothing to do, closing the LOB stream in the "don't throw<br>   // otl_exception when size doesn't match" mode<br>   lob.<a href="otl3_lob_stream.htm#close">close</a>(true);<br> }<br><br> db.commit(); // committing transaction<br><br>}<br><br>void select()<br>{ <br> <a href="otl3_long_string.htm">otl_long_string</a> f2(20000); // define long string variable<br><br> <a href="otl3_stream_class.htm">otl_stream</a> i(10, // buffer size. To read BLOBs, it can be set to a size greater than 1<br>              "select * from test_tab where f1&gt;=:f&lt;int&gt; and f1&lt;=:f*2",<br>                 // SELECT statement<br>              db // connect object<br>             ); <br>   // create select stream<br> <br> float f1;<br> <a href="otl3_lob_stream.htm">otl_lob_stream</a> lob; // Stream for reading BLOB<br><br> i&lt;&lt;4; // assigning :f = 4<br>   // SELECT automatically executes when all input variables are<br>   // assigned. First portion of output rows is fetched to the buffer<br><br> while(!i.eof()){ // while not end-of-data<br>  i&gt;&gt;f1;<br>  cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;endl;<br>  i<a href="otl3_stream_class.htm#stream_read_lob">&gt;&gt;</a>lob; // initializing BLOB stream by reading the BLOB reference <br>          // into the otl_lob_stream from the otl_stream.<br>  if(f1==4 || f1==8)<br>    lob.<a href="otl3_lob_stream.htm#setInitialReadOffset">setInitialReadOffset</a>(30000);<br>  int n=0;<br>  while(!lob.<a href="otl3_lob_stream.htm#eof">eof</a>()){ // read while not "end-of-file" -- end of BLOB<br>   ++n;<br>   lob<a href="otl3_lob_stream.htm#read">&gt;&gt;</a>f2; // reading a chunk of BLOB<br>   cout&lt;&lt;"   chunk #"&lt;&lt;n;<br>   cout&lt;&lt;", f2="&lt;&lt;f2[0]&lt;&lt;f2[f2.len()-1]&lt;&lt;", len="&lt;&lt;f2.len()&lt;&lt;endl;<br>  }<br>  lob.<a href="otl3_lob_stream.htm#close">close</a>(); // closing the otl_lob_stream. This step may be skipped.<br>  <br> }<br><br>}<br><br>int main()<br>{<br> <a href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize OCI environment<br> try{<br><br>  db.rlogon("scott/tiger"); // connect to Oracle<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "drop table test_tab",<br>    otl_exception::disabled // disable OTL exceptions<br>   ); // drop table<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "create table test_tab(f1 number, f2 blob)"<br>    );  // create table<br><br>  insert(); // insert records into table<br>  update(); // update records in table<br>  select(); // select records from table<br><br> }<br><br> catch(<a href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br> }<br><br> db.logoff(); // disconnect from Oracle<br><br> return 0;<br><br>}<br></pre>
    <h2>Output</h2>
    <pre>f1=4<br>   chunk #1, f2=**, len=20000<br>   chunk #2, f2=?*, len=20000<br>   chunk #3, f2=*?, len=3124<br>f1=5<br>   chunk #1, f2=##, len=20000<br>   chunk #2, f2=#?, len=4004<br>f1=6<br>   chunk #1, f2=**, len=20000<br>   chunk #2, f2=**, len=20000<br>   chunk #3, f2=**, len=20000<br>   chunk #4, f2=*?, len=13124<br>f1=7<br>   chunk #1, f2=**, len=20000<br>   chunk #2, f2=**, len=20000<br>   chunk #3, f2=**, len=20000<br>   chunk #4, f2=*?, len=13124<br>f1=8<br>   chunk #1, f2=**, len=20000<br>   chunk #2, f2=?*, len=20000<br>   chunk #3, f2=*?, len=3124<br><br><br><hr width="100%"></pre>
    <center>
      <p><a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a>
        <a href="home.htm">Go Home</a> </p>
    </center>
    <p>Copyright © 1996-2023, Sergei Kuchin, email: <a
        href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>,
      <a href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>
      <script language="JavaScript"><!-- hide from oldgmailsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </script>.</p>
    <p><i>Permission to use, copy, modify and redistribute this document
        for
        any purpose is hereby granted without fee, provided that the
        above
        copyright
        notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS"
        AND THE
        AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
        INCLUDING
        ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
        EVENT
        SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
        CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
        LOSS OF
        USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
        NEGLIGENCE OR
        OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
        USE OR
        PERFORMANCE OF THIS SOFTWARE. </i></p>
    <script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
    <script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>
  </body>
</html>
