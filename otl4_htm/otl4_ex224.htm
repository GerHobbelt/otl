<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;
      charset=windows-1252">
    <meta name="Author" content="Sergei Kuchin">
    <meta name="GENERATOR" content="Mozilla/4.77 [en] (Win95; U)
      [Netscape]">
    <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database
      API, C++, Template Library">
    <title>OTL 4.0, Example 224 (std::string and CLOBs, DB2)</title>
  </head>
  <body>
    <center>
      <h1> OTL 4.0, Example 224 (std::string and CLOBs, DB2)</h1>
    </center>
    <h1> Example 224 (std::string and CLOBs, DB2)</h1>
    <h2> Source Code</h2>
    <pre>#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;</pre>
    <pre>#define OTL_DB2_CLI // Compile OTL 4.0/DB2 CLI
#define OTL_STL // Enable STL compatibility mode<br><br>#if (defined(__clang__) || defined(__GNUC__)) &amp;&amp; \<br>    (defined(OTL_CPP_14_ON) || defined(OTL_CPP_17_ON))<br>#include &lt;experimental/string_view&gt;<br>#define <a href="otl3_compile.htm#OTL_STD_STRING_VIEW_CLASS">OTL_STD_STRING_VIEW_CLASS</a> std::experimental::string_view<br>#endif
#elif defined(_MSC_VER) &amp;&amp; (_MSC_VER&gt;=1910) &amp;&amp; defined(OTL_CPP_17_ON)<br>// VC++ 2017 or higher when /std=c++latest is used<br>#include &lt;string_view&gt;<br>#define OTL_STD_STRING_VIEW_CLASS std::string_view<br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file

<a href="otl3_connect_class.htm">otl_connect</a> db; // connect object

void insert()
// insert rows into table
{</pre>

<pre>&nbsp;string f2;&nbsp;
&nbsp;db.<a href="otl3_connect_class.htm#set_max_long_size">set_max_long_size</a>(70000); // set maximum long string size for connect object

&nbsp;<a href="otl3_stream_class.htm">otl_stream</a> o(1, // buffer size has to be set to 1 for operations with LOBs
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "insert into test_tab values(:f1&lt;int&gt;,:f2&lt;<a href="otl3_bind_variables.htm#varchar_long">varchar_long</a>&gt;)",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // SQL statement
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db // connect object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );

&nbsp;for(int i=1;i&lt;=20;++i){
&nbsp; f2.assign(50001,' ');&nbsp;
&nbsp; for(int j=0;j&lt;50000;++j)
&nbsp;&nbsp; f2[j]='*';
&nbsp; f2[50000]='?';
#if defined(<a href="otl3_compile.htm#OTL_STD_STRING_VIEW_CLASS">OTL_STD_STRING_VIEW_CLASS</a>)<br>  OTL_STD_STRING_VIEW_CLASS f2_sv(f2.c_str(),f2.length());<br>  o&lt;&lt;i<a href="otl3_stream_class.htm#OTL_STD_STRING_VIEW_CLASS">&lt;&lt;</a>f2_sv;<br>#else<br>  o&lt;&lt;i&lt;&lt;f2;<br>#endif<br>
&nbsp;}

}

void select()
{&nbsp;
&nbsp;string f2;
&nbsp;db.<a href="otl3_connect_class.htm#set_max_long_size">set_max_long_size</a>(70000); // set maximum long string size for connect object

&nbsp;<a href="otl3_stream_class.htm">otl_stream</a> i(1, // buffer size needs to be set to 1 for operations with LOBs
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "select * from test_tab where f1&gt;=:f11&lt;int&gt; and f1&lt;=:f12&lt;int&gt;*2",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // SELECT statement
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db // connect object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );&nbsp;
&nbsp;&nbsp; // create select stream
&nbsp;
&nbsp;float f1;

&nbsp;i&lt;&lt;8&lt;&lt;8;
&nbsp;&nbsp; // SELECT automatically executes when all input variables are
&nbsp;&nbsp; // assigned. First portion of output rows is fetched to the buffer

&nbsp;while(!i.eof()){ // while not end-of-data
&nbsp; i&gt;&gt;f1&gt;&gt;f2;
&nbsp; cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", f2="&lt;&lt;f2[0]&lt;&lt;f2[f2.length()-1]&lt;&lt;", len="
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt;f2.length()&lt;&lt;endl;
&nbsp;}

&nbsp;i&lt;&lt;4&lt;&lt;4;
&nbsp;&nbsp; // SELECT automatically executes when all input variables are
&nbsp;&nbsp; // assigned. First portion of output rows is fetched to the buffer

&nbsp;while(!i.eof()){ // while not end-of-data
&nbsp; i&gt;&gt;f1&gt;&gt;f2;
&nbsp; cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", f2="&lt;&lt;f2[0]&lt;&lt;f2[f2.length()-1]&lt;&lt;", len="
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt;f2.length()&lt;&lt;endl;
&nbsp;}

}

int main()
{
&nbsp;<a href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize the database environment
&nbsp;try{

&nbsp; db.rlogon("scott/tiger@db2sql"); // connect to the database

&nbsp; <a href="otl3_const_sql.htm">otl_cursor::direct_exec
</a>&nbsp;&nbsp; (
&nbsp;&nbsp;&nbsp; db,
&nbsp;&nbsp;&nbsp; "drop table test_tab",

&nbsp;&nbsp;&nbsp; otl_exception::disabled // disable OTL exceptions
&nbsp;&nbsp; ); // drop table

&nbsp; <a href="otl3_const_sql.htm">otl_cursor::direct_exec
</a>&nbsp;&nbsp; (
&nbsp;&nbsp;&nbsp; db,
&nbsp;&nbsp;&nbsp; "create table test_tab(f1 int, f2 clob(4M))"
&nbsp;&nbsp;&nbsp; );&nbsp; // create table

&nbsp; insert(); // insert records into table
&nbsp; select(); // select records from table

&nbsp;}

&nbsp;catch(<a href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions
&nbsp; cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message
&nbsp; cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error
&nbsp; cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error
&nbsp;}

&nbsp;db.logoff(); // disconnect from the database

&nbsp;return 0;

}</pre>

<h2>
Output</h2>

<pre>f1=8, f2=*?, len=50001
f1=9, f2=*?, len=50001
f1=10, f2=*?, len=50001
f1=11, f2=*?, len=50001
f1=12, f2=*?, len=50001
f1=13, f2=*?, len=50001
f1=14, f2=*?, len=50001
f1=15, f2=*?, len=50001
f1=16, f2=*?, len=50001
f1=4, f2=*?, len=50001
f1=5, f2=*?, len=50001
f1=6, f2=*?, len=50001
f1=7, f2=*?, len=50001
f1=8, f2=*?, len=50001


<hr width="100%"></pre>

<center><a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a><a href="home.htm">Go
Home</a></center>

<p>Copyright © 1996-2025, Sergei Kuchin, email: <a href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>,
<a href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>.<script language="Javgmailpt">
<!-- hide from old browsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </script>

</p><p><i>Permission to use, copy, modify and redistribute this document for
any purpose is hereby granted without fee, provided that the above copyright
notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</i>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>


</p></body></html>
