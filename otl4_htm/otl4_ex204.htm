<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;
      charset=windows-1252">
    <meta name="Author" content="Sergei Kuchin">
    <meta name="GENERATOR" content="Mozilla/4.77 [en] (Win95; U)
      [Netscape]">
    <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database
      API, C++, Template Library">
    <title>OTL 4.0, Example 204 (otl_datetime container with TIMESTAMP
      values down to microseconds in Oracle 9i, and
      std::optional&lt;T&gt;)</title>
  </head>
  <body>
    <center>
      <h1>OTL 4.0, Example 204 (otl_datetime container with TIMESTAMP
        values down to microseconds in Oracle 9i, and
        std::optional&lt;T&gt;)</h1>
    </center>
    This example demonstrates simple INSERT/SELECT with Oracle 9i
    TIMESTAMPs and std::optional&lt;otl_datetime&gt; / <a
      href="otl3_stream_class.htm#otl_datetime">otl_datetime</a>.
    <h2>Source Code</h2>
    <pre>#include &lt;iostream&gt;<br>using namespace std;<br><br>#include &lt;stdio.h&gt;</pre>
<pre>#define OTL_ORA9I // Compile OTL 4.0/OCI9i<br><br>// Uncomment the line below in case of OCI8.1.7 that&nbsp;<br>// used against Oracle 9i.<br>//#define OTL_ORA8I<br><br>#if (defined(__clang__) || defined(__GNUC__)) &amp;&amp; defined(<a href="otl3_compile.htm#OTL_CPP_14_ON">OTL_CPP_14_ON</a>)<br>// enable OTL support for std::optional when clang or g++ is used and<br>// when -std=c++14 or higher switch is used<br>#define <a href="otl3_compile.htm#OTL_STREAM_WITH_STD_OPTIONAL_ON">OTL_STREAM_WITH_STD_OPTIONAL_ON</a><br>#endif<br><br>#if defined(_MSC_VER) &amp;&amp; (_MSC_VER&gt;=1910) &amp;&amp; defined(OTL_CPP_17_ON)<br>// VC++ 2017 or higher when /std=c++latest is used<br>#define OTL_STREAM_WITH_STD_OPTIONAL_ON<br>#endif<br><br>#define <a href="otl3_compile.htm#OTL_ORA_TIMESTAMP">OTL_ORA_TIMESTAMP<br></a>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br><br>#if (defined(__clang__) || defined(__GNUC__)) &amp;&amp; defined(OTL_CPP_14_ON) \<br>  &amp;&amp; defined(OTL_STREAM_WITH_STD_OPTIONAL_ON)<br>// for clang or g++, when they use -std=c++14 or higher<br>#include &lt;experimental/optional&gt;<br>#endif<br><br>#if defined(_MSC_VER) &amp;&amp; (_MSC_VER&gt;=1910) &amp;&amp; defined(OTL_CPP_17_ON)<br>// VC++ 2017 or higher when /std=c++latest is used<br>#include &lt;optional&gt;<br>#endif<br><br><a href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br>void insert(void)<br>// insert rows into table<br>{&nbsp;<br>&nbsp;<a href="otl3_stream_class.htm">otl_stream</a> o(3, // stream buffer size in logical rows.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "insert into test_tab "<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "values(:f1&lt;int&gt;,:f2&lt;<a href="otl3_bind_variables.htm#timestamp">timestamp</a>&gt;)",&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // INSERT statement<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db // connect object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br><br>&nbsp;<a href="otl3_stream_class.htm#otl_datetime">otl_datetime</a> tm;<br><br>&nbsp;for(int i=1;i&lt;=10;++i){<br>&nbsp; tm.year=1998;<br>&nbsp; tm.month=10;<br>&nbsp; tm.day=19;<br>&nbsp; tm.hour=23;<br>&nbsp; tm.minute=12;<br>&nbsp; tm.second=12;<br>&nbsp; tm.frac_precision=6; // microseconds<br>&nbsp; tm.fraction=123456;<br>#if (defined(__clang__) || defined(__GNUC__)) &amp;&amp; defined(OTL_CPP_14_ON) \<br>  &amp;&amp; defined(OTL_STREAM_WITH_STD_OPTIONAL_ON)<br>// for clang or g++, when they use -std=c++14 or higher<br>  std::experimental::optional&lt;otl_datetime&gt; tm2;<br>  if(i!=5)<br>    tm2=tm;<br>  o&lt;&lt;i&lt;&lt;tm2;<br>#elif defined(_MSC_VER) &amp;&amp; (_MSC_VER&gt;=1910) &amp;&amp; defined(OTL_CPP_17_ON)<br>// VC++ 2017 or higher when /std=c++latest is used<br>  std::optional&lt;otl_datetime&gt; tm2;<br>  if(i!=5)<br>    tm2=tm;<br>  o&lt;&lt;i&lt;&lt;tm2;<br>#else<br>  if(i!=5)<br>    o&lt;&lt;i&lt;&lt;tm;<br>  else<br>    o&lt;&lt;i&lt;&lt;otl_null();<br>#endif<br>&nbsp;}<br>}<br><br>void select(void)<br>{&nbsp;<br>&nbsp;otl_stream i(5, // stream buffer size in logical rows<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "select * from test_tab",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // SELECT statement<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db // connect object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );&nbsp;<br>&nbsp;<br>#if (defined(__clang__) || defined(__GNUC__)) &amp;&amp; defined(OTL_CPP_14_ON) \<br>  &amp;&amp; defined(OTL_STREAM_WITH_STD_OPTIONAL_ON)<br>// for clang or g++, when they use -std=c++14 or higher<br> std::experimental::optional&lt;int&gt; f1;<br> std::experimental::optional&lt;otl_datetime&gt; f2;<br>#elif defined(_MSC_VER) &amp;&amp; (_MSC_VER&gt;=1910) &amp;&amp; defined(OTL_CPP_17_ON)<br>// VC++ 2017 or higher when /std=c++latest is used<br> std::optional&lt;int&gt; f1;<br> std::optional&lt;otl_datetime&gt; f2;<br>#else<br> int f1=0;<br> otl_datetime f2;<br>#endif<br><br><br>&nbsp;while(!i.eof()){ // while not end-of-data<br><br><br>#if (defined(__clang__) || defined(__GNUC__)) &amp;&amp; defined(OTL_CPP_14_ON) \<br>  &amp;&amp; defined(OTL_STREAM_WITH_STD_OPTIONAL_ON)<br>// for clang or g++, when they use -std=c++14 or higher<br> // Second's precision needs to be specified BEFORE the structure can be<br> // used either for writing or reading timestamp values, which have second's <br> // fractional part.<br>   f2.emplace(otl_datetime());<br>   f2-&gt;frac_precision=6; // microseconds<br>   i&gt;&gt;f1&gt;&gt;f2;<br>   cout&lt;&lt;"f1="&lt;&lt;*f1;<br>   if(!f2)<br>     cout&lt;&lt;", f2=NULL";<br>   else<br>     cout&lt;&lt;", f2="&lt;&lt;f2-&gt;month&lt;&lt;"/"&lt;&lt;f2-&gt;day&lt;&lt;"/"<br>         &lt;&lt;f2-&gt;year&lt;&lt;" "&lt;&lt;f2-&gt;hour&lt;&lt;":"&lt;&lt;f2-&gt;minute&lt;&lt;":"<br>         &lt;&lt;f2-&gt;second&lt;&lt;"."<br>         &lt;&lt;f2-&gt;fraction;<br>#elif defined(_MSC_VER) &amp;&amp; (_MSC_VER&gt;=1910) &amp;&amp; defined(OTL_CPP_17_ON)<br>// VC++ 2017 or higher when /std=c++latest is used<br>   f2.emplace(otl_datetime());<br>   f2-&gt;frac_precision=6; // microseconds<br>   i&gt;&gt;f1&gt;&gt;f2;<br>   cout&lt;&lt;"f1="&lt;&lt;*f1;<br>   if(!f2)<br>     cout&lt;&lt;", f2=NULL";<br>   else<br>     cout&lt;&lt;", f2="&lt;&lt;f2-&gt;month&lt;&lt;"/"&lt;&lt;f2-&gt;day&lt;&lt;"/"<br>         &lt;&lt;f2-&gt;year&lt;&lt;" "&lt;&lt;f2-&gt;hour&lt;&lt;":"&lt;&lt;f2-&gt;minute&lt;&lt;":"<br>         &lt;&lt;f2-&gt;second&lt;&lt;"."<br>         &lt;&lt;f2-&gt;fraction;<br>#else<br> // Second's precision needs to be specified BEFORE the stucture can be<br> // used either for writnig or reading timestamp values, which have second's <br> // fractional part.<br>   f2.frac_precision=6; // microseconds<br>   i&gt;&gt;f1&gt;&gt;f2;<br>   cout&lt;&lt;"f1="&lt;&lt;f1;<br>   if(i.is_null())<br>     cout&lt;&lt;", f2=NULL";<br>   else<br>     cout&lt;&lt;", f2="&lt;&lt;f2.month&lt;&lt;"/"&lt;&lt;f2.day&lt;&lt;"/"<br>         &lt;&lt;f2.year&lt;&lt;" "&lt;&lt;f2.hour&lt;&lt;":"&lt;&lt;f2.minute&lt;&lt;":"<br>         &lt;&lt;f2.second&lt;&lt;"."<br>         &lt;&lt;f2.fraction;<br>#endif<br>  cout&lt;&lt;endl;<br> }<br>&nbsp;<br>}</pre>
<pre>int main()<br>{<br>&nbsp;<a href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize OCI environment<br>&nbsp;try{<br><br>&nbsp; db.rlogon("scott/tiger"); // connect to Oracle<br><br>&nbsp; <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>&nbsp;&nbsp; (<br>&nbsp;&nbsp;&nbsp; db,<br>&nbsp;&nbsp;&nbsp; "drop table test_tab",<br>&nbsp;&nbsp;&nbsp; otl_exception::disabled // disable OTL exceptions<br>&nbsp;&nbsp; ); // drop table<br><br>&nbsp; <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>&nbsp;&nbsp; (<br>&nbsp;&nbsp;&nbsp; db,<br>&nbsp;&nbsp;&nbsp; "create table test_tab(f1 int, f2 timestamp)"<br>&nbsp;&nbsp;&nbsp; );&nbsp; // create table<br><br>&nbsp; insert(); // insert records into table<br>&nbsp; select(); // select records from table<br><br>&nbsp;}<br><br>&nbsp;catch(<a href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>&nbsp; cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>&nbsp; cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>&nbsp; cerr&lt;&lt;p.sqlstate&lt;&lt;endl; // print out SQLSTATE message<br>&nbsp; cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br>&nbsp;}<br><br>&nbsp;db.logoff(); // disconnect from Oracle<br><br>&nbsp;return 0;<br><br>}</pre>
<h2>
Output</h2>
<pre>f1=1, f2=10/19/1998 23:12:12.123456<br>f1=2, f2=10/19/1998 23:12:12.123456<br>f1=3, f2=10/19/1998 23:12:12.123456<br>f1=4, f2=10/19/1998 23:12:12.123456<br>f1=5, f2=NULL<br>f1=6, f2=10/19/1998 23:12:12.123456<br>f1=7, f2=10/19/1998 23:12:12.123456<br>f1=8, f2=10/19/1998 23:12:12.123456<br>f1=9, f2=10/19/1998 23:12:12.123456<br>f1=10, f2=10/19/1998 23:12:12.123456<br><br><hr width="100%"></pre>
<center><a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a><a href="home.htm">Go
Home</a></center>
<p>Copyright © 1996-2020, Sergei Kuchin, email: <a href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>,
<a href="mailto:skuchin@gmail.com">skuchin@gmail.com
<script language="JavaScript"><!-- hide from old browsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </script></a>.
</p>
<p><i>Permission to use, copy, modify and redistribute this document
for
any purpose is hereby granted without fee, provided that the above
copyright
notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</i>
</p>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>



</body></html>
