<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
  <head>
    <meta http-equiv="CONTENT-TYPE" content="text/html;
      charset=utf8">
    <title>Oracle, Odbc and DB2-CLITemplate Library, Version 4.0, What's
      New</title>
    <meta name="GENERATOR" content="OpenOffice.org 3.0 (Win32)">
    <meta name="AUTHOR" content="Sergei Kuchin">
    <meta name="CREATED" content="0;0">
    <meta name="CHANGEDBY" content="Sergei Kuchin">
    <meta name="CHANGED" content="20090101;12580500">
    <meta name="KEYWORDS" content="OTL, Oracle, ODBC, DB2, CLI, database
      API, C++, Template Library">
    <meta name="Info 1" content="">
    <meta name="Info 2" content="">
    <meta name="Info 3" content="">
    <meta name="Info 4" content="">
  </head>
  <body dir="ltr" lang="en-US">
    <div>
      <h1 align="center">Oracle, Odbc and DB2-CLI Template Library,
        Version 4.0</h1>
      <h1 align="center">What's New</h1>
      <h1>Current release number of the OTL header file</h1>
      <p>Current release number of the OTL header file is <font size="5">4.0.481.
          <script language="JavaScript">

<!-- hide from old browsers

	var modDate = new Date(document.lastModified)

	document.write("<" + "i> (Updated: " + (modDate.getMonth()+1) + "/" +

	modDate.getDate() + "/" + "0"+(modDate.getYear())%100+"<" + "/i>).");

 //-->



  </script><i> (Updated: 2/21/025</i>). </font>If you need the up-to-date version of the OTL header
        file, see the <a href="https://otl.sourceforge.net/otl3_down.htm">download instructions</a>.&nbsp;

      </p>
      <h1>OTL 4.0.481 (updated (4)) is now released.<br>
      </h1>
    </div>
    <h1>For more detail, see the <a href="https://otl.sourceforge.net/otl3_whatn.htm#summary">summary </a>of new
      features. <i>The <a href="https://otl.sourceforge.net/otl4_htm.zip">archived version</a> of
        the OTL Web pages </i>is available. <br>
    </h1>
    <div>
      <h1><a name="summary"></a><i>From OTL 3.0.0 to OTL 4.0.481:
          summary of new features and bug fixes</i></h1>
    </div>
    <dl>
      <dd> 
        <table style="page-break-before: always;" width="923" cellspacing="3" cellpadding="2" border="1">
          <colgroup><col width="816"> <col width="2"> <col width="80">
          </colgroup><tbody>
            <tr>
              <td width="816">
                <p><font size="4"><b>Feature<br>
                    </b></font></p>
              </td>
              <td width="80">
                <p><font size="4"><b>Comment</b></font></p>
              </td>
            </tr>
            <tr>
            </tr>
            <tr>
            </tr>
            <tr>
              <td valign="top">21-Feb-2025, (New in OTL 4.0.481 (updated
                (5))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.13.1 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
              </td>
            </tr>
            <tr>
              <td valign="top">17-Feb-2025, (New in OTL 4.0.481 (updated
                (4))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.11.44 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">12-Feb-2025, (New in OTL 4.0.481 (updated
                (3))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.9.70 has been
                    released. OTL works with it.<br>
                  </li>
                  <li>Visual Studio 2022 version 17.13.0 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">17-Jan-2025, (New in OTL 4.0.481 (updated
                (2))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.9.69 has been
                    released. OTL works with it.<br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.43 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">15-Jan-2025, (New in OTL 4.0.481
                (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.12.4 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">13-Jan-2025, (New in OTL 4.0.481):<br>
                <br>
                <ul>
                  <li>Copyrights have been updated for 2025.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">04-Dec-2024, (New in OTL 4.0.480
                (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.12.3 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">02-Dec-2024, (New in OTL 4.0.480):<br>
                <br>
                <ul>
                  <li>Copyright notice in the header file (otlv4.h) has
                    been updated with the latest correct information.<br>
                  </li>
                </ul>
                <p><br>
                </p>
              </td>
            </tr>
            <tr>
              <td valign="top">01-Dec-2024, (New in OTL 4.0.479):<br>
                <br>
                <ul>
                  <li>OTL was successfully tested with older versions of
                    Clang: 16.0.6, 17.0.6, and 18.1.8.<br>
                    <br>
                  </li>
                  <li>Better auto-detection of C++ compiler "std"
                    compile options has been implemented in order to
                    detect corresponding compile modes (C++20, C++23 for
                    GNU C++, Clang, and Visual C++).<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">28-Nov-2024, (New in OTL 4.0.478 (updated
                7)):<br>
                <br>
                <ul>
                  <li>OTL was tested successfully with all latest
                    versions of supported GNU C++ compilers: 11.5,
                    12.4,13.3, and 14.2.<br>
                  </li>
                </ul>
                :</td>
            </tr>
            <tr>
              <td valign="top">26 -Nov-2024, (New in OTL 4.0.478
                (updated 6)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.12.2 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">22-Nov-2024, (New in OTL 4.0.478 (updated
                5)):<br>
                <br>
                <ul>
                  <li>Major release of DB2 LUW (12.1) was made available
                    on Nov-14-2024. OTL works with it.<br>
                  </li>
                </ul>
                <br>
              </td>
            </tr>
            <tr>
              <td valign="top">21-Nov-2024, (New in OTL 4.0.478 (updated
                4)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.12.1 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
              </td>
            </tr>
            <tr>
              <td valign="top">17-Nov-2024, (New in OTL 4.0.478 (updated
                3)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.12.0 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">15-Nov-2024, (New in OTL 4.0.478 (updated
                2)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.11.6 has been
                    released. OTL works with it.<br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.42 has been
                    released. OTL works with it.</li>
                  <li>Visual Studio 2017 version 15.9.68 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">11-Nov-2024, (New in OTL 4.0.478):<br>
                <br>
                <ul>
                  <li>OTL introduces the following new #define for
                    compatibility with C++23: #define <a moz-do-not-send="true" href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CPP_23_ON">OTL_CPP_23_ON</a>.</li>
                </ul>
                <p><br>
                </p>
              </td>
            </tr>
            <tr>
              <td valign="top">10-Nov-2024, (New in OTL 4.477):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.11.5. OTL works with
                    it.<br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.41. OTL works
                    with it.</li>
                  <li>Visual Studio 2017 version 15.9.67. OTL works with
                    it.</li>
                  <li>GNU C++ 14.2.0. OTL works with it.</li>
                  <li>Clang C++ 18.1.8. OTL works with it.</li>
                </ul>
                <p>I was unable to support OTL for medical reasons, my
                  apologies to all OTL users.<br>
                  <br>
                </p>
              </td>
            </tr>
            <tr>
              <td valign="top">01-Feb-2024, (New in OTL 4.0.476 (updated
                (24))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.8.5 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.33 has been
                    released. OTL works with it.<br>
                  </li>
                </ul>
                <br>
                <br>
                29-Jul-2023, (New in OTL 4.0.476 (updated (23))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.7.6 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.31 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
                <ul>
                  <li>Visual Studio 2017 version 15.9.56 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>CLANG 17.0.2 has been released. OTL works with it
                    when -Wno-unsafe-buffer-usage is used. CLANG 16
                    introduced attribute [[clang::unsafe_buffer_usage]]
                    but it's not fully implemented yet. So for now, use
                    -Wno-unsafe-buffer-usage to disable the warning,
                    especially when -Werror is used (treat warnings as
                    errors).<br>
                  </li>
                </ul>
                <br>
                28-Jul-2023, (New in OTL 4.0.476 (updated (22))):<br>
                <br>
                <ul>
                  <li>GNU C++ 13.2 has been released recently. OTL works
                    with it.</li>
                </ul>
                <br>
                12-Jul-2023, (New in OTL 4.0.476 (updated (21))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.6.5 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
                <ul>
                  <li>Visual Studio 2017 version 15.9.55 was released.
                    OTL works with it.<br>
                  </li>
                </ul>
                <br>
                09-Jul-2023, (New in OTL 4.0.476 (updated (20))):<br>
                <br>
                <ul>
                  <li> GNU C++ 10.5 has been released recently. OTL
                    works with it.<br>
                    <br>
                  </li>
                </ul>
                23-Jun-2023, (New in OTL 4.0.476 (updated (19))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.6.4 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                14-Jun-2023, (New in OTL 4.0.476 (updated (18))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.6.3 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.27 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                29-May-2023, (New in OTL 4.0.476 (updated (17))):<br>
                <br>
                <ul>
                  <li> GNU C++ 11.4 has been released recently. OTL
                    works with it.</li>
                </ul>
                <br>
                26-May-2023, (New in OTL 4.0.476 (updated (16))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.6.2 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                22-May-2023, (New in OTL 4.0.476 (updated (15))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.6.1 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                17-May-2023, (New in OTL 4.0.476 (updated (14))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.6.0 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                10-May-2023, (New in OTL 4.0.476 (updated (13))):<br>
                <br>
                <ul>
                  <li> GNU C++ 12.3 has been released recently. OTL
                    works with it.<br>
                    <br>
                  </li>
                </ul>
                04-May-2023, (New in OTL 4.0.476 (updated (12))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.5.5 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                28-Apr-2023, (New in OTL 4.0.476 (updated (11))):<br>
                <br>
                <ul>
                  <li> GNU C++ 13.1 has been released recently. OTL
                    works with it.</li>
                </ul>
                <br>
                15-Apr-2023, (New in OTL 4.0.476 (updated (10))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.5.4 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.26 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
                <ul>
                  <li>Visual Studio 2017 version 15.9.53, and 15.9.54
                    were released. OTL works with them.<br>
                  </li>
                </ul>
                <br>
                23-Mar-2023, (New in OTL 4.0.476 (updated (9))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.5.3 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>CLANG 16.0.0 just got released. OTL works with it
                    when -Wno-unsafe-buffer-usage is used. CLANG 16
                    introduced attribute [[clang::unsafe_buffer_usage]]
                    but it's not fully implemented yet. So for now, use
                    -Wno-unsafe-buffer-usage to disable the warning,
                    especially when -Werror is used (treat warnings as
                    errors).<br>
                    <br>
                  </li>
                </ul>
                14-Mar-2023, (New in OTL 4.0.476 (updated (8))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.5.2 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.25 has been
                    released. OTL works with it.<br>
                  </li>
                </ul>
                <br>
                06-Mar-2023, (New in OTL 4.0.476 (updated (7)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.9.51, and 15.9.52
                    were released. OTL works with them.<br>
                  </li>
                </ul>
                <br>
                02-Mar-2023, (New in OTL 4.0.476 (updated (6))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.5.1 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                24-Feb-2023, (New in OTL 4.0.476 (updated (5))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.5.0 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                14-Feb-2023, (New in OTL 4.0.476 (updated (4))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.4.5 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.24 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
                12-Feb-2023, (New in OTL 4.0.476 (updated (3))):<br>
                <br>
                <ul>
                  <li>CLANG 15.0.7 has been released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
                20-Jan-2023, (New in OTL 4.0.476 (updated (2))):<br>
                <br>
                <ul>
                  <li>Copyrights have been updated for 2023.<br>
                  </li>
                </ul>
                <br>
                10-Jan-2023, (New in OTL 4.0.476 (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.4.4 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.23 has been
                    released. OTL works with it.<br>
                  </li>
                </ul>
                <br>
                05-Jan-2023, (New in OTL 4.0.476):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.4.3 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.22 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
                <ul>
                  <li>CLANG 15.0.6 has been released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>When compiled with G++, OTL doesn't always do
                    "#pragma GCC diagnostic push" correctly. This
                    release of OTL fixes the problem.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">16-Nov-2022. (New in OTL 4.0.475 (updated
                (3))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.4.1 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                09-Nov-2022. (New in OTL 4.0.475 (updated (2))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.4.0 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.21 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                19-Oct-2022. (New in OTL 4.0.475 (updated)):<br>
                <br>
                <ul>
                  <li> CLANG 15.0.3 has been released. OTL works with
                    it.</li>
                </ul>
                <br>
                16-Oct-2022. (New in OTL 4.0.475):<br>
                <br>
                <ul>
                  <li> This release of OTL sets null terminator
                    characters after calls to strncpy() function in
                    macros OTL_STRCPY_S / OTL_STRNCPY_S to cover the
                    case when strncpy() doesn't write any null
                    terminators (output buffer is not big enough). This
                    only applies to non-Visual C++ compilers such as G++
                    or CLANG.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">12-Oct-2022. (New in OTL 4.0.474 (updated
                (2))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.3.6 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.20 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                07-Oct-2022. (New in OTL 4.0.474 (updated)):<br>
                <br>
                <ul>
                  <li> CLANG 15.0.2 has been released. OTL works with
                    it.<br>
                    <br>
                  </li>
                </ul>
                02-Oct-2022. (New in OTL 4.0.474):<br>
                <br>
                <ul>
                  <li>This release of OTL replaces calls to vsprintf to
                    vsnprintf in function otl_sprintf_s. vsnprintf is
                    less prone to buffer overflows. This only applies to
                    non-Visual C++ compilers such as G++ or CLANG.<br>
                  </li>
                </ul>
                <br>
              </td>
            </tr>
            <tr>
              <td valign="top">30-Sep-2022. (New in OTL 4.0.473):<br>
                <br>
                <ul>
                  <li>This release of OTL replaces calls to strcpy() and
                    to strcat() in macros OTL_STRCPY_S / OTL_STRCAT_S
                    with calls to strncpy() and strncat(), which are
                    less prone to buffer overflows / more secure. This
                    only applies to non-Visual C++ compilers such as G++
                    or CLANG.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">28-Sep-2022. (New in OTL 4.0.472 (updated
                (10))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.3.5 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                20-Sep-2022. (New in OTL 4.0.472 (updated (9))):<br>
                <br>
                <ul>
                  <li> CLANG 15.0.1 has been released. OTL works with
                    it.</li>
                </ul>
                <br>
                13-Sep-2022. (New in OTL 4.0.472 (updated (8))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.3.4 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.19 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                07-Sep-2022. (New in OTL 4.0.472 (updated (7))):<br>
                <br>
                <ul>
                  <li> CLANG 15.0.0 has been released. OTL works with
                    it.</li>
                </ul>
                <br>
                01-Sep-2022. (New in OTL 4.0.472 (updated (6))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2017 version 15.9.50 was released
                    on Aug-09-2022. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
                31-Aug-2022. (New in OTL 4.0.472 (updated (5))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.3.3 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                24-Aug-2022. (New in OTL 4.0.472 (updated (4))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.3.2 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                19-Aug-2022. (New in OTL 4.0.472 (updated (3))):<br>
                <br>
                <ul>
                  <li> G++ 12.2 has been released. OTL works with it.|<br>
                    <br>
                  </li>
                </ul>
                18-Aug-2022. (New in OTL 4.0.472 (updated (2))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.3.1 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                09-Aug-2022. (New in OTL 4.0.472 (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.3.0 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.18 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                14-Jul-2022. (New in OTL 4.0.472):<br>
                <br>
                <ul>
                  <li>This release of OTL locally suppresses g++ warning
                    -Wformat-nonliteral in a few places because OTL
                    composes format strings for calls to secure printf
                    dynamically, and the warning, when all g++ warnings
                    are treated as errors, causes the build to break.
                    It's safe to suppress -Wformat-nonliteral warning in
                    this particular context.<br>
                  </li>
                </ul>
                <br>
              </td>
            </tr>
            <tr>
              <td valign="top">13-Jul-2022. (New in OTL 4.0.471 (updated
                (7))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.2.6 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.17 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                28-Jun-2022. (New in OTL 4.0.471 (updated (6))):<br>
                <br>
                <ul>
                  <li> G++ 10.4 has been released. OTL works with it.</li>
                </ul>
                <br>
                26-Jun-2022. (New in OTL 4.0.471 (updated (5))):<br>
                <br>
                <ul>
                  <li> CLANG 14.0.6 has been released. OTL works with
                    it.</li>
                </ul>
                <br>
                23-Jun-2022. (New in OTL 4.0.471 (updated (4))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.2.5 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                15-Jun-2022. (New in OTL 4.0.471 (updated (3))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.2.4 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.16 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2017 version 15.9.49 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                11-Jun-2022. (New in OTL 4.0.471 (updated (2))):<br>
                <br>
                <ul>
                  <li> CLANG 14.0.5 has been released. OTL works with
                    it.</li>
                </ul>
                <br>
                10-Jun-2022. (New in OTL 4.0.471 (updated)):<br>
                <br>
                <ul>
                  <li> CLANG 14.0.4 has been released. OTL works with
                    it.</li>
                </ul>
                <br>
                02-Jun-2022. (New in OTL 4.0.471):<br>
                <br>
                <ul>
                  <li>A bug was reported when FreeTDS was used together
                    with #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_FREETDS_ODBC_WORKAROUNDS">OTL_FREETDS_ODBC_WORKAROUNDS</a>.
                    The bug is fixed in this release of OTL.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">31-May-2022. (New in OTL 4.0.470 (updated
                (15))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.2.3 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                27-May-2022. (New in OTL 4.0.470 (updated (14))):<br>
                <br>
                <ul>
                  <li> GNU C++ 9.5 has been released. OTL works with it.</li>
                </ul>
                <br>
                25-May-2022. (New in OTL 4.0.470 (updated (13))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.2.2 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                18-May-2022. (New in OTL 4.0.470 (updated (12))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.2.1 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.15 has been
                    released. OTL works with it.<br>
                  </li>
                </ul>
                <br>
                11-May-2022. (New in OTL 4.0.470 (updated (11))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.2.0 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.14 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2017 version 15.9.48 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                06-May-2022. (New in OTL 4.0.470 (updated (10))):<br>
                <br>
                <ul>
                  <li> GNU C++ 12.1 has been released. OTL works with
                    it.</li>
                </ul>
                <br>
                27-Apr-2022. (New in OTL 4.0.470 (updated (9))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.1.6 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                21-Apr-2022. (New in OTL 4.0.470 (updated (8))):<br>
                <br>
                <ul>
                  <li> GNU C++ 11.3 has been released. OTL works with
                    it.</li>
                </ul>
                <br>
                20-Apr-2022. (New in OTL 4.0.470 (updated (7))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.1.5 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.13 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2017 version 15.9.47 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                13-Apr-2022. (New in OTL 4.0.470 (updated (6))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.1.4 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.12 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2017 version 15.9.46 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                01-Apr-2022. (New in OTL 4.0.470 (updated (5))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.1.3 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                27-Mar-2022. (New in OTL 4.0.470 (updated (4))):<br>
                <br>
                <ul>
                  <li>CLANG 14.0.0 has been released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
                22-Mar-2022. (New in OTL 4.0.470 (updated (3))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.1.2 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
                10-Mar-2022. (New in OTL 4.0.470 (updated (2))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.1.1 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                09-Mar-2022. (New in OTL 4.0.470 (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.11.11 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2017 version 15.9.45 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">05-Mar-2022, (New in OTL 4.0.470):<br>
                <br>
                <ul>
                  <li> A G++ 11.2 compilation warning was reported. OTL
                    4.0.470 fixes the warning.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">22-Feb-2022, (New in OTL 4.0.469):<br>
                <br>
                <ul>
                  <li>A G++ 11.2 compilation warning was reported. OTL
                    4.0.469 fixes the warning.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">16-Feb-2022. (New in OTL 4.0.468 (updated
                (18))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.1.0 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>CLANG 13.0.1 has been released. OTL works with it.</li>
                </ul>
                <br>
                09-Feb-2022. (New in OTL 4.0.468 (updated (17))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.0.6 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.10 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2017 version 15.9.44 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                <br>
                21-Jan-2022. (New in OTL 4.0.468 (updated (16)):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.0.5 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                12-Jan-2022. (New in OTL 4.0.468 (updated (15))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.11.9 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2017 version 15.9.43 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                05-Jan-2022 (New in OTL 4.0.468 (updated(14))):<br>
                <br>
                <ul>
                  <li>Copyrights have been updated for 2022.<br>
                  </li>
                </ul>
                <br>
                17-Dec-2021. (New in OTL 4.0.468 (updated (13))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.0.4 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                15-Dec-2021. (New in OTL 4.0.468 (updated (12))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.0.3 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.8 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2017 version 15.9.42 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                01-Dec-2021. (New in OTL 4.0.468 (updated (11))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2022 version 17.0.2 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                17-Nov-2021. (New in OTL 4.0.468 (updated (10))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.0.1 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.7 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                13-Nov-2021. (New in OTL 4.0.468 (updated (9))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.9.41 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.6 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
                08-Nov-2021. (New in OTL 4.0.468 (updated (8))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2022 version 17.0.0 has been
                    released. OTL works with it. </li>
                </ul>
                <br>
                13-Oct-2021. (New in OTL 4.0.468 (updated (7))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.9.40 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.5 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
                07-Oct-2021. (New in OTL 4.0.468 (updated (6))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.11.4 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                05-Oct-2021. (New in OTL 4.0.468 (updated (5))):<br>
                <br>
                <ul>
                  <li>CLANG 13.0.0 has been released. OTL works with it.<br>
                  </li>
                </ul>
                <br>
                15-Sep-2021. (New in OTL 4.0.468 (updated (4))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.9.39 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.3 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                26-Aug-2021. (New in OTL 4.0.468 (updated (3))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.11.2 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                17-Aug-2021. (New in OTL 4.0.468 (updated (2))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.11.1 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                11-Aug-2021. (New in OTL 4.0.468 (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.9.38 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.11.0 has been
                    released. OTL works with it.<br>
                  </li>
                </ul>
                <br>
                03-Aug-2021. (New in OTL 4.0.468):<br>
                <br>
                <ul>
                  <li>&nbsp;A bug in internal "read_blob" function was
                    reported when OTL was used with Oracle. The bug is
                    fixed in this release of OTL.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">28-Jul-21. (New in OTL 4.0.467
                (updated)):<br>
                <br>
                <ul>
                  <li> GNU C++ 11.2 has been released. OTL works with
                    it.</li>
                </ul>
                <br>
                27-Jul-2021. (New in OTL 4.0.467):<br>
                <br>
                <ul>
                  <li>A CLANG 12.0.1 warning was reported. The warning
                    is fixed in this release of OTL.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">21-Jul-2021. (New in OTL 4.0.466 (updated
                (2))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.10.4 has been
                    released. OTL 4.0.466 works with it.</li>
                </ul>
                <br>
                14-Jul-2021. (New in OTL 4.0.466 (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.9.37 has been
                    released. OTL 4.0.466 works with it.</li>
                </ul>
                <br>
                10-Jul-2021. (New in OTL 4.0.466):<br>
                <br>
                <ul>
                  <li>A small typo was reported in an OTL tracing
                    statement. The typo is fixed in this release of OTL.<br>
                  </li>
                </ul>
                <br>
                <ul>
                  <li>CLANG 12.0.1 has been released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">30-Jun-2021. (New in OTL 4.0.465
                (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.10.3 has been
                    released. OTL 4.0.465 works with it.<br>
                    <br>
                  </li>
                </ul>
                25-Jun-2021. (New in OTL 4.0.465):<br>
                <br>
                <ul>
                  <li>A problem was reported that sometimes when OTL was
                    used with Oracle, the OTL exception didn't have the
                    right error messages. The problem is fixed in this
                    release of OTL.<br>
                  </li>
                </ul>
                <br>
              </td>
            </tr>
            <tr>
              <td valign="top">16-Jun-2021. (New in OTL 4.0.464):<br>
                <br>
                <ul>
                  <li>A bug was reported in otl_long_string move
                    assignment operator, when C++11/14/17/20 OTL
                    features were enabled, that the buffer size of the
                    source long string was not carried over correctly.
                    The bug is fixed in this release of OTL.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.10.2 has been
                    released. OTL 4.0.464 works with it.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">09-Jun-2021. (New in OTL 4.0.463
                (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.10.1 has been
                    released. OTL works with it. </li>
                </ul>
                <br>
                07-Jun-2021. (New in OTL 4.0.463):<br>
                <br>
                <ul>
                  <li>A couple of warnings was reported from Visual
                    Studio 2019's static code analyzer. The warnings are
                    fixed in this release of OTL.<br>
                  </li>
                </ul>
                <br>
              </td>
            </tr>
            <tr>
              <td valign="top">06-Jun-2021. (New in OTL 4.0.462 (updated
                (14))):<br>
                <br>
                <ul>
                  <li>Oracle Client 21c was released some time ago for
                    non-cloud OSes. OTL works with it when #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA19C">OTL_ORA19C</a>
                    is used.<br>
                  </li>
                </ul>
                <br>
                01-Jun-2021. (New in OTL 4.0.462 (updated (13))):<br>
                <br>
                <ul>
                  <li> GNU C++ 9.4 has been released. OTL works with it.</li>
                </ul>
                <br>
                25-May-2021. (New in OTL 4.0.462 (updated (12))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.10.0 has been
                    released. OTL works with it. </li>
                </ul>
                <br>
                19-May-2021. (New in OTL 4.0.462 (updated (11))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.9.6 has been
                    released. OTL works with it. </li>
                </ul>
                <br>
                15-May-2021. (New in OTL 4.0.462 (updated (10))):<br>
                <br>
                <ul>
                  <li> GNU C++ 8.5 has been released. OTL works with it.</li>
                </ul>
                <br>
                12-May-2021. (New in OTL 4.0.462 (updated (9))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.9.36 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.9.5 has been
                    released. OTL works with it.<br>
                  </li>
                </ul>
                <br>
                27-Apr-2021. (New in OTL 4.0.462 (updated (8))):<br>
                <br>
                <ul>
                  <li> GNU C++ 11.1 has been released. OTL works with
                    it.</li>
                </ul>
                <br>
                18-Apr-2021. (New in OTL 4.0.462 (updated (7))):<br>
                <br>
                <ul>
                  <li>CLANG 12.0.0 has been released. OTL works with it.</li>
                </ul>
                <br>
                14-Apr-2021. (New in OTL 4.0.462 (updated (6))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.9.35 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.9.4 has been
                    released. OTL works with it.<br>
                  </li>
                </ul>
                <br>
                08-Apr-2021. (New in OTL 4.0.462 (updated (5))):<br>
                <br>
                <ul>
                  <li> GNU C++ 10.3 has been released. OTL works with
                    it.<br>
                  </li>
                </ul>
                <br>
                31-Mar-2021. (New in OTL 4.0.462 (updated (4))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2017 version 16.9.3 has been
                    released. OTL works with it.<br>
                  </li>
                </ul>
                <br>
                16-Mar-2021. (New in OTL 4.0.462 (updated (3))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2017 version 16.9.2 has been
                    released. OTL works with it.<br>
                  </li>
                </ul>
                <br>
                11-Mar-2021. (New in OTL 4.0.462 (updated (2))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2017 version 15.9.34 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                10-Mar-2021. (New in OTL 4.0.462 (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.9.1 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                09-Mar-2021. (New in OTL 4.0.462):<br>
                <br>
                <ul>
                  <li>A problem was reported that when otl_connect::<a href="https://otl.sourceforge.net/otl3_connect_class.htm#direct_exec">direct_exec</a>()

                    function is used with SQLite ODBC driver, the
                    function returns 0 when it's supposed to return a
                    positive integer value. This release is introducing
                    the following new #define to fix the problem:
                    #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_LEGACY_RPC">OTL_ODBC_LEGACY_RPC</a>.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">03-&#1052;&#1072;r-2021. (New in OTL 4.0.461 (updated
                (3))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.9.0 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
                28-Feb-2021. (New in OTL 4.0.461 (updated (2))):<br>
                <br>
                <ul>
                  <li>CLANG 11.1.0 has been released. OTL works with it.</li>
                </ul>
                <br>
                25-Feb-2021. (New in OTL 4.0.461 (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.8.6 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                25-Feb-2021. (New in OTL 4.0.461):<br>
                <br>
                <ul>
                  <li>A few Coverity warnings were reported in the OTL
                    header file. The warnings are fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">11-Feb-2021. (New in OTL 4.0.460 (updated
                (2))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2017 version 15.9.33 has been
                    released by speedy Microsoft. OTL works with it.</li>
                </ul>
                <br>
                10-Feb-2021. (New in OTL 4.0.460 (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.9.32 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.8.5 has been
                    released. OTL works with it.<br>
                  </li>
                </ul>
                <br>
                09-Feb-2021. (New in OTL 4.0.460):<br>
                <br>
                <ul>
                  <li>Coverity warnings were reported in the OTL header
                    file. The warnings are fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">15-Jan-2021. (New in OTL 4.0.459 (updated
                (12))):<br>
                <br>
                <ul>
                  <li>CLANG 11.0.1 has been released. OTL works with it.<br>
                  </li>
                </ul>
                <br>
                13-Jan-2021. (New in OTL 4.0.459 (updated (11))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2017 version 15.9.31 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                12-Jan-2021. (New in OTL 4.0.459 (updated (10))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.8.4 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                09-Dec-2020. (New in OTL 4.0.459 (updated (9))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.9.30 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.8.3 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
                20-Nov-2020. (New in OTL 4.0.459 (updated (8))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2019 version 16.8.2 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                13-Nov-2020. (New in OTL 4.0.459 (updated (7))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2019 version 16.8.1 has been
                    released. OTL works with it.<br>
                  </li>
                </ul>
                <br>
                11-Nov-2020. (New in OTL 4.0.459 (updated (6))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.9.29 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.8.0 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
                28-Oct-2020. (New in OTL 4.0.459 (updated (5))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.7.7 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
                14-Oct-2020. (New in OTL 4.0.459 (updated (4))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.9.28 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.7.6 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                13-Oct-2020. (New in OTL 4.0.459 (updated (3))):<br>
                <br>
                <ul>
                  <li>CLANG 11.0.0 has been released. OTL works with it.<br>
                  </li>
                </ul>
                <br>
                29-Sep-2020. (New in OTL 4.0.459 (updated (2))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.7.5 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                21-Sep-2020. (New in OTL 4.0.459 (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.7.4 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                15-Sep-2020. (New in OTL 4.0.459):<br>
                <br>
                <ul>
                  <li>A compile error was reported with Visual Studio
                    2010. This release of OTL fixes the error.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">09-Sep-2020. (New in OTL 4.0.458 (updated
                (3))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2017 version 15.9.27 has been
                    released. OTL works with it. <br>
                    <br>
                  </li>
                </ul>
                08-Sep-2020. (New in OTL 4.0.458 (updated (2))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2019 version 16.7.3 has been
                    released. OTL works with it. </li>
                </ul>
                <br>
                20-Aug-2020. (New in OTL 4.0.458 (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.7.2 has been
                    released. OTL works with it. <br>
                    <br>
                  </li>
                </ul>
                17-Aug-2020. (New in OTL 4.0.458):<br>
                <br>
                <ul>
                  <li>A Coverity "NULL dereference" warning was
                    reported. This release of OTL fixes the warning.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">16-Aug-2020. (New in OTL 4.0.457 (updated
                (6))):<br>
                <br>
                <ul>
                  <li>CLANG 10.0.1 has been released. OTL builds clean
                    with it when -Wno-suggested-descructor-override and
                    -Wno-suggested-override are used.<br>
                  </li>
                </ul>
                <br>
                15-Aug-2020. (New in OTL 4.0.457 (updated (5))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.9.26 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.7.1 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                06-Aug-2020. (New in OTL 4.0.457 (updated (4))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.7.0 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                23-Jul-2020. (New in OTL 4.0.457 (updated (3))):<br>
                <br>
                <ul>
                  <li>GNU C++ 10.2 has been released. OTL works with it.
                    CLANG guys, where are you, slackers? Where is your
                    CLANG 10.0.1?<br>
                  </li>
                </ul>
                <br>
                22-Jul-2020. (New in OTL 4.0.457 (updated (2))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.6.5 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                15-Jul-2020. (New in OTL 4.0.457 (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.9.25 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 version 16.6.4 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                03-Jul-2020. (New in OTL 4.0.457)<br>
                <br>
                <ul>
                  <li>A suggested Oracle specific patch was merged into
                    the mainstream OTL. The patch extends <a href="https://otl.sourceforge.net/otl3_connect_class.htm#session_begin">otl_connect::session_begin</a>()

                    with an extra parameter <i>authp</i> that could be
                    used for Oracle session migrations. The new
                    otl_connect::session_begin() is backward compatible.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">01-Jul-2020. (New in OTL 4.0.456 (updated
                (3))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2019 version 16.6.3 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                11-Jun-2020. (New in OTL 4.0.456 (updated (2))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2017 version 15.9.24 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
                10-Jun-2020. (New in OTL 4.0.456 (updated)):<br>
                <br>
                <ul>
                  <li> Visual Studio 2019 version 16.6.2 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                02-Jun-2020. (New in OTL 4.0.456):<br>
                <br>
                <ul>
                  <li>A problem was reported that otl_stream::flush()
                    function sometimes doesn't flush correctly. It turns
                    out to be a problem with g++ 4.7.x that have a
                    thread unsafe function std::uncaught_exception(),
                    which may return true when an exception is in
                    progress in a thread different from the current
                    thread. otl_stream::flush() calls the function to
                    determine if stack unwinding is in progress, and if
                    it is, flush() clears out otl_stream's dirty buffer
                    in order to avoid a call to std::terminate() for
                    cases when a database error happens in otl_stream's
                    destructor. This release of OTL disables the call to
                    std::uncaught_exception() when #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_DESTRUCTORS_DO_NOT_THROW">OTL_DESTRUCTORS_DO_NOT_THROW</a>
                    is used because it's safe to do so. It is
                    recommended for situations when g++ 4.7.x is still
                    in use in case this kind of problem occurs to
                    convert OTL based C++ code to use #define
                    OTL_DESTRUCTORS_DO_NOT_THROW.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">01-Jun-2020. (New in OTL 4.0.455 (updated
                (7))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2019 version 16.6.1 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                19-May-2020. (New in OTL 4.0.455 (updated (6))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2019 version 16.6.0 has been
                    released. OTL works with it.<br>
                  </li>
                </ul>
                <br>
                13-May-2020. (New in OTL 4.0.455 (updated (5))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.5.5 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2017 version 15.9.23 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                07-May-2020. (New in OTL 4.0.455 (updated (4))):<br>
                <br>
                <ul>
                  <li> G++ 10.1 has been released. OTL works with it.</li>
                </ul>
                <br>
                15-Apr-2020. (New in OTL 4.0.455 (updated (3))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.5.4 as well as
                    Visual Studio 2017 version 15.9.22 have been
                    released. OTL works with them.</li>
                </ul>
                <br>
                07-Apr-2020. (New in OTL 4.0.455 (updated (2))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.5.3 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                01-Apr-2020. (New in OTL 4.0.455 (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.5.2 has been
                    released. OTL works with it.<br>
                  </li>
                </ul>
                <br>
                26-Mar-2020. (New in OTL 4.0.455):<br>
                <br>
                <ul>
                  <li>CLANG 10.0.0 has been released. This version of
                    OTL fixes CLANG's compiler warnings.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">24-Mar-2020. (New in OTL 4.0.454 (updated
                (7))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.5.1 has been
                    released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
                17-Mar-2020. (New in OTL 4.0.454 (updated (6))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.5.0 has been
                    released by super-duper one week agile iteration
                    Microsoft. OTL works fine with it.</li>
                </ul>
                <br>
                12-Mar-2020. (New in OTL 4.0.454 (updated (5))):<br>
                <br>
                <ul>
                  <li> G++ 9.3 has been released. OTL works with it.</li>
                </ul>
                <br>
                11-Mar-2020. (New in OTL 4.0.454 (updated (4))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.9.21 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                10-Mar-2020. (New in OTL 4.0.454 (updated (3))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.4.6 has been
                    released. OTL works with it.</li>
                </ul>
                <br>
                04-Mar-2020. (New in OTL 4.0.454 (updated (2))):<br>
                <br>
                <ul>
                  <li>G++ 8.4 has been released. OTL works with it.<br>
                    <br>
                  </li>
                </ul>
                13-Feb-2020. (New in OTL 4.0.454 (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.9.20 has been
                    released. Visual Studio 2019 version 16.4.5 has been
                    released. OTL keeps working.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">08-Feb-2020. (New in OTL 4.0.454):<br>
                <br>
                <ul>
                  <li>A <a href="https://en.wikipedia.org/wiki/Klocwork">Klocwork</a>
                    warning was reported. This release of OTL fixes the
                    warning.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">31-Jan-2020. (New in OTL 4.0.453
                (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.4.4 has been
                    released. This version of OTL works fine with it.</li>
                </ul>
                <br>
                20-Jan-2020. (New in OTL 4.0.453):<br>
                <br>
                <ul>
                  <li>A problem was reported in the fix contributed for
                    <a href="https://otl.sourceforge.net/otl3_stream_class.htm#OTL_STREAM_OCI_SPATIAL_GEOMETRY">Oracle

                      Call Interface Spatial Geometry</a> in the
                    previous release (OTL 4.0.452). The problem is fixed
                    in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">16-Jan-2020. (New in OTL 4.0.452 (updated
                (3))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.9.19 has been
                    released. This version of OTL works fine with it.</li>
                </ul>
                <br>
                14-Jan-2020. (New in OTL 4.0.452 (updated (2))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.4.3 has been
                    released. This version of OTL works fine with it.<br>
                  </li>
                </ul>
                <br>
                11-Jan-2020. (New in OTL 4.0.452 (updated)):<br>
                <br>
                <ul>
                  <li>CLANG 9.0.1 was released at the end of 2019. I've
                    been asked the question whether or not OTL supports
                    CLANG 9.0.1. The answer is Yes: OTL 4.0.452 compiles
                    clean with CLANG 9.0.1 and the OTL unit test suite
                    runs fine when built with CLANG 9.0.1.<br>
                  </li>
                </ul>
                <br>
                10-Jan-2020. (New in OTL 4.0.452):<br>
                <br>
                <ul>
                  <li>&nbsp;A fix for <a href="https://otl.sourceforge.net/otl3_stream_class.htm#OTL_STREAM_OCI_SPATIAL_GEOMETRY">Oracle

                      Call Interface Spatial Geometry</a> was
                    contributed. The fix is merged and tested with this
                    release of OTL.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">02-Jan-2020. (New in OTL 4.0.451 (updated
                (2))):<br>
                <br>
                <ul>
                  <li>I was asked to add the current version of OTL (OTL
                    4.0.451) to the list of archived older versions of
                    OTL for <a href="https://otl.sourceforge.net/otl3_down.htm">download</a>.<br>
                    <br>
                  </li>
                </ul>
                01-Jan-2020. (New in OTL 4.0.451 (updated)):<br>
                <br>
                <ul>
                  <li>Copyrights (C) in the OTL header file as well as
                    the HTML pages have been updated.<br>
                    <br>
                  </li>
                  <li>&nbsp;A new <a href="https://otl.sourceforge.net/otl4_for_range_loop.htm">section</a>
                    has been added to the <a href="https://otl.sourceforge.net/otl3.htm">table of
                      content</a> in order to document OTL support for <a href="https://en.cppreference.com/w/cpp/language/range-for">C++11 range
                      for loops</a>.<br>
                    <br>
                  </li>
                </ul>
                31-Dec-2019. (New in OTL 4.0.451):<br>
                <br>
                <ul>
                  <li>Access through&nbsp; a NULL pointer (nullptr) was
                    reported to happen sometimes in bool
                    operator!=(const
                    otl_for_range_loop_odbc_stream_adapter...), which is
                    an OTL internal function. The function is used in
                    the&nbsp; OTL implementation for C++11 <a href="https://otl.sourceforge.net/otl3_whatn.htm#OTL40361">for-range</a> loops. The problem
                    is fixed in this release. OTL 4.0.450 is archived
                    and available for <a href="https://otl.sourceforge.net/otl3_down.htm">download</a>
                    along with other older versions of OTL. Happy New
                    Year, everybody!<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">17-Dec-2019. (New in OTL 4.450
                (updated)):<br>
                <br>
                <ul>
                  <li>Microsoft "update diarrhea" of Visual Studio 2019
                    updates is not going to subside anytime in the
                    nearest future, is it? Visual Studio 2019 16.4.2 is
                    out, so OTL works fine with it. <br>
                    <br>
                  </li>
                </ul>
                16-Dec-2019. (New in OTL 4.0.450):<br>
                <br>
                <ul>
                  <li>This release introduces support for <a href="https://en.cppreference.com/w/cpp/container/span">std::span&lt;&gt;</a>
                    (introduced in <a href="https://en.wikipedia.org/wiki/C%2B%2B20">C++20</a>),&nbsp;

                    under the following new #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CPP_20_ON">OTL_CPP_20_ON</a>,
                    and #define&nbsp; <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STREAM_WITH_STD_SPAN_ON">OTL_STREAM_WITH_STD_SPAN_ON</a>.
                    For more detail, see also updated code examples <a href="https://otl.sourceforge.net/otl4_ex770.htm">770</a> (MS SQL), <a href="https://otl.sourceforge.net/otl4_ex771.htm">771</a> (DB2), and <a href="https://otl.sourceforge.net/otl4_ex772.htm">772</a> (Oracle). OTL code
                    examples for other database types can be easily made
                    from the code examples above. At the moment only the
                    latest versions of CLANG support std::span&lt;&gt;.
                    As C++ compilers implement more C++20 features, OTL
                    will add more support for C++20.<br>
                    <br>
                    OTL stream operator <a href="https://otl.sourceforge.net/otl3_stream_class.htm#OTL_STD_VARIANT">&lt;&lt;</a>,
                    that takes std::span&lt;&gt; as parameters, iterates
                    over user defined std::span&lt;&gt;. OTL 4.0.449 is
                    archived and available for <a href="https://otl.sourceforge.net/otl3_down.htm">download</a>
                    along with other older versions of OTL.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">11-Dec-2019. (New in OTL 4.0.449 (updated
                (5))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.9.18 has been
                    released. OTL works fine with it.</li>
                </ul>
                <br>
                10-Dec-2019. (New in OTL 4.0.449 (updated (4))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.4.1 has been
                    released. OTL works fine with it.</li>
                </ul>
                <br>
                03-Dec-2019. (New in OTL 4.0.449 (updated (3))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.4.0 has been
                    released. OTL works fine with it.</li>
                </ul>
                <br>
                21-Nov-2019. (New in OTL 4.0.449 (updated (2))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.3.10 has been
                    released. OTL works fine with it.</li>
                </ul>
                <br>
                16-Nov-2019. (New in OTL 4.0.449 (updated)):<br>
                <br>
                <ul>
                  <li>I was asked to provide secondary links to a few
                    previous versions of OTL. Check the <a href="https://otl.sourceforge.net/otl3_down.htm">Download</a> page for more
                    detail.<br>
                  </li>
                </ul>
                <br>
                15-Nov-2019. (New in OTL 4.0.449):<br>
                <br>
                <ul>
                  <li>GNU C++ 7.5 has been recently released. This
                    version of OTL fixes the GNU C++ 7.5 compilation
                    warnings.<br>
                  </li>
                </ul>
                <br>
              </td>
            </tr>
            <tr>
              <td valign="top">12-Nov-2019. (New in OTL 4.4.448 (updated
                (6))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 version 16.3.9 has been
                    released. OTL works fine with it.</li>
                </ul>
                <br>
                07-Nov-2019. (New in OTL 4.0.448 (updated (5))):<br>
                <br>
                <ul>
                  <li>A question was asked whether OTL compiled when
                    -std=c++2a was used with the latest GNU C++ (9.2)
                    and the latest CLANG C++ (9.0.0). The answer is:Yes,
                    it compiles. Only <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CPP_17_ON">OTL_CPP_17_ON</a>
                    needs to be used.<br>
                  </li>
                </ul>
                <br>
                05-Nov-2019. (New in OTL 4.0.448 (updated (4))):<br>
                <br>
                <ul>
                  <li> Visual Studio 2019 version 16.3.8 has been
                    released. OTL works fine with it.</li>
                </ul>
                <br>
                05-Nov-2019. (New in OTL 4.0.448 (updated (3))):<br>
                <br>
                <ul>
                  <li>MS SQL 2020 just got released. OTL works fine with
                    it. <br>
                    <br>
                  </li>
                </ul>
                29-Oct-2019. (New in OTL 4.0.448 (updated (2))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 update 16.3.7 <span style="font-size:125%;line-height:1em"></span><span style="font-size:125%;line-height:1em"></span><span style="font-size:125%;line-height:1em"></span><span style="font-size:125%;line-height:1em"></span><span style="font-size:125%;line-height:1em"></span><span style="font-size:125%;line-height:1em"></span>has
                    been released. OTL works fine with it.</li>
                </ul>
                <br>
                23-Oct-2019. (New in OTL 4.0.448 (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 update 16.3.6 <span style="font-size:125%;line-height:1em"></span><span style="font-size:125%;line-height:1em"></span><span style="font-size:125%;line-height:1em"></span><span style="font-size:125%;line-height:1em"></span><span style="font-size:125%;line-height:1em"></span><span style="font-size:125%;line-height:1em"></span>has
                    been released. OTL works fine with it.</li>
                </ul>
                <br>
                19-Oct-2019. (New in OTL 4.0.448):<br>
                <br>
                <ul>
                  <li>A few clang-tidy warnings were reported. This
                    release of OTL fixes the warnings.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">16-Oct-2019. (New in OTL 4.0.447 (updated
                (2))):<br>
                <br>
                Microsoft just released Visual Studio 2019 update
                16.3.5, Visual Studio 2017 update 15.9.17. OTL works
                fine with them.<br>
                <br>
                12-Oct-2019. (New in OTL 4.4.447 (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 update 16.3.4 <span style="font-size:125%;line-height:1em"></span><span style="font-size:125%;line-height:1em"></span><span style="font-size:125%;line-height:1em"></span><span style="font-size:125%;line-height:1em"></span><span style="font-size:125%;line-height:1em"></span><span style="font-size:125%;line-height:1em"></span>has
                    been released. OTL works fine with it.</li>
                </ul>
                <span class="smallcaps"><span style="font-variant:
                    small-caps; text-transform: lowercase;"></span></span><br>
                11-Oct-2019. (New in OTL 4.0.447):<br>
                <br>
                <ul>
                  <li>Code cleanup to reduce "noise" from multiple
                    frequent C++ compiler updates.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">09-Oct-2019. (New in OTL 4.4.446
                (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 update 16.3.3 has been
                    released. OTL works fine with it.<br>
                    <br>
                  </li>
                </ul>
                05-Oct-2019. (New in OTL 4.0.446):<br>
                <br>
                <ul>
                  <li>Internal code cleanup to reduce "noise" from
                    multiple frequent C++ compiler updates.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">02-Oct-2019. (New in OTL 4.0.445
                (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 update 16.3.2 (a.k.a. Visual
                    Studio "update diarrhea"<span style="font-size:125%;line-height:1em"></span>)
                    has been released. OTL works fine with it. </li>
                </ul>
                <br>
                28-Sep-2019. (New in OTL 4.0.445):<br>
                <br>
                <ul>
                  <li>A GNU C++ 4.8 compiler warning (0 as NULL pointer,
                    when -Wzero-as-null-pointer-constant is used) was
                    reported. The warning is fixed in this release of
                    OTL.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">25-Sep-2019. (New in OTL 4.0.444
                (updated(2))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 update 16.3.1 has been
                    released. OTL works fine with it. <br>
                    <br>
                  </li>
                </ul>
                24-Sep-2019. (New in OTL 4.0.444 (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 update 16.3.0 has been
                    released. OTL works fine with it.<br>
                    <br>
                  </li>
                </ul>
                23-Sep-2019. (New in OTL 4.0.4444):<br>
                <br>
                <ul>
                  <li>This release of OTL introduces a new customization
                    point: #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STREAM_CUSTOM_CHAR_LTLT_OPERATORS">OTL_STREAM_CUSTOM_CHAR_LTLT_OPERATORS</a>.
                    It can be used to replace OTL default
                    otl_stream&amp; operator&lt;&lt;(const char) and
                    otl_stream&amp; operator&lt;&lt;(const unsigned
                    char) operators.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">20-Sep-2019. (New in OTL 4.0.443 (updated
                (2))):<br>
                <br>
                <ul>
                  <li>CLANG 9.0.0 has been recently released. OTL works
                    fine with it.<br>
                    <br>
                  </li>
                </ul>
                10-Sep-2019. (New in OTL 4.0.443 (updated)):<br>
                <br>
                <ul>
                  <li>Microsoft just released Visual Studio 2019 update
                    16.2.5, Visual Studio 2017 update 15.9.16. OTL works
                    fine with them.<br>
                    <br>
                  </li>
                </ul>
                10-Sep-2019. (New in OTL 4.0.443):<br>
                <br>
                <ul>
                  <li>A "Function sequence error" was reported in a
                    SELECT statement with no WHERE clause, when OTL was
                    used with ODBC and the following #defines were
                    enabled: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_MULTI_MODE">OTL_ODBC_MULTI_MODE</a>,
                    <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_USES_SQL_FETCH_SCROLL_WHEN_SPECIFIED_IN_OTL_CONNECT">OTL_ODBC_USES_SQL_FETCH_</a><wbr><a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_USES_SQL_FETCH_SCROLL_WHEN_SPECIFIED_IN_OTL_CONNECT">SCROLL_WHEN_SPECIFIED_IN_OTL_</a><wbr><a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_USES_SQL_FETCH_SCROLL_WHEN_SPECIFIED_IN_OTL_CONNECT">CONNECT</a><i>.
                    </i>The problem is fixed in this release<i> </i>of
                    OTL.<i><br>
                      <br>
                    </i></li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">06-Sep-2019. (New in OTL 4.0.442 (updated
                (10))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 update 16.2.4 has been
                    released. OTL works fine with it.</li>
                </ul>
                <br>
                20-Aug-2019. (New in OTL 4.0.442 (updated (9))):<br>
                <br>
                <ul>
                  <li>Db2 LUW 11.5 got released in the last couple of
                    months. OTL works fine with it.</li>
                </ul>
                <br>
                20-Aug-2019. (New in OTL 4.0.442 (updated (8))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 update 16.2.3 has been
                    released. OTL works fine with it.<br>
                    <br>
                  </li>
                </ul>
                15-Aug-2019. (New in OTL 4.0.442 (updated (7))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 update 16.2.2 and 2017 update
                    15.9.15 have been released. OTL works just fine.<br>
                  </li>
                </ul>
                <br>
                12-Aug-2019. (New in OTL 4.0.442 (updated (6))):<br>
                <br>
                <ul>
                  <li>GNU C++ 9.2 has been released recently. This
                    version of OTL works with it just fine.<br>
                  </li>
                </ul>
                <br>
                07-Aug-2019. (New in OTL 4.0.442 (updated (5))):<br>
                <br>
                <ul>
                  <li>Microsoft released a servicing update for Visual
                    Studio 2019 (version 16.2.1). This version of OTL
                    works with it just fine. <br>
                    <br>
                  </li>
                </ul>
                06-Aug-2019. (New in OTL 4.0.442 (updated (4))):<br>
                <br>
                <ul>
                  <li>CLANG 8.0.1 has been released lately. This version
                    of OTL builds clean with it, and the usual for the
                    OTL unit test suite.<br>
                    <br>
                  </li>
                </ul>
                25-Jul-2019. (New in OTL 4.0.442 (updated (3))):<br>
                <br>
                <ul>
                  <li>Microsoft released update 2 for Visual Studio 2019
                    (16.2). This version of OTL builds clean with it,
                    and the usual for the OTL unit test suite.<br>
                    <br>
                  </li>
                </ul>
                21-Jul-2019. (New in OTL 4.0.442 (updated (2))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 servicing update (16.1.6) as
                    well as Visual Studio 2017 servicing update
                    (15.9.14) have been released recently. This version
                    of OTL builds clean with them and OTL unit tests run
                    fine.<br>
                    <br>
                  </li>
                </ul>
                3-Jul-2019. (New in OTL 4.0.442 (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 just released a new servicing
                    update (version 16.1.5). This version of OTL
                    compiles clean when built with it and OTL unit tests
                    run fine.<br>
                  </li>
                </ul>
                <br>
                28-Jun-2019. (New in OTL 4.0.442):<br>
                <br>
                <ul>
                  <li>Oracle 19c has recently been released for Windows.
                    This version of OTL compiles clean with the Oracle
                    19c Call Interface header files, and OTL unit tests
                    run fine.<br>
                    <br>
                  </li>
                  <li>A problem was reported that when OTL was used with
                    SQL Server 2017, when a direct execution of an SQL
                    statement that referred to a non-existent table was
                    done, OTL didn't throw any exception. The problem is
                    fixed in the version of OTL.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">26-Jun-2019. (New in OTL 4.0.441 (updated
                (3))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 has been updated recently to
                    version 16.1.4. This version of OTL compiles clean
                    with it, and OTL unit tests run fine when built with
                    it. Enjoy!<br>
                    <br>
                  </li>
                </ul>
                12-Jun-2019. (New in OTL 4.0.441 (updated (2))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 servicing update 16.1.3 and
                    Visual Studio 2017 update 15.9.13 have been released
                    recently. This version of OTL compiles clean with
                    them, and OTL unit tests run fine when built with
                    them. <br>
                    <br>
                  </li>
                </ul>
                06-Jun-2019. (New in OTL 4.0.441 (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 servicing update 16.1.2 has
                    been released recently. This version of OTL compiles
                    clean with it, and OTL unit tests run fine when
                    built with it.</li>
                </ul>
                <br>
                27-May-2019. (New in OTL 4.0.441):<br>
                <br>
                <ul>
                  <li>Oracle 19c on prem was released in April&nbsp;
                    2020 for Linux and Solaris. I was asked when OTL
                    would start supporting Oracle 19c. This version of
                    OTL introduces the following new #define to support
                    Oracle 19c: #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA19C">OTL_ORA19C</a>.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2019 servicing update 16.1.1 has
                    been released recently. This version of OTL compiles
                    clean with it, and OTL unit tests run fine when
                    built with it.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">22-May-2019. (New in OTL 4.0.440 (updated
                (3))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 Update 1 (version 16.1.0) has
                    been released recently. This version of OTL builds
                    clean with it, and OTL unit test run fine when with
                    with it.<br>
                    <br>
                  </li>
                </ul>
                16-May-2019. (New in OTL 4.0.440 (updated (2))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 servicing update 16.0.4 and
                    Visual Studio 2017 servicing update 15.9.12 have
                    been released recently. This version of OTL builds
                    clean with them, and OTL unit tests run fine when
                    built with them.</li>
                </ul>
                <br>
                14-May-2019. (New in OTL 4.0.440 (updated)):<br>
                <br>
                <ul>
                  <li>CLANG 7.1.0 has been released recently. This
                    version of OTL builds clean with it, and OTL unit
                    tests run fine when built with it.<br>
                    <br>
                  </li>
                </ul>
                03-May-2019. (New in OTL 4.0.440):<br>
                <br>
                <ul>
                  <li>Visual Studio 2019 servicing updates 16.0.1,
                    16.0.2, and 16.0.3 got released for the last 30
                    days. This version of OTL builds clean with them,
                    and OTL unit tests run fine when built with them.<br>
                    <br>
                  </li>
                  <li>GNU C++ 9.1 has been released recently. This
                    version of OTL fixes a g++ 9.1 compiler warning.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top"><br>
                03-Apr-2019. (New in OTL 4.0.439 (updated (3))):<br>
                <br>
                <ul>
                  <li>Another servicing update (15.9.11) has been
                    released for Visual Studio 2017. This version of OTL
                    builds clean with it, and OTL unit tests run fine
                    when built with it.<br>
                  </li>
                </ul>
                <br>
                02-Apr-2019. (New in OTL 4.0.439 (updated (2))):<br>
                <br>
                <ul>
                  <li>Visual C++ 2020 has been released. This version of
                    OTL builds clean with it, and OTL unit tests run
                    fine when built with it.<br>
                    <br>
                  </li>
                </ul>
                27-Mar-2019. (New in OTL 4.0.439 (updated)):<br>
                <br>
                <ul>
                  <li>Another servicing update (15.9.10) has been
                    released for Visual Studio 2017. This version of OTL
                    builds clean with it, and OTL unit tests run fine
                    when built with it.<br>
                  </li>
                </ul>
                <br>
                21-Mar-2019, (New in OTL 4.0.439):<br>
                <br>
                <ul>
                  <li>CLANG 8.0.0 has been released. This release of OTL
                    suppresses a new compiler warning about redundant
                    semicolons (-Wextra-semi-stmt).<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">20-Mar-2019, (New in OTL 4.0.438):<br>
                <br>
                <ul>
                  <li>Another servicing update (15.9.9) has been
                    released for Visual Studio 2017. This version of OTL
                    builds clean with it, and OTL unit tests run fine
                    when built with it.<br>
                    <br>
                  </li>
                  <li>A problem was reported when OTL / OCI was used
                    with Oracle Geometry (#define OTL_ORA_SDO_GEOMETRY)
                    that read_geometry() function didn't properly check
                    "elem_info" and "ordinates" for NULL. The problem is
                    fixed in this release of OTL.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">08-Mar-2019, (New in OTL 4.0.437 (updated
                (3))):<br>
                <br>
                <ul>
                  <li>Another servicing update (15.9.8) has been
                    released for Visual Studio 2017. This version of OTL
                    builds clean with it, and OTL unit tests run fine
                    when built with it.<br>
                    <br>
                  </li>
                  <li>A new <a href="https://otl.sourceforge.net/otl3_faq.htm#MYSQL_ODBC_80">entry</a>
                    has been added to the OTL <a href="https://otl.sourceforge.net/otl3_faq.htm">F.A.Q.</a><br>
                  </li>
                </ul>
                <br>
                22-Feb-2019, (New in OTL 4.0.437 (updated (2))):<br>
                <br>
                <ul>
                  <li>G++ 8.3 has been released recently. This version
                    of OTL builds clean with it, and OTL unit tests run
                    fine when built with it.</li>
                </ul>
                <br>
                15-Feb-2019, (New in OTL 4.0.437 (updated)):<br>
                <br>
                <ul>
                  <li>Another servicing update (15.9.7) has been
                    released for Visual Studio 2017. This version of OTL
                    builds clean with it, and OTL unit tests run fine
                    when built with it.</li>
                </ul>
                <br>
                06-Feb-2019, (New in OTL 4.0.437):<br>
                <br>
                <ul>
                  <li>&nbsp;A problem was reported that when OTL was
                    used with ODBC / MS SQL some SQL statements were
                    lost. It turned out to be an MS SQL ODBC flaw (<span lang="DA"><a href="https://support.microsoft.com/en-gb/help/827575/sql-server-does-not-finish-execution-of-a-large-batch-of-sql-statement"><span lang="EN-US">https://support.microsoft.com/en-gb/help/827575/sql-server-does-not-finish-execution-of-a-large-batch-of-sql-statement).

                        </span></a></span>The fix <span lang="DA"><a href="https://support.microsoft.com/en-gb/help/827575/sql-server-does-not-finish-execution-of-a-large-batch-of-sql-statement"><span lang="EN-US"></span></a></span>suggested by
                    Microsoft has been implemented in this release of
                    OTL.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">27-Jan-2019, (New in OTL 4.0.436 updated
                (9))):<br>
                <br>
                <ul>
                  <li>Another servicing update (15.9.6) has been
                    released for Visual Studio 2017. This version of OTL
                    builds clean with it, and OTL unit tests run fine
                    when built with it.<br>
                    <br>
                  </li>
                </ul>
                10-Jan-2019, (New in OTL 4.0.436 updated (8))):<br>
                <br>
                <ul>
                  <li>Another servicing update (15.9.5) has been
                    released for Visual Studio 2017. This version of OTL
                    builds clean with it, and OTL unit tests run fine
                    when built with it. Also, copyright (C) notices in
                    the OTL header file and the HTML files have been
                    updated to 2020.<br>
                  </li>
                </ul>
                <br>
                24-Dec-2018, (New in OTL 4.0.436 updated (7))):<br>
                <br>
                <ul>
                  <li>CLANG 7.0.1 has just been released. This version
                    of OTL builds clean with it, and OTL unit tests run
                    fine when built with it. Happy Holidays everybody!<br>
                    <br>
                  </li>
                </ul>
                12-Dec-2018, (New in OTL 4.0.436 (updated (6))):<br>
                <br>
                <ul>
                  <li>Another servicing update (15.9.4) has been
                    released for Visual Studio 2017. This version of OTL
                    builds clean with it, and OTL unit tests run fine
                    when built with it.<br>
                    <br>
                  </li>
                </ul>
                06-Dec-2018, (New in OTL 4.0.436 (updated (5))):<br>
                <br>
                <ul>
                  <li>G++ 7.4 has been released recently. This version
                    of OTL builds clean with it, and OTL unit tests run
                    fine when built with it.</li>
                </ul>
                <br>
                01-Dec-2018, (New in OTL 4.0.436 (updated (4))):<br>
                <br>
                <ul>
                  <li>Another servicing update (15.9.3) has been
                    released for Visual Studio 2017. This version of OTL
                    builds clean with it, and OTL unit tests run fine
                    when built with it.<br>
                    <br>
                  </li>
                </ul>
                21-Nov-2018, (New in OTL4.0.436 (updated (3))):<br>
                <br>
                <ul>
                  <li>Another servicing update (15.9.2) has been
                    released for Visual Studio 2017. This version of OTL
                    builds clean with it, and OTL unit tests run fine
                    when built with it. <br>
                    <br>
                  </li>
                </ul>
                17-Nov-2018, (New in OTL 4.0.436 (updated(2))):<br>
                <br>
                <ul>
                  <li>Microsoft released Visual Studio 2017 version
                    15.9.1 only a couple of days after VS 15.9.0. I
                    already received a few questions about it. This
                    version of OTL builds clean with it, and OTL unit
                    tests run fine when built with it.<br>
                    <br>
                  </li>
                </ul>
                15-Nov-2018, (New in OTL 4.0.436 (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.9.0 has been
                    released. This version of OTL builds clean with it,
                    and OTL unit tests run fine when built with it.<br>
                    <br>
                  </li>
                </ul>
                14-Nov-2018, (New in OTL 4.0.436):<br>
                <br>
                <ul>
                  <li>This release of OTL introduces the following new
                    customization point for the OTL header file: #define
                    <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_THROW">OTL_THROW</a>.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">09-Nov-2018, (New in OTL 4.0.435):<br>
                <br>
                <ul>
                  <li>This release of OTL introduces a couple of new
                    customization points for more flexible variable type
                    checking as the following new #defines: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CHECK_TYPE_FUNCS">OTL_CHECK_IN_TYPE_FUNC</a>,
                    <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CHECK_TYPE_FUNCS">OTL_CHECK_OUT_TYPE_FUNC</a>.
                    The rationale here is to provide more flexibility
                    for developers, and to keep backward compatibility
                    by default.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2017 version 15.8.9 has been
                    released recently. This version of OTL compiles
                    clean with it, and OTL unit tests run fine when
                    built with it.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">28-Oct-2018, (New in OTL 4.0.434 (updated
                (2))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.8.8 has been
                    released. This version of OTL builds clean with it.
                    OTL unit tests run fine when built with it. <br>
                    <br>
                  </li>
                </ul>
                26-Oct-2018, (New in OTL 4.0.434 (updated)):<br>
                <br>
                <ul>
                  <li>GNU C++ 6.5 has been released recently. This
                    version of OTL builds clean with it, and OTL unit
                    test suite runs fine when built with it.&nbsp; <br>
                    <br>
                  </li>
                </ul>
                24-Oct-2018, (New in OTL 4.0.434):<br>
                <br>
                <ul>
                  <li>This version of OTL introduces the following new
                    #define: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_EXCEPTION_INITIALIZED_WITH_BASE_CLASS_CONSTRUCTOR_CALL">OTL_EXCEPTION_INITIALIZED_WITH_BASE_CLASS_CONSTRUCTOR_CALL</a>.
                    It's a new customization point when OTL exceptions
                    are <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_EXCEPTION_DERIVED_FROM">derived</a>
                    from other exception classes.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">17-Oct-2018, (New in OTL 4.0.433):<br>
                <br>
                <ul>
                  <li>A CLANG 7.0.0 static code analyzer warning was
                    reported against OTL 4.0.432. The warning is fixed
                    in this release of OTL.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">05-Oct-2018, (New in OTL 4.0.432 (updated
                (4))):<br>
                <br>
                <ul>
                  <li>Visual Studio 15.8.6 is out. OTL builds clean with
                    it, and OTL unit test suite checks out when built
                    with it.<br>
                    <br>
                  </li>
                </ul>
                19-Sep-2018, (New in OTL 4.0.432 (updated (3))):<br>
                <br>
                <ul>
                  <li>Now it's CLANG's turn to release. OTL unit test
                    suite runs fine when built with CLANG 7.0.0.<br>
                  </li>
                </ul>
                <br>
                17-Sep-2018, (New in OTL 4.0.432 (updated (2))):<br>
                <br>
                <ul>
                  <li>Microsoft keeps cranking out more updates for
                    Visual Studio 2017, and developers keep asking
                    whether the latest and greatest version of Visual
                    Studio 2017 is supported by OTL. Since there is no
                    way of knowing what breaks next, it always makes
                    sense to ask the same question. The answer to it
                    this time around is Yes. Enjoy while you can!<br>
                    <br>
                  </li>
                </ul>
                08-Sep-2018, (New in OTL 4.0.432 (updated)):<br>
                <br>
                <ul>
                  <li>Oracle 18c on prem was released in the second half
                    of August, 2018. The OTL unit test suite runs fine
                    against an actual Oracle 18c database server when
                    built with Oracle 18c Client header files and object
                    libraries. <br>
                    <br>
                  </li>
                </ul>
                06-Sep-2018, (New in OTL 4.0.432):<br>
                <br>
                <ul>
                  <li>A suggestion was made that since GNU C++ 4.4
                    supported a subset of C++11, OTL should use
                    supported C++11 (by GNU C++ 4.4) features when GNU
                    C++ 4.4 is using -std=c++0x. This OTL release
                    automatically enables support for<a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STREAM_WITH_STD_TUPLE_ON">
                      std::tuples</a> and <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STREAM_WITH_STD_CHAR_ARRAY_ON">std::array&lt;char,n&gt;</a>
                    / <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STREAM_WITH_STD_UNICODE_CHAR_ARRAY_ON">std::array&lt;char16_t,n&gt;</a>,
                    which are supported by GNU C++ 4.4 when it's using
                    -std=c++0x. The rationale for supporting GNU C++ 4.4
                    is that it's the default C++ compiler for RHEL 6.x /
                    CentOS 6.x and it's the legacy C++ compiler for RHEL
                    7.x / CentOS 7.x.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">19-Aug-2018, (New in OTL 4.0.431):<br>
                <br>
                <ul>
                  <li>A compilation error was reported when #define
                    OTL_ANSI_CPP_11_ENUM_IS_SUPPORTED (an undocumented
                    internal #define) was enabled outside if the otlv4.h
                    header file. The problem is fixed in this release. <br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">15-Aug-2018, (New in OTL 4.0.430
                (updated)):<br>
                <br>
                <ul>
                  <li>It's that time again, folks, and its name is
                    Visual Studio 15.8. This version of OTL builds clean
                    with it, and the OTL unit test suite has no problem
                    running. Enjoy!<br>
                  </li>
                </ul>
                <br>
                04-Aug-2018, (New in OTL 4.0.430):<br>
                <br>
                <ul>
                  <li>An <a href="https://en.cppreference.com/w/cpp/memory/new/bad_alloc">std::bad_alloc</a>
                    exception was reported when OTL was used with
                    Microsoft SQL Server under certain conditions. The
                    problem is fixed in this release.<br>
                    <br>
                  </li>
                  <li>Visual Studio 2017 got a new update recently:
                    15.7.6. This version of OTL compiles clean with VS
                    15.7.6 and all OTL unit tests run fine when built
                    with VS 15.7.6.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">26-Jul-2018, (New in 4.0.429 (updated
                (2)):<br>
                <br>
                <ul>
                  <li>GNU C++ 8.2 has been released recently. This
                    version of OTL builds clean with it, and the OTL
                    unit test suite runs fine when built with it.<br>
                    <br>
                  </li>
                </ul>
                22-Jul-2018, (New in OTL 4.0.429 (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 got a new update recently:
                    15.7.5. This version of OTL compiles clean with VS
                    15.7.5 and all OTL unit tests run fine when built
                    with VS 15.7.5.<br>
                    <br>
                  </li>
                </ul>
                13-Jul-2018, (New in OTL 4.0.429):<br>
                <br>
                <ul>
                  <li>This release introduces support for <a href="https://en.cppreference.com/w/cpp/utility/variant">std::variant&lt;&gt;</a>
                    (introduced in C++17),&nbsp; under #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CPP_17_ON">OTL_CPP_17_ON</a>
                    or higher, and when the following new #define is
                    enabled: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STREAM_WITH_STD_VARIANT_ON">OTL_STREAM_WITH_STD_VARIANT_ON</a>.
                    For more detail, see also updated code examples <a href="https://otl.sourceforge.net/otl4_ex770.htm">770</a> (MS SQL), <a href="https://otl.sourceforge.net/otl4_ex771.htm">771</a> (DB2), and <a href="https://otl.sourceforge.net/otl4_ex772.htm">772</a> (Oracle). OTL code
                    examples for other database types can be easily made
                    from the code examples above.<br>
                    <br>
                    OTL stream operators <a href="https://otl.sourceforge.net/otl3_stream_class.htm#OTL_STD_VARIANT">&lt;&gt;</a>
                    that take std::variant&lt;&gt; as parameters, can
                    iterate over user defined std::variant.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">06-Jul-2018, (New in OTL 4.0.428
                (updated)):<br>
                <br>
                <ul>
                  <li>CLANG 6.0.1 has been released recently. This
                    version of OTL builds clean with CLANG 6.0.1 and all
                    OTL unit tests run fine when built with CLANG 6.0.1.<br>
                  </li>
                </ul>
                <br>
                29-Jun-2018, (New in OTL 4.0.428):<br>
                <br>
                <ul>
                  <li>This release of OTL fixes an incorrect comment
                    that confused some people.</li>
                </ul>
                <p><br>
                </p>
              </td>
            </tr>
            <tr>
              <td valign="top">23-Jun-2018, (New in 4.0.427 (updated)):<br>
                <br>
                <ul>
                  <li>Same question different day. Answer is Yes (OTL
                    works with Visual Studio 15.7.4). Enjoy your summer!<br>
                  </li>
                </ul>
                <br>
                09-Jun-2018, (New in OTL 4.0.427):<br>
                <br>
                <ul>
                  <li>A suggestion was made to implement OTL support for
                    Oracle 18c. Oracle 18c Client is already available
                    on prem. Oracle Server 18c is getting released on
                    prem in July 2018. So, now is a good time to
                    introduce OTL support for OCI 18c. This version of
                    OTL is introducing the following new #define: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA18C">OTL_ORA18C</a>.
                    Later on OTL may release more version specific
                    features, stay tuned.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">03-Jun-2018, (New in OTL 4.0.426
                (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.7.3 was released 13
                    days ago, and the same question popped up again
                    whether or not. The answer is: Yes. <br>
                  </li>
                </ul>
                <br>
                31-May-2018, (New in OTL 4.0.426):<br>
                <br>
                <ul>
                  <li>A problem was reported that when old versions
                    Visual Studio 2017 were used (before Update 3), OTL
                    didn't automatically recognize them&nbsp; as C++11
                    compilers. The problem is fixed in this release of
                    OTL.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">23-May-2018, (New in OTL 4.0.425 (updated
                (3)):<br>
                <br>
                <ul>
                  <li>CLANG 5.0.2 has been released recently. This
                    version of OTL builds clean with it, and OTL unit
                    test suite runs fine when built with it. Enjoy!<br>
                    <br>
                  </li>
                </ul>
                18-May-2018, (New in OTL 4.0.425 (updated (2)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 Update 7, sub-Update 1 (version
                    15.7.1) has been released recently, and the usual
                    question was asked whether OTL supported it or not.
                    OTL unit test suite compiles clean with it, and the
                    unit test&nbsp; runs fine when built with it. So,
                    the answer to the question is: Yes.<br>
                  </li>
                </ul>
                <br>
                08-May-2018, (New in OTL 4.0.425 (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 Update 7 (version 15.7) has
                    been released recently. This version of OTL compiles
                    clean with it, and the OTL unit test suite runs fine
                    when built with it.<br>
                  </li>
                </ul>
                <br>
                03-May-2018, (New in OTL 4.0.425):<br>
                <br>
                <ul>
                  <li>GNU C++ 8.1 has been released recently. This
                    version of OTL fixes all g++ 8.1 compilation issues.
                    OTL unit test suite runs fine when built with g++
                    8.1.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">13-Apr-2018, (New in OTL 4.0.424):<br>
                <br>
                <ul>
                  <li>This release of OTL introduces the following new
                    #define: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_MAP_SQL_NUMERIC_TO_OTL_UBIGINT">OTL_MAP_SQL_NUMERIC_TO_OTL_UBIGINT</a>.
                    It instructs OTL to map DB2 CLI/ODBC SQL_NUMERIC
                    data type to SQL_C_UBIGINT when #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UBIGINT">OTL_UBIGINT</a>
                    is defined.<br>
                    <br>
                  </li>
                  <li>A documentation issue was also reported around <a href="https://otl.sourceforge.net/otl4_stream_read_iterator.htm">otl_stream_read_iterator</a>
                    and getter function for <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UBIGINT">OTL_UBIGINT</a>.
                    This release of OTL fixes the documentation issue,
                    it adds the undocumented functions: <br>
                    <br>
                    <ul>
                      <li><a href="https://otl.sourceforge.net/otl4_stream_read_iterator.htm#OTL_UBIGINT_get_1">get</a>(const

                        int pos, <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UBIGINT">OTL_UBIGINT</a>&amp;

                        n);<br>
                      </li>
                      <li><a href="https://otl.sourceforge.net/otl4_stream_read_iterator.htm#OTL_UBIGINT_get_2">get</a>(const

                        char*var_name, <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UBIGINT">OTL_UBIGINT</a>&amp;

                        n);</li>
                    </ul>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">07-Apr-2018, (New in OTL 4.0.423):<br>
                <br>
                <ul>
                  <li>An enhancement to <a href="https://otl.sourceforge.net/otl4_connect_pool.htm">otl_connect_pool</a>
                    class was suggested. The enhancement is that the
                    connect pool should grow to its maximum size in
                    specified increments. This release of OTL adds the
                    following new parameter to the general purpose <a href="https://otl.sourceforge.net/otl4_connect_pool.htm#otl_connect_pool">constructor</a>
                    and <a href="https://otl.sourceforge.net/otl4_connect_pool.htm#open">open</a>()
                    function: grow_pool_in_increments.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">05-Apr-2018, (New in OTL 4.0.422):<br>
                <br>
                <ul>
                  <li>A problem was reported in <a href="https://otl.sourceforge.net/otl4_connect_pool.htm">otl_connect_pool</a>
                    class. The problem is that the pool doesn't properly
                    grow to its maximum capacity. The bug is fixed in
                    this release. Ignore_errors parameter was added to
                    the <a href="https://otl.sourceforge.net/otl4_connect_pool.htm#get">otl_connect_pool::get</a>()

                    function. The function may throw an <a href="https://otl.sourceforge.net/otl3_exception_class.htm">otl_exception</a>.
                    Ignore_errors is initialized to true for backward
                    compatibility.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">28-Mar-2018, (New in OTL 4.0.421
                (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 Update 6, version 15.6.4 has
                    been released as fast as can possibly be, and the
                    question whether OTL supports it or not has already
                    been asked. This version of OTL compiles clean with
                    VC++ 2017 (version 15.6.4) and the OTL unit test
                    suite runs fine when built with VC++ 2017 (version
                    15.6.4).<br>
                    <br>
                  </li>
                </ul>
                24-Mar-2018, (New in OTL 4.0.421):<br>
                <br>
                <ul>
                  <li>This version of OTL enhances its use of C++17 <i>fold

                      expressions</i> and <i>constexpr ifs</i> for C++
                    compilers that have fixed bugs in the support for
                    the features: g++ 7.0 or higher, Visual C++ 2017
                    Update 6 or higher, Clang 6.0.0 or higher. C++17
                    fold expressions and constexpr ifs are more compile
                    time efficient compared with C++11 compile time
                    recursion.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">15-Mar-2018, (New in OTL 4.0.420 (updated
                (5))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 Update 6, Version 15.6 has been
                    recently released. This version of OTL builds clean
                    with Visual Studio 15.6, and the OTL unit test suite
                    runs fine.</li>
                </ul>
                <br>
                08-Mar-2018, (New in OTL 4.0.420 (updated(4))):<br>
                <br>
                <ul>
                  <li>CLANG 6.0.0 has just been released. This version
                    of OTL builds clean with CLANG 6.0.0, and the OTL
                    unit test suite runs fine.<br>
                  </li>
                </ul>
                <br>
                02-Mar-2018, (New in OTL 4.0.420 (updated(3))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017, Version 15.5.7 has been
                    recently released. This version of OTL builds clean
                    with Visual Studio 15.5.7, and the OTL unit test
                    suite runs fine.<br>
                  </li>
                </ul>
                <br>
                25-Jan-2018, (New in OTL 4.0.420 (updated(2))):<br>
                <br>
                <ul>
                  <li>GNU C++ 7.3 has been recently released. This
                    version of OTL builds clean with G++ 7.3, and the
                    OTL unit test suite runs fine when built with G++
                    7.3.<br>
                    <br>
                  </li>
                </ul>
                18-Jan-2018, (New in OTL 4.0.420 (updated)):<br>
                <br>
                <ul>
                  <li>A new <a href="https://otl.sourceforge.net/otl3_faq.htm#SQLITE">Q&amp;A</a>
                    has been added to the OTL F.A.Q. for 64-bit SQLite3.<br>
                  </li>
                </ul>
                <br>
                31-Dec-2017, (New in OTL 4.0.420):<br>
                <br>
                <ul>
                  <li>It's time to update the copyright messages. Happy
                    New Year, everybody!<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">21-Dec-2017, (New in OTL 4.0.419 (updated
                (2))):<br>
                <br>
                <ul>
                  <li>CLANG 5.0.1 has recently been released. This
                    version of OTL builds clean with CLANG 5.0.1, and
                    the OTL unit test suite runs fine.<br>
                  </li>
                </ul>
                <br>
                07-Dec-2017, (New in OTL 4.0.419 (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 update 5 (version 15.5) has
                    been released recently. This version of OTL builds
                    clean with VC++2017/15.5, and the OTL unit test
                    suite runs fine. <br>
                  </li>
                </ul>
                <br>
                25-Nov-2017, (New in OTL 4.0.419):<br>
                <br>
                <ul>
                  <li>A couple more of VC++ 6.0 specific workarounds
                    have been reported in the OTL header file. This
                    release removes redundant code.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">24-Nov-2017, (New in OTL 4.0.418 (updated
                (2))):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 version 15.4.4 is out and a
                    question was asked whether OTL supports it or not.
                    This release of OTL compiles clean and all OTL unit
                    tests run fine when built with VC++2017 version
                    15.4.4. For people&nbsp; in USA, enjoy the holiday!<br>
                    <br>
                  </li>
                </ul>
                23-Nov-2017, (New in OTL 4.0.418 (updated)):<br>
                <br>
                <ul>
                  <li>A question was asked about OTL support for Visual
                    C++ 6.0 (which had been released in 1996). As of OTL
                    4.0.418, OTL doesn't support VC++ 6.0 any more.
                    However those who still need OTL support for
                    VC++6.0, can download OTL 4.0.417 (last OTL release
                    with support for VC++6.0) <a href="https://otl.sourceforge.net/otlv4_40417.zip">here</a>.<br>
                    <br>
                  </li>
                </ul>
                09-Nov-2017, (New in OTL 4.0.418):<br>
                <br>
                <ul>
                  <li>Code refactoring: old workarounds required for
                    VC++ 6.0 and other C++ compilers from 1990s have
                    been removed and the rest of the code has been
                    cleaned up and simplified (fewer instructions to
                    execute, less source code to compile, etc.).<br>
                    <br>
                  </li>
                  <li>A <a href="https://www.synopsys.com/software-integrity/resources/datasheets/coverity.html">Coverity</a>
                    "potential dereferencing of NULL pointer" warning
                    was reported. This release fixes the warning.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">31-Oct-2017, (New in OTL 4.0.417):<br>
                <br>
                <ul>
                  <li> Another piece of dead / unused code was reported
                    in the OTL header file. The code is removed from
                    this release.</li>
                </ul>
                <br>
              </td>
            </tr>
            <tr>
              <td valign="top">26-Oct-2017, (New in OTL4.0.416):<br>
                <br>
                <ul>
                  <li>Another piece of dead / unused code was reported
                    in the OTL header file. The code is removed from
                    this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">24-Oct-2017, (New in OTL 4.0.415):<br>
                <br>
                <ul>
                  <li>A piece of dead / unused code was reported in the
                    OTL header file. The code is removed from this
                    release.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">22-Oct-2017, (New in OTL 4.0.414):<br>
                <br>
                <ul>
                  <li>A problem was reported that when in OTL
                    ODBC/DB2-CLI <a href="https://otl.sourceforge.net/otl3_stream_class.htm#implicit_select">otl_direct_exec_select</a>
                    is used, and otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#rewind">rewind</a>()
                    is called, OTL throws an <a href="https://otl.sourceforge.net/otl3_exception_class.htm">otl_exception</a>
                    with "ODBC function call sequence error". This
                    release introduces the following new OTL defined
                    exception that states more clearly<font size="+1"> </font>what<font size="+1"> </font>the problem is: <a href="https://otl.sourceforge.net/otl3_exc_list.htm#32048">rewind() cannot be
                      called when implicit_select ==
                      otl_direct_exec_select.</a><font size="+1"><br>
                      <br>
                    </font></li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">21-Oct-2017, (New in OTL 4.0.413):<br>
                <br>
                <ul>
                  <li>This release of OTL introduces the following new
                    mode for handling SELECT statements / stored
                    procedures (SPs) returning implicit result sets for
                    ODBC / DB2-CLI: <a href="https://otl.sourceforge.net/otl3_stream_class.htm#implicit_select">otl_direct_exec_select</a>.
                    This special mode is introduced for more efficient
                    processing of "one time" literal (no input
                    variables) SELECT statements / implicit result set
                    SPs via a call to SQLExecDirect() instead of
                    SQLPrepare()+SQLExecute().<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">20-Oct-2017, (New in OTL 4.0.412
                (updated(3))):<br>
                <br>
                <ul>
                  <li><a href="https://www.postgresql.org/about/news/1786/">PostgreSQL</a>
                    10 has been recently released. All OTL unit tests
                    run fine against PostgreSQL 10.<br>
                  </li>
                </ul>
                <br>
                16-Oct-2017, (New in OTL 4.0.412 (updated(2))):<br>
                <br>
                <ul>
                  <li>MS SQL Server 2017 has been recently released. All
                    OTL unit tests run fine against SQL Server 2017.<br>
                    <br>
                  </li>
                </ul>
                14-Oct-2017, (New in OTL 4.0.412 (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2017 Update 4 has been released
                    recently. This version of OTL builds clean and all
                    OTL unit tests run fine when built with VC++2017
                    Update 4.<br>
                    <br>
                  </li>
                </ul>
                07-Oct-2017, (New in OTL 4.0.412):<br>
                <br>
                <ul>
                  <li>A problem was reported in OTL/ODBC when Unicode
                    Character Set was enabled in Visual C++ Studio
                    project's properties. Under that property, the
                    recently introduced function otl_connect::<a href="https://otl.sourceforge.net/otl3_connect_class.htm#rlogon4">rlogon</a>(const

                    char*userid, const char* passwd, const char*
                    dnsname) is stubbed out / has no implementation. An
                    appropriate implementation was added to this release
                    of OTL.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">05-Oct-2017, (New in OTL 4.0.111):<br>
                <br>
                <ul>
                  <li>The following compilation error was reported in
                    OTL/ODBC and Visual C++ 2017:<br>
                    <br>
                    &nbsp; &nbsp;&nbsp; <tt>argument of "unsigned
                      char*" is incompatible with parameter of type
                      "SQLWCHAR*</tt>&nbsp;&nbsp; <br>
                    <br>
                    The error is fixed in this release of OTL.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">30-Sep-2017, (New in OTL 4.0.410):<br>
                <br>
                <ul>
                  <li>This release of OTL introduces a new otl_connect::<a href="https://otl.sourceforge.net/otl3_connect_class.htm#rlogon4">rlogon</a>()
                    function for ODBC/DB2-CLI. The function allows
                    single-byte character (a.k.a. ASCII / European
                    character sets) string userid, password, and DSN to
                    be passed as separate parameters, which allows
                    passwords to have special characters.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">09-Sep-2017, (New in OTL 4.0.409):<br>
                <br>
                <ul>
                  <li>CLANG 5.0.0 has been released recently. This
                    version of OTL fixes all CLANG 5.0.0 related
                    compilation and static code analysis warnings. OTL
                    unit test suite compiles clean with CLANG 5.0.0, and
                    the test suite runs fine when built with CLANG
                    5.0.0.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">19-Aug-2017, (New in OTL 4.0.408):<br>
                <br>
                <ul>
                  <li>A cleaner implementation for otl_stream operators
                    <a href="https://otl.sourceforge.net/otl3_stream_class.htm#OTL_STD_TUPLE">&lt;&gt;</a>
                    () for std::tuple was suggested. This version of OTL
                    implements the operators as suggested.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">16-Aug-2017, (New in OTL 4.0.407):<br>
                <br>
                <ul>
                  <li>GNU C++ 7.2 and Visual Studio 2017 Update 3 have
                    been released recently. This version of OTL fixes
                    all GNU C++ 7.2 as well as VC++2017 Update 3 related
                    compilation issues.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">10-Aug-2017, (New in OTL 4.0.406):<br>
                <br>
                <ul>
                  <li>This release of OTL introduces a new
                    implementation for <a href="https://otl.sourceforge.net/otl4_read_row.htm">otl_read_row

                      / otl_write_row</a> template variadic functions.
                    The new implementation uses C++17 <i>fold
                      expressions</i> and <i>if constexpr</i>
                    statements for compilers that support such features.
                    C++ fold expressions are said to be more readable
                    and more efficient compile time wise compared to
                    C++11 based implementations of template variadic
                    functions. <br>
                    <br>
                  </li>
                  <li>Code refactoring: a couple of <i>class enums</i>
                    have been added in this release for better
                    compliance with C++11/14/17 standards for compilers
                    that support such standards.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">29-Jul-2017, (New in OTL 4.0.405):<br>
                <br>
                <ul>
                  <li>Code refactoring: this release of OTL annotates a
                    few of its functions, including the functions from
                    the OTL public API, with C++11/14/17 standard
                    attributes like [[noreturn]], [[nodiscard]], etc.
                    for versions of C++ compilers that support such
                    attributes (conditionally compiled). Some C++ OTL
                    based custom code may cause compiler warnings, which
                    may have to be fixed depending on the compiler
                    warning level (typically at "warnings as errors" in
                    good software shops), but the intent here is that
                    the code should be cleaner, stricter, etc. Enjoy
                    your hot C++ summer!<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">18-Jul-2017, (New in OTL 4.0.404 (updated
                (4)):<br>
                <br>
                <ul>
                  <li>OTL code examples for <a href="https://otl.sourceforge.net/otl4_sqlite_examples.htm">SQLite / ODBC</a>
                    have been modified to reflect the current state of
                    development. In short, downgrading ODBCVER to ODBC
                    2.5 is no longer required.<br>
                    <br>
                  </li>
                </ul>
                16-Jul-2017, (New in OTL 4.0.404 (updated (3)):<br>
                <br>
                <ul>
                  <li>CLANG 4.0.1 has been released recently. This
                    version of OTL compiles clean with CLANG 4.0.1 and
                    the OTL unit test suite runs fine when built with
                    CLANG 4.0.1.<br>
                    <br>
                  </li>
                </ul>
                04-Jul-2017, (New in OTL 4.0.404 (updated (2)):<br>
                <br>
                <ul>
                  <li>GNU C++&nbsp; 6.4 has been released recently. This
                    version of OTL compiles clean with g++ 6.4, and the
                    OTL unit test suite runs fine when built with g++
                    6.4.<br>
                  </li>
                </ul>
                <br>
                17-Jun-2017, (New in OTL 4.0.404 (updated)):<br>
                <br>
                <ul>
                  <li>Visual C++ Studio 2017 update 2 (version 15.2) has
                    been released recently. This release of OTL compiles
                    clean with it, and the OTL unit test suite runs fine
                    when built with it.<br>
                    <br>
                  </li>
                </ul>
                10-Jun-2017, (New in OTL 4.0.404):<br>
                <br>
                <ul>
                  <li>This release introduces the following new
                    function: <a href="https://otl.sourceforge.net/otl3_stream_class.htm">otl_stream</a>::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#skip_to_next_var">skip_to_next_var</a>().

                    The function skips to the next output variable /
                    select output column in a fetch sequence.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">18-May-2017, (New in OTL 4.0.403):<br>
                <br>
                <ul>
                  <li>A few emails were received with the suggestion to
                    change the fix for the VC++ 2017 static code
                    analyzer warning introduced in OTL 4.0.402. The
                    problem is that the fix introduced redundant checks
                    for nullptr. The warning was a false positive. This
                    release disables the warning locally for the code
                    that causes the false positive and then re-enables
                    the warning. Apologies for the inconvenience. <br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">14-May-2017, (New in OTL 4.0.402):<br>
                <br>
                <ul>
                  <li>A VC++2017 static code analyzer warning was
                    reported. The warning is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">04-May-2017, (New in OTL 4.0.401):<br>
                <br>
                <ul>
                  <li>GNU C++ 7.1 has been released recently. This
                    release of OTL fixes GNU C++ 7.1 specific compiler
                    warnings. OTL compiles clean with GNU C++ 7.1, and
                    OTL unit test suite runs fine when the unit tests
                    are built with GNU C++ 7.1.<br>
                    <br>
                  </li>
                  <li>This release of OTL introduces the following new
                    #defines:<br>
                    <br>
                  <ul>
                    <li><a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_COMPILER_HAS_STD_OPTIONAL">OTL_COMPILER_HAS_STD_OPTIONAL</a>,
                      which can be used to resolve C++ compiler errors
                      when transitioning from experimental/optional to
                      real std::optional.<br>
                      <br>
                    </li>
                    <li><a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_THIRD_PARTY_STRING_VIEW_CLASS">OTL_THIRD_PARTY_STRING_VIEW_CLASS</a>,
                      <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_THIRD_PARTY_UNICODE_STRING_VIEW_CLASS">OTL_THIRD_PARTY_UNICODE_STRING_VIEW_CLASS</a>,
                      which can be used to enable OTL "string view"
                      support for third party string view classes, for
                      example, boost::string_view&lt;&gt;.<br>
                      <br>
                    </li>
                  </ul>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">01-Apr-2017, (New in OTL 4.0.400):<br>
                <ul>
                  <li>
                    <p>A problem was reported that when OTL was used
                      with Oracle 11.2.0.4, <a href="https://otl.sourceforge.net/otl4_subscriber.htm">otl_subscriber</a>
                      class didn't take into account OCI flag <tt>OCI_ATTR_CHDES_ROW_OPFLAGS</tt>
                      correctly. For more detail on the flag, see <a href="https://docs.oracle.com/cd/B28359_01/appdev.111/b28395/oci10new.htm#CHDFCCJE">this</a>
                      link. The problem is fixed in this release. Many
                      thanks to the reporter of the problem who also
                      provided the fix.<br>
                    </p>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">31-Mar-2017, (New in OTL 4.0.399
                (updated)):<br>
                <br>
                <ul>
                  <li>The F.A.Q. has been <a href="https://otl.sourceforge.net/otl3_faq.htm#MSSQL_COLUMNSTORE_INDEXES">updated</a>
                    with a new question / answer about how OTL should be
                    used with SQL Server clustered columnstore based
                    tables.<br>
                    <br>
                  </li>
                </ul>
                30-Mar-2017, (New in OTL 4.0.399):<br>
                <br>
                <ul>
                  <li>This release introduces support for <a href="http://en.cppreference.com/w/cpp/container/array">std::array</a>&lt;char16_t,...&gt;

                    (a.k.a. UTF-16 character arrays) via the following
                    new #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STREAM_WITH_STD_UNICODE_CHAR_ARRAY_ON">OTL_STREAM_WITH_STD_UNICODE_CHAR_ARRAY_ON</a>,
                    and new OTL stream operators <a href="https://otl.sourceforge.net/otl3_stream_class.htm#OTL_STD_UNICODE_CHAR_ARRAY">&lt;&gt;</a>.
                    The advantage of using
                    std::array&lt;char16_t,...&gt; compared with plain
                    char16_t[...] is that the container does not decay
                    to a plain pointer to char16_t, so OTL can check the
                    size of the target container and throw an <a href="https://otl.sourceforge.net/otl3_exc_list.htm#32047">otl_exception</a>.
                    The following code examples have been modified to
                    demo the new feature: <a href="https://otl.sourceforge.net/otl4_ex174.htm">174</a>,
                    <a href="https://otl.sourceforge.net/otl4_ex265.htm">265</a>, <a href="https://otl.sourceforge.net/otl4_ex271.htm">271</a>.<br>
                    <br>
                  </char16_t,...></char16_t,...></li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">25-Mar-2017, (New in OTL 4.0.398):<br>
                <br>
                <ul>
                  <li>This release introduces support for <a href="http://en.cppreference.com/w/cpp/container/array">std::array</a>&lt;char,...&gt;

                    via the following new #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STREAM_WITH_STD_CHAR_ARRAY_ON">OTL_STREAM_WITH_STD_CHAR_ARRAY_ON</a>,
                    and new OTL stream operators <a href="https://otl.sourceforge.net/otl3_stream_class.htm#OTL_STD_CHAR_ARRAY">&lt;&gt;</a>.
                    The advantage of using such containers compared with
                    plain char[...] is that the container does not decay
                    to pointer to char, so OTL can check the size of the
                    target container, and throw an <a href="https://otl.sourceforge.net/otl3_exc_list.htm#32046">otl_exception</a>.
                    These code examples have been modified to demo the
                    new feature: <a href="https://otl.sourceforge.net/otl4_ex770.htm">770</a>, <a href="https://otl.sourceforge.net/otl4_ex771.htm">771</a>, <a href="https://otl.sourceforge.net/otl4_ex772.htm">772</a>.<br>
                    <br>
                  </char,...></li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">19-Mar-2017, (New in OTL 4.0.397):<br>
                <br>
                <ul>
                  <li>Oracle 12c Release 2 (12.2) was released
                    1-Mar-2017. This version of OTL introduces the
                    following new #define that should be used with
                    Oracle 12.2: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA12C_R2">OTL_ORA12C_R2</a>.
                    OTL unit test suite for Oracle builds clean against
                    OCI 12.2 and the unit test suite runs fine against
                    Oracle 12.2.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">15-Mar-2017, (New in OTL 4.0.396
                (updated)):<br>
                <br>
                <ul>
                  <li>CLANG 4.0 has just been released. The OTL unit
                    test suite compiles clean with CLANG 4.0 when this
                    version of OTL is used, and OTL unit tests run fine
                    when built with CLANG 4.0.<br>
                    <br>
                  </li>
                </ul>
                11-Mar-2017, (New in OTL 4.0.396):<br>
                <br>
                <ul>
                  <li>Visual C++ 2017 has been released recently. This
                    version OTL fixes all of the compilation issues that
                    were encountered when building with VC++ 2017, and
                    introduces the following reworked code examples to
                    demonstrate new C++17 features (<a href="http://en.cppreference.com/w/cpp/utility/optional">std::optional</a>&lt;&gt;,

                    <a href="http://en.cppreference.com/w/cpp/string/basic_string_view">std::string_view</a>,
                    and <a href="http://en.cppreference.com/w/cpp/string/basic_string_view">std::basic_string_view</a>&lt;&gt;)

                    that VC++ 2017 supports under /std:c++latest:<br>
                    <br>
                    <ul>
                      <li>Oracle: <a href="https://otl.sourceforge.net/otl3_ex98.htm">98</a>, <a href="https://otl.sourceforge.net/otl4_ex204.htm">204</a>, <a href="https://otl.sourceforge.net/otl3_ex73.htm">73</a>, <a href="https://otl.sourceforge.net/otl4_ex221.htm">221</a>, <a href="https://otl.sourceforge.net/otl4_ex222.htm">222</a>, <a href="https://otl.sourceforge.net/otl4_ex379.htm">379</a>, <a href="https://otl.sourceforge.net/otl4_ex748.htm">748, </a><a href="https://otl.sourceforge.net/otl4_ex353.htm">353</a>, <a href="https://otl.sourceforge.net/otl4_ex366.htm">366</a>, <a href="https://otl.sourceforge.net/otl4_ex751.htm">751</a>. <br>
                        <br>
                      </li>
                      <li>MS SQL: <a href="https://otl.sourceforge.net/otl3_ex99.htm">99</a>, <a href="https://otl.sourceforge.net/otl3_ex74.htm">74</a>, <a href="https://otl.sourceforge.net/otl4_ex223.htm">223</a>, <a href="https://otl.sourceforge.net/otl4_ex381.htm">381</a>, <a href="https://otl.sourceforge.net/otl4_ex750.htm">750, </a><a href="https://otl.sourceforge.net/otl4_ex360.htm">360</a>, <a href="https://otl.sourceforge.net/otl4_ex368.htm">368</a>, <a href="https://otl.sourceforge.net/otl4_ex752.htm">752</a>. <br>
                        <br>
                      </li>
                      <li>DB2: <a href="https://otl.sourceforge.net/otl3_ex100.htm">100,</a> <a href="https://otl.sourceforge.net/otl3_ex94.htm">94</a>, <a href="https://otl.sourceforge.net/otl4_ex224.htm">224</a>, <a href="https://otl.sourceforge.net/otl4_ex380.htm">380</a>, <a href="https://otl.sourceforge.net/otl4_ex749.htm">749, </a><a href="https://otl.sourceforge.net/otl4_ex357.htm">357</a>, <a href="https://otl.sourceforge.net/otl4_ex367.htm">367</a>, <a href="https://otl.sourceforge.net/otl4_ex753.htm">753</a>. <br>
                      </li>
                    </ul>
                    &nbsp; <br>
                    This version of OTL automatically enables #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CPP_17_ON">OTL_CPP_17_ON</a>
                    when being built with VC++ 2017 and /std:c++latest.
                    /permissive- is also supported.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">04-Mar-2017, (New in OTL 4.0.395):<br>
                <br>
                <ul>
                  <li>A problem was reported that when OTL was used with
                    Oracle, <span lang="EN-US">outputting a blob into
                      an <a href="https://otl.sourceforge.net/otl3_long_string.htm">otl_long_string</a>
                      in some cases could give a wrong character in the
                      beginning/end of the output like 0x1, 0x8, 0x16.
                      The problem is fixed in this release.<br>
                      <br>
                    </span></li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">12-Feb-2017, (New in OTL 4.0.394):<br>
                <br>
                <ul>
                  <li>This release introduces support for <a href="http://en.cppreference.com/w/cpp/utility/tuple">std::tuple&lt;&gt;</a>,
                    under #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CPP_14_ON">OTL_CPP_14_ON</a>
                    or higher, and when the following new #define is
                    enabled: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STREAM_WITH_STD_TUPLE_ON">OTL_STREAM_WITH_STD_TUPLE_ON</a>.
                    For more detail, see also new code examples <a href="https://otl.sourceforge.net/otl4_ex770.htm">770</a> (MS SQL), <a href="https://otl.sourceforge.net/otl4_ex771.htm">771</a> (DB2), and <a href="https://otl.sourceforge.net/otl4_ex772.htm">772</a> (Oracle). OTL code
                    examples for other database types can be easily made
                    from the code examples above.<br>
                    <br>
                    OTL stream operators <a href="https://otl.sourceforge.net/otl3_stream_class.htm#OTL_STD_TUPLE">&lt;&gt;</a>
                    that take std::tuple&lt;&gt; as parameters, can
                    iterate over any user defined std::tuples.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">18-Jan-2017, (New in OTL 4.0.393):<br>
                <br>
                <ul>
                  <li>An inconsistency was reported in the new
                    operators&lt;&lt; for <a href="http://en.cppreference.com/w/cpp/string/basic_string_view">std::basic_string_view</a>
                    / <a href="http://en.cppreference.com/w/cpp/experimental/basic_string_view">std::experimental::basic_string_view</a>,
                    <a href="http://en.cppreference.com/w/cpp/string/basic_string_view">std::string_view</a>
                    / <a href="http://en.cppreference.com/w/cpp/experimental/basic_string_view">std::experimental::string_view</a>.
                    The inconsistency is that OTL didn't implement the
                    passing of string views by value. Passing string
                    views by value instead of passing them by reference
                    avoids aliasing and helps the C++ compilers optimize
                    code better. This release fixes the inconsistency:<br>
                    <br>
                    <ul>
                      <li>otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#OTL_STD_UNICODE_STRING_VIEW_CLASS">operator&lt;&lt;</a>(OTL_STD_UNICODE_STRING_VIEW_CLASS)</li>
                      <li>otl_refcur_stream::<a href="https://otl.sourceforge.net/otl4_refcur_stream.htm#OTL_STD_STRING_VIEW_CLASS">operator&lt;&lt;</a>(OTL_STD_UNICODE_STRING_VIEW_CLASS)

                        (Oracle only)</li>
                      <li>otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#OTL_STD_STRING_VIEW_CLASS">operator&lt;&lt;</a>(OTL_STD_STRING_VIEW_CLASS)</li>
                      <li>otl_lob_stream::<a href="https://otl.sourceforge.net/otl3_lob_stream.htm#OTL_STD_STRING_VIEW_CLASS">operator&lt;&lt;</a>(
                        OTL_STD_STRING_VIEW_CLASS)</li>
                      <li>otl_refcur_stream::<a href="https://otl.sourceforge.net/otl4_refcur_stream.htm#OTL_STD_STRING_VIEW_CLASS">operator&lt;&lt;</a>(OTL_STD_STRING_VIEW_CLASS)

                        (Oracle only)<br>
                        <br>
                      </li>
                    </ul>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">14-Jan-2017, (New in OTL 4.0.392):<br>
                <br>
                <ul>
                  <li>A runtime error was reported when OTL was used
                    with MS ACCESS ODBC: Optional feature is not
                    implemented. The problem was that when a
                    &lt;float&gt; bind variable was declared in the SQL
                    statement, OTL mapped SQL_C_FLOAT to SQL_FLOAT,
                    which was not supported by the MS ACCESS ODBC
                    driver. This release introduces the following new
                    #define that maps SQL_C_FLOAT to SQL_REAL, which is
                    supported by the MS ACCESS ODBC driver: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_MAPS_SQL_C_FLOAT_TO_SQL_REAL">OTL_MAPS_SQL_C_FLOAT_TO_SQL_REAL</a>.<br>
                    <br>
                  </float></li>
                  <li>A problem was reported that when OTL was used with
                    Firebird ODBC driver, and when #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_CHAR_SQLWCHAR_CONVERSION_FUNCS">OTL_ODBC_CHAR_SQLWCHAR_CONVERSION_FUNCS</a>
                    was enabled, <a href="https://otl.sourceforge.net/otl3_exception_class.htm">otl_exception</a>
                    sometimes returned garbagy characters in the msg
                    field. The problem is fixed in this release.<br>
                    <br>
                  </li>
                  <li>This release introduces support for <a href="http://en.cppreference.com/w/cpp/string/basic_string_view">std::basic_string_view</a>
                    / <a href="http://en.cppreference.com/w/cpp/experimental/basic_string_view">std::experimental::basic_string_view</a>
                    (C++17) when the template classes are used with
                    UTF-16 characters via the following new #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STD_UNICODE_STRING_VIEW_CLASS">OTL_STD_UNICODE_STRING_VIEW_CLASS</a>.
                    OTL has added these new operators &lt;&lt;(): <br>
                    <br>
                  </li>
                  <ul>
                    <li>otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#OTL_STD_UNICODE_STRING_VIEW_CLASS">operator&lt;&lt;</a>(const

                      OTL_STD_UNICODE_STRING_VIEW_CLASS&amp;)</li>
                    <li>otl_refcur_stream::<a href="https://otl.sourceforge.net/otl4_refcur_stream.htm#OTL_STD_STRING_VIEW_CLASS">operator&lt;&lt;</a>(const

                      OTL_STD_UNICODE_STRING_VIEW_CLASS&amp;) (Oracle
                      only)<br>
                      <br>
                    </li>
                  </ul>
                </ul>
                For more detail, see also the changed OTL code examples:<br>
                <br>
                <ul>
                  <li>Oracle: <a href="https://otl.sourceforge.net/otl4_ex353.htm">353</a>, <a href="https://otl.sourceforge.net/otl4_ex366.htm">366</a>, <a href="https://otl.sourceforge.net/otl4_ex751.htm">751</a>.<br>
                    <br>
                  </li>
                  <li>MS SQL: <a href="https://otl.sourceforge.net/otl4_ex360.htm">360</a>, <a href="https://otl.sourceforge.net/otl4_ex368.htm">368</a>, <a href="https://otl.sourceforge.net/otl4_ex752.htm">752</a>.<br>
                    <br>
                  </li>
                  <li>DB2: <a href="https://otl.sourceforge.net/otl4_ex357.htm">357</a>, <a href="https://otl.sourceforge.net/otl4_ex367.htm">367</a>, <a href="https://otl.sourceforge.net/otl4_ex753.htm">753</a>.<br>
                    <br>
                  </li>
                </ul>
                OTL code examples for other database types can be easily
                modified similarly to the code examples above.<br>
                <br>
              </td>
            </tr>
            <tr>
              <td valign="top">08-Jan-2017, (New in OTL 4.0.391):<br>
                <br>
                <ul>
                  <li> This release introduces support for <a href="http://en.cppreference.com/w/cpp/string/basic_string_view">std::string_view</a>
                    / <a href="http://en.cppreference.com/w/cpp/experimental/basic_string_view">std::experimental::string_view</a>
                    (C++17) via the following new #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STD_STRING_VIEW_CLASS">OTL_STD_STRING_VIEW_CLASS</a>.
                    OTL has added these new operators &lt;&lt;(): <br>
                    <br>
                  </li>
                  <ul>
                    <li>otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#OTL_STD_STRING_VIEW_CLASS">operator&lt;&lt;</a>(const

                      OTL_STD_STRING_VIEW_CLASS&amp;)</li>
                    <li>&nbsp;otl_lob_stream::<a href="https://otl.sourceforge.net/otl3_lob_stream.htm#OTL_STD_STRING_VIEW_CLASS">operator&lt;&lt;</a>(const

                      OTL_STD_STRING_VIEW_CLASS&amp;)</li>
                    <li>otl_refcur_stream::<a href="https://otl.sourceforge.net/otl4_refcur_stream.htm#OTL_STD_STRING_VIEW_CLASS">operator&lt;&lt;</a>(const

                      OTL_STD_STRING_VIEW_CLASS&amp;) (Oracle only)<br>
                      <br>
                    </li>
                  </ul>
                </ul>
                For more detail, see also the changed OTL code examples:<br>
                <br>
                <ul>
                  <li>Oracle: <a href="https://otl.sourceforge.net/otl3_ex73.htm">73</a>, <a href="https://otl.sourceforge.net/otl4_ex221.htm">221</a>, <a href="https://otl.sourceforge.net/otl4_ex222.htm">222</a>, <a href="https://otl.sourceforge.net/otl4_ex379.htm">379</a>, <a href="https://otl.sourceforge.net/otl4_ex748.htm">748.</a><br>
                    <br>
                  </li>
                  <li>MS SQL: <a href="https://otl.sourceforge.net/otl3_ex74.htm">74</a>, <a href="https://otl.sourceforge.net/otl4_ex223.htm">223</a>, <a href="https://otl.sourceforge.net/otl4_ex381.htm">381</a>, <a href="https://otl.sourceforge.net/otl4_ex750.htm">750.</a><br>
                    <br>
                  </li>
                  <li>DB2: <a href="https://otl.sourceforge.net/otl3_ex94.htm">94</a>, <a href="https://otl.sourceforge.net/otl4_ex224.htm">224</a>, <a href="https://otl.sourceforge.net/otl4_ex380.htm">380</a>, <a href="https://otl.sourceforge.net/otl4_ex749.htm">749</a>.<br>
                  </li>
                </ul>
                <p>OTL code examples for other database types can be
                  easily modified similarly to the code examples above.<br>
                  <br>
                </p>
              </td>
            </tr>
            <tr>
              <td valign="top">31-Dec-2016, (New in OTL 4.0.390
                (updated):<br>
                <br>
                <ul>
                  <li>A documentation issue was reported that it was not
                    clear how OTL handled database NULLs in the context
                    of std::optional&lt;t&gt; variables. Additional <a href="https://otl.sourceforge.net/otl3_value.htm#OPTIONAL_NULL">text</a> has
                    been added to the manual for clarification. Happy
                    New Year to everyone!<br>
                    <br>
                  </t></li>
                </ul>
                22-Dec-2016, (New in OTL 4.0.390):<br>
                <br>
                <ul>
                  <li> Code cleanup: a few inconsistencies in the OTL
                    header file were reported. This release fixes the
                    inconsistencies. Besides, G++ 6.3 and CLANG 3.9.1
                    have recently been released. This release of OTL
                    compiles clean with both G++ 6.3 and CLANG 3.9.1,
                    and the OTL unit test suite runs fine when built
                    with G++ 6.3 and CLANG 3.9.1.<br>
                  </li>
                </ul>
                <br>
              </td>
            </tr>
            <tr>
              <td valign="top">20-Dec-2016, (New in OTL 4.0.389):<br>
                <br>
                <ul>
                  <li>
                    <p>This release introduces the ability of OTL to use
                      external overrides for the following #defines: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STR_DEFINES">OTL_STRCAT_S,

                        OTL_STRCPY_S, OTL_STRNCPY_S, </a><a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STR_DEFINES">OTL_SPRINTF_S</a>.
                      The rationale here is that if there is a need to
                      use more secure than compiler provided C string
                      functions, this mechanism can be used.<tt><br>
                      </tt></p>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">17-Dec-2016, (New in OTL 4.0.388):<br>
                <br>
                <ul>
                  <li>This release moves the overloads for operators
                    &gt;&gt; / &lt;&lt; for <a href="http://en.cppreference.com/w/cpp/utility/optional">std::optional</a>&lt;t&gt;

                    from the global namespace into the corresponding
                    implementations of the <a href="https://otl.sourceforge.net/otl3_stream_class.htm#otl_std_optional">otl_stream</a>
                    class in order to eliminate the problem that was
                    reported in the first <a href="https://otl.sourceforge.net/otl3_whatn.htm#std_optional_compile_error">place</a>.<br>
                    <br>
                  </t></li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">16-Dec-2016, (New in OTL 4.0.387):<br>
                <br>
                <ul>
                  <li><a name="std_optional_compile_error"></a>Compilation&nbsp;

                    errors were reported when OTL was used together with
                    <a href="http://www.boost.org/">BOOST</a> and <a href="http://www.cs.wustl.edu/%7Eschmidt/ACE.html">ACE</a>.
                    OTL and BOOST have some conflicting&nbsp; overloads
                    for template operators &lt;&lt; / &gt;&gt;. So, if
                    the OTL header file is included before BOOST, then
                    the OTL operator &lt;&lt; / &gt;&gt; overloads are
                    used, which is incorrect. If BOOST is included
                    before OTL, then the BOOST overloads are used, which
                    is incorrect either. In order to resolve the
                    conflict, this release of OTL introduces the
                    following new #define that is required for enabling
                    OTL <a href="https://otl.sourceforge.net/otl3_value.htm#otl_std_optional">support</a>
                    for std::optional&lt;&gt;: #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STREAM_WITH_STD_OPTIONAL_ON">OTL_STREAM_WITH_STD_OPTIONAL</a>.
                    Also, see code examples see <a href="https://otl.sourceforge.net/otl3_ex98.htm">98</a>,
                    <a href="https://otl.sourceforge.net/otl3_ex99.htm">99</a>, <a href="https://otl.sourceforge.net/otl3_ex100.htm">100,</a> and&nbsp; <a href="https://otl.sourceforge.net/otl4_ex204.htm"> 204.<br>
                      <br>
                    </a></li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">11-Dec-2016, (New in OTL4.0.386):<br>
                <br>
                <ul>
                  <li>A few compilation warnings were reported for CLANG
                    3.8.1. The warnings are fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">28-Nov-2016, (New in OTL 4.0.385):<br>
                <br>
                <ul>
                  <li>Ilya <a href="mailto:batalov.iluxa@gmail.com">Batalov</a>
                    from Russia contributed native support for Oracle
                    Spatial Geometry (Oracle 11.2 and higher) under the
                    following new #define: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA_SDO_GEOMETRY">OTL_ORA_SDO_GEOMETRY</a>.
                    For more detail, see code example <a href="https://otl.sourceforge.net/otl4_ex769.htm">769</a>.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">28-Oct-2016, (New in OTL 4.0.384):<br>
                <br>
                <ul>
                  <li><a name="std_optional"></a>This release introduces
                    support for std::experimental::optional&lt;t&gt; /
                    std::optional&lt;t&gt;. OTL <a href="https://otl.sourceforge.net/otl3_value.htm">works</a> with
                    std::optional&lt;t&gt; the same way it does with <a href="https://otl.sourceforge.net/otl3_value.htm">otl_value</a>&lt;t&gt;: <a href="https://otl.sourceforge.net/otl3_value.htm">otl_compact_value</a>&lt;t,null&gt;.

                    The support for std::optional&lt;t&gt; is enabled
                    under <a href="https://otl.sourceforge.net/otl3_whatn.htm#CPP_AUTOMATIC_DETECTION">auto
                      detection</a> of what C++ standard is used by the
                    C++ compiler, or explicitly enabled by #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CPP_14_ON">OTL_CPP_14_ON</a>
                    or #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CPP_17_ON">OTL_CPP_17_ON</a>.
                    <br>
                    <br>
                    For more detail, see code examples <a href="https://otl.sourceforge.net/otl3_ex98.htm">98</a>, <a href="https://otl.sourceforge.net/otl3_ex99.htm">99</a>,&nbsp; <a href="https://otl.sourceforge.net/otl3_ex100.htm">100</a>, and <a href="https://otl.sourceforge.net/otl4_ex204.htm">204</a>. If you can't find a
                    code example for your database type, it's easy to
                    migrate the std::optional&lt;t&gt; based code from
                    examples for other database types.<br>
                    <br>
                  </t></t></t,null></t></t></t></t></li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">23-Oct-2016, (New in OTL 4.0.383):<br>
                <br>
                <ul>
                  <li>This release introduces the following new template
                    container, similar to <a href="https://otl.sourceforge.net/otl3_value.htm">otl_value</a>&lt;t&gt;:

                    <a href="https://otl.sourceforge.net/otl3_value.htm">otl_compact_value</a>&lt;t,null&gt;.

                    The new container can be used instead of
                    otl_value&lt;t&gt; when T has a <i>magic value</i>
                    that can represent NULL in a given context. For
                    example, T is int and -1 can be used as NULL.
                    otl_compact_value&lt;int,-1&gt; is as compact as int
                    itself, and otl_compact_value is more convenient /
                    more readable to use than plain int. <br>
                    <br>
                    For more detail on otl_compact_value&lt;t,null&gt;,
                    see code examples <a href="https://otl.sourceforge.net/otl3_ex98.htm">98</a>, <a href="https://otl.sourceforge.net/otl3_ex99.htm">99</a>, and <a href="https://otl.sourceforge.net/otl3_ex100.htm">100</a>. If you can't find a
                    code example for your database type, it's easy to
                    migrate the otl_compact_value based code from
                    examples for other database types.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">15-Oct-2016, (New in OTL 4.0.382):<br>
                <br>
                <ul>
                  <li>Inconsistent use of C++ standard constants was
                    reported around the <a href="https://otl.sourceforge.net/otl3_whatn.htm#CPP_AUTOMATIC_DETECTION">automatic
                      detection</a> for /std / -std compiler command
                    line switches. The problem is that the constants
                    which the C++ standard #define __cplusplus is
                    compared to should be long (have letter L at the
                    end), for example: __cplusplus==201103L. The problem
                    is fixed in this release.<br>
                    <br>
                  </li>
                  <li>This release introduces the following new #define
                    to control <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_TRACE">OTL
                      tracing</a>: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_TRACE_LEVEL_NOCHECK_ON_LOGON">OTL_TRACE_LEVEL_NOCHECK_ON_LOGON</a>.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">13-Oct-2016, (New in OTL 4.0.381):<br>
                <br>
                <ul>
                  <li><a name="CPP_AUTOMATIC_DETECTION"></a>This release
                    introduces automatic detection for /std:c++14,&nbsp;
                    /std:c++latest for VC++ 2015 Update 3 and higher,
                    -std switches for g++ and clang. So, there is no
                    need to use explicit #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CPP_11_ON">OTL_CPP_11_ON</a>,&nbsp;

                    #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CPP_14_ON">OTL_CPP_14_ON</a>,
                    and #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CPP_17_ON">OTL_CPP_17_ON</a>,
                    when more or less recent g++, clang, or VC++ is
                    used. Such explicit #defines can still be used. This
                    auto-detection is backward compatible with pre-C++11
                    compilers.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">13-Sep-2016, (New in OTL 4.0.380
                (updated)):<br>
                <br>
                <ul>
                  <li>CLANG 3.9.0 has been recently released. This
                    version of OTL compiles clean with CLANG 3.9.0, and
                    OTL unit test suite runs fine when built with CLANG
                    3.9.0.<br>
                  </li>
                </ul>
                <br>
                05-Sep-2016, (New in OTL 4.0.380):<br>
                <br>
                <ul>
                  <li>The same suggestion as in the previous release of
                    OTL (4.0.379) has been implemented in OTL 4.0.380
                    for Oracle BLOBs/CLOBs: OCIArrayDescriptorAlloc() /
                    OCIArrayDescriptorFree() functions are called for
                    Oracle 11G Release 1 and higher for better
                    performance.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">30-Aug-2016, (New in OTL 4.0.379):<br>
                <br>
                <ul>
                  <li>A problem was reported that when #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA_TIMESTAMP">OTL_ORA_TIMESTAMP</a>
                    is used, performance is not the best it can be. A
                    suggestion was made to use OCIArrayDescriptorAlloc()
                    / OCIArrayDescriptorFree() in order to improve
                    performance. For pre-Oracle 11G (Release 1, old!),
                    OTL still uses OCIDescriptorAlloc() /
                    OCIDescriptorFree() calls. This release implements
                    the suggestion.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">27-Aug-2016, (New in OTL 4.0.378):<br>
                <br>
                <ul>
                  <li>This release introduces the following new
                    parameter for function <a href="https://otl.sourceforge.net/otl4_read_from_stream.htm">otl_read_from_stream</a>():

                    <i>max_number_of_rows_to_read</i>. This parameter
                    allows the caller of the function to put a cap of
                    how many rows get read from the <a href="https://otl.sourceforge.net/otl3_stream_class.htm">OTL stream</a>.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">23-Aug-2016, (New in OTL 4.0.377
                (updated)):<br>
                <br>
                GNU C++ 6.2 has been released recently. This version of
                OTL compiles clean with g++ 6.2 , and OTL test suite
                runs fine when built with g++ 6.2.<br>
                <br>
                21-Aug-2016, (New in OTL 4.0.377):<br>
                <br>
                <ul>
                  <li>This release introduces the following new #define:
                    <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CLANG_THREAD_SAFETY_ON">OTL_CLANG_THREAD_SAFETY_ON</a>.
                    It enables OTL to use the <a href="http://llvm.org/releases/3.8.1/tools/docs/ThreadSafetyAnalysis.html">thread

                      safety</a> feature of CLANG. This new #define is
                    recommended for use with CLANG 3.7 and higher.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">11-Aug-2016, (New in OTL 4.0.376 (updated
                (2)):<br>
                <br>
                <ul>
                  <li>The manual has been <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CPP_17_ON">updated</a>
                    to reflect the latest capabilities of CLANG 3.8 and
                    higher. OTL unit test suite compiles clean when
                    CLANG and -std=c++1z are used, and the unit test
                    suite runs fine when built with CLANG and
                    -std=c++1z.<br>
                    <br>
                  </li>
                </ul>
                04-Aug-2016, (New in OTL 4.0.376 (updated)):<br>
                <br>
                <ul>
                  <li>CLANG 3.8.1 has been released recently. This
                    version of OTL compiles clean with CLAN 3.8.1 and
                    OTL unit test suite runs fine when built with CLANG
                    3.8.1.<br>
                    <br>
                  </li>
                </ul>
                26-Jul-2016, (New in OTL 4.0.376):<br>
                <br>
                <ul>
                  <li>A compilation problem was reported that the
                    following functions were missing:<br>
                    <br>
                    &nbsp;&nbsp;&nbsp; <tt>const unsigned char&amp; <a href="https://otl.sourceforge.net/otl3_long_string.htm">otl_long_string</a>::operator[](int

                      ndx) const;</tt>&nbsp;&nbsp; <br>
                    <pre>  const unsigned short&amp; <a href="https://otl.sourceforge.net/otl3_long_string.htm">otl_long_unicode_string</a>::operator[](int ndx) const;<br></pre>
                  </li>
                </ul>
                <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The
                  problem is fixed in this release.<br>
                  <br>
                </p>
              </td>
            </tr>
            <tr>
              <td valign="top">24-Jul-2016, (New in OTL 4.0.375):<br>
                <br>
                <ul>
                  <li>&nbsp;Inconsistent behavior was reported in the
                    otl_stream's default auto-commit (it's supposed to
                    be on by default) when <a href="https://otl.sourceforge.net/otl3_stream_pooling.htm">OTL Stream Pooling</a>
                    was used, and the otl_stream's <a href="https://otl.sourceforge.net/otl3_stream_class.htm#set_commit">auto-commit</a>
                    was turned off. A newly opened stream that reused an
                    SQL statement from the stream pool had the stream's
                    auto-commit set to off, even though the stream was
                    opened with the default setting for the auto-commit.
                    The problem is fixed in this release of OTL.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">2-Jul-2016, (New in OTL 4.0.374):<br>
                <br>
                <ul>
                  <li>A problem was reported when #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC">OTL_ODBC</a> was
                    used, and when a connect string, that was passed
                    into otl_connect::<a href="https://otl.sourceforge.net/otl3_connect_class.htm#rlogon">rlogon</a>(),
                    contained national characters, OTL converted such
                    characters into wide characters incorrectly. This
                    release of OTL introduces the following #define to
                    fix the problem: <font size="-1"><a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_CHAR_SQLWCHAR_CONVERSION_FUNCS">OTL_ODBC_CHAR_SQLWCHAR_CONVERSION_FUNCS</a></font>.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">30-Jun-2016, (New in OTL 4.0.373):<br>
                <br>
                <ul>
                  <li> <a href="https://blogs.msdn.microsoft.com/visualstudio/2016/06/27/visual-studio-2015-update-3-and-net-core-1-0-available-now/">Visual

                      Studio 2015 Update 3</a> has been released
                    recently. This release of OTL fixes a compile issue
                    when /std:c++latest is used. OTL unit test suite
                    runs fine when built with Visual Studio 2015 Update
                    3 under both /std:c++14 and /std:c++latest.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top"> 15-Jun-2016, (New in OTL 4.0.372
                (updated)):<br>
                <br>
                <ul>
                  <li>DB2 LUW 11.1 has been released today. This release
                    of OTL compiles clean with the DB2 11.1 header
                    files, and OTL unit test suite runs fine against DB2
                    11.1.<br>
                  </li>
                </ul>
                <br>
                11-Jun-2016, (New in OTL 4.0.372): <br>
                <br>
                <ul>
                  <li>In preparation for the upcoming release of Visual
                    Studio 2015 Update 3, OTL header file needed to be
                    rearranged a little bit. Visual Studio 2015 Update 3
                    is going to introduce a new <a href="https://blogs.msdn.microsoft.com/vcblog/2016/06/07/standards-version-switches-in-the-compiler/">/std</a>
                    command line option similar to GNU C++'s -std. From
                    this release of OTL and on, in order to cleanly
                    compile OTL with Visual Studio 2015 (no updates) and
                    higher, the following #defines should be used:
                    #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CPP_11_ON">OTL_CPP_11_ON</a>,
                    or #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CPP_14_ON">OTL_CPP_14_ON</a>
                    (this #define is more preferable).<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">02-Jun-2016, (New in OTL 4.0.371):<br>
                <br>
                <ul>
                  <li>SQL Server 2016 has been released recently. OTL
                    unit test suite for SQL Server runs fine against SQL
                    Server 2016 when the unit test suite is built with
                    OTL 4.0.371. #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_MSSQL_2008">OTL_ODBC_MSSQL_2008</a>
                    should be used with SQL Server 2016.<br>
                  </li>
                </ul>
                <br>
                01-May-2016, (New in OTL 4.0.371):<br>
                <br>
                <ul>
                  <li>GNU C++<a href="https://gcc.gnu.org/ml/gcc/2016-04/msg00244.html">
                      6.1</a> has been released recently. G++ 6.1
                    supports -std=c++17 , which enables C++17 features.
                    This release of OTL introduces the following new
                    #define: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CPP_17_ON">OTL_CPP_17_ON</a>.
                    This #define enables OTL to use <a href="https://en.wikipedia.org/wiki/C%2B%2B17">C++17</a>
                    features (like std::uncaught_exceptions()) to take
                    advantage of the latest available C++ compiler
                    technology, and for better C++ standard compliance.
                    <br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">10-Apr-2016, (New in OTL 4.0.370):<br>
                <br>
                <ul>
                  <li>Compilation warnings were reported when OTL was
                    compiled with CLANG and command line options
                    -Wsign-conversion and -Wunused-private-field. This
                    release of OTL fixes the warnings.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">05-Apr-2016, (New in OTL 4.0.369):<br>
                <br>
                <ul>
                  <li><a href="https://www.visualstudio.com/en-us/news/vs2015-update2-vs.aspx">Visual

                      Studio 2015 Update 2</a> came out a few days ago.
                    There was a problem compiling OTL with Visual Studio
                    2015 Update 2 when the following target platform was
                    used: <span style="font-size:11.0pt;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;color:#1f497d">Clang

                      3.7 with Microsoft CodeGen (v140_clang_3_7),
                      LLVM-vs2014. </span>This release of OTL fixes the
                    problem. OTL compiles clean with Visual Studio 2015
                    Update 2, and the OTL unit test suite runs fine when
                    built with Visual Studio 2015 Update 2.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">13-Mar-2016, (New in OTL 4.0.368
                (updated)):<br>
                <br>
                <ul>
                  <li>Clang <a href="http://lists.llvm.org/pipermail/llvm-announce/2016-March/000067.html">3.8</a>
                    has been released recently. This version of OTL
                    compiles clean with the released clang 3.8, and the
                    OTL unit test suite runs fine when built with the
                    released clang 3.8.<br>
                  </li>
                </ul>
                <br>
                03-Mar-2016, (New in OTL 4.0.368):<br>
                <br>
                <ul>
                  <li>A problem was reported that OTL didn't compile
                    when the following #defines were enabled and when
                    Visual C++ 2015 Update 1 was used:<br>
                    <br>
                    <tt>#define OTL_ODBC_MSSQL_2008</tt><tt><br>
                    </tt><tt>#define OTL_UNICODE</tt><tt><br>
                    </tt><tt>#define OTL_UNICODE_CHAR_TYPE wchar_t</tt><tt><br>
                    </tt><tt>#define OTL_UNICODE_STRING_TYPE
                      std::wstring</tt><tt><br>
                    </tt><tt>#define
                      OTL_EXCEPTION_IS_DERIVED_FROM_STD_EXCEPTION</tt><tt><br>
                    </tt><br>
                    This combination of #defines was not supported, but
                    there was no clear compile time error message about
                    it. This release of OTL adds a new #error statement
                    in order to clarify what needs to be done: <i>#error

                      OTL_UNICODE_EXCEPTION_AND_RLOGON needs to be
                      defined when
                      OTL_EXCEPTION_IS_DERIVED_FROM_STD_EXCEPTION is
                      used with Unicode</i>. <br>
                    <br>
                    In other words, #define
                    OTL_UNICODE_EXCEPTION_AND_RLOGON needs to be added
                    to the list when, say, Unicode is enabled at the
                    project / solution level in Visual C++ Studio:<tt><br>
                      <br>
                    </tt><tt><font color="#ff0000">#define
                        OTL_UNICODE_EXCEPTION_AND_RLOGON</font><br>
                      #define OTL_ODBC_MSSQL_2008</tt><tt><br>
                    </tt><tt>#define OTL_UNICODE</tt><tt><br>
                    </tt><tt>#define OTL_UNICODE_CHAR_TYPE wchar_t</tt><tt><br>
                    </tt><tt>#define OTL_UNICODE_STRING_TYPE
                      std::wstring</tt><tt><br>
                    </tt><tt>#define
                      OTL_EXCEPTION_IS_DERIVED_FROM_STD_EXCEPTION</tt><tt></tt><br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">12-Feb-2016, (New in OTL 4.0.367):<br>
                <br>
                <ul>
                  <li>A problem was reported that when OTL is used with
                    Oracle/OCI and when a connect string contains an
                    empty TNS name (for example "user/password@"),
                    subsequent calls to <a href="https://otl.sourceforge.net/otl3_connect_class.htm#rlogon">otl_connect::rlogon</a>()

                    generate memory leaks. More precisely, the
                    OCIServerAttach() function generates memory leaks.
                    This release of OTL introduces the following new
                    exception to prevent such memory leaks: <a href="https://otl.sourceforge.net/otl3_exc_list.htm#32045">empty TNS in
                      connect string</a> (code 32045).<br>
                    <br>
                  </li>
                  <li>A problem was reported that otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#describe_vars">describe_out_vars</a>()

                    doesn't populate the param_type parameter in <a href="https://otl.sourceforge.net/otl3_stream_class.htm#otl_var_desc">otl_var_desc</a>
                    correctly: it should be 1 for output columns of a
                    SELECT statement, but param_type is set to&nbsp; 0,
                    which indicates input parameters. The problem is
                    fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">31-Jan-2016, (New in OTL 4.0.366):<br>
                <br>
                <ul>
                  <li>A problem was reported that OTL used
                    SQL_C_TIMESTAMP with ODBC 3.x drivers instead of
                    SQL_C_TYPE_TIMESTAMP, which caused a problem for
                    some databases (see&nbsp; <a href="https://msdn.microsoft.com/en-us/library/ms714714%28v=vs.85%29.aspx">Datetime

                      Data Type Changes</a> for more detail). The
                    problem is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">09-Jan-2016, (New in OTL 4.0.365,
                (updated 2)):<br>
                <br>
                <ul>
                  <li>An OTL code example was added to demonstrate <a href="http://www.postgresql.org/about/news/1636/">PostgreSQL

                      9.5</a> new <a href="https://wiki.postgresql.org/wiki/What%27s_new_in_PostgreSQL_9.5#INSERT_..._ON_CONFLICT_DO_NOTHING.2FUPDATE_.28.22UPSERT.22.29">UPSERT</a>
                    feature and relatively new functions <a href="https://otl.sourceforge.net/otl4_read_row.htm">otl_read_row()/otl_write_row()</a>:
                    example <a href="https://otl.sourceforge.net/otl4_ex768.htm">768</a>. The new
                    feature is similar to the standard SQL MERGE
                    command, only it's claimed to be more powerful. The
                    functions take advantage of new[-ish] C++11/14
                    features, and the functions add <a href="https://otl.sourceforge.net/otl3_stream_class.htm#check_end_of_row">end-of-row</a>
                    checks to make OTL programming more strict / safe.<br>
                  </li>
                </ul>
                <br>
                07-Jan-2016, (New in OTL 4.0.365, (updated 1)):<br>
                <br>
                <ul>
                  <li><a href="http://www.postgresql.org/about/news/1636/">PostgreSQL

                      9.5</a> was just released. The PostgreSQL / OTL
                    test suite runs fine against PostgreSQL 9.5.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">23-Dec-2015, (New in OTL 3.0.365):<br>
                <br>
                <ul>
                  <li>A few g++ 4.9.3 compilation warnings were
                    reported. This release of OTL fixes the warnings.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">12-Dec-2015, (New in OTL 4.0.364 (updated
                4)):<br>
                <br>
                <ul>
                  <li>OTL unit test suite builds clean&nbsp; with this
                    release of OTL and runs fine, when built with Visual
                    C++ 2012 Update 5, and Visual C++ 2013 Update 5.
                    Both of Visual C++ updates&nbsp; were released in
                    the summer of this year (2015).<br>
                    <br>
                  </li>
                </ul>
                10-Dec-2015, (New in OTL 4.0.364 (updated 3)):<br>
                <br>
                <ul>
                  <li>GNU C++ <a href="http://gcc.gnu.org/">5.3</a> as
                    well as Visual C++ 2015 <a href="https://www.visualstudio.com/en-us/news/vs2015-update1-vs.aspx">Update

                      1</a> were released recently. This release of OTL
                    compiles clean with both C++ compilers, and all unit
                    tests, when built with G++ 5.3 and VC++ 2015 Update
                    1, run fine.<br>
                    <br>
                  </li>
                </ul>
                26-Nov-2015, (New in OTL 4.0.364 (updated 2)):<br>
                <br>
                <ul>
                  <li>OTL code examples for Sybase have been
                    successfully tested against this release of OTL and
                    Sybase 16.0 SP2.<br>
                    <br>
                  </li>
                  <li>OTL code examples for MySQL have been successfully
                    tested against this release of OTL and MySQL 5.7 /
                    MariaDB 10.1 using MySQL ODBC connector 5.3.4.<br>
                    <br>
                  </li>
                </ul>
                22-Nov-2015, (New in OTL 4.0.364 (updated)):<br>
                <br>
                <ul>
                  <li>Old code <a href="https://otl.sourceforge.net/otl4_firebird_examples.htm">examples</a>
                    for Interbase 6 have been resurrected and
                    successfully tested with <a href="http://firebirdsql.org/">Firebird</a> 2.5
                    against this release of OTL using Firebird's stock
                    ODBC driver.<br>
                    <br>
                  </li>
                </ul>
                <a name="364"></a>10-Oct-2015, (New in OTL 4.0.364):<br>
                <br>
                <ul>
                  <li>A problem was reported that OTL didn't print (to
                    ostream, or when OTL <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_TRACE">Tracing</a> was
                    enabled) the fractional part of the second of <a href="https://otl.sourceforge.net/otl3_stream_class.htm#otl_datetime">otl_datetime</a>
                    correctly. For example, the fractional precision is
                    set to 6 and the actual value is 1234. OTL prints
                    the value as .1234. A more correct version of the
                    value should be .001234, meaning it should have 2
                    leading 0s. The problem is fixed in this release.
                    The old format (without leading zeros) for backward
                    compatibility can be enabled via #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_LEGACY_TRACE_DATETIME_FORMAT_ON">OTL_LEGACY_TRACE_DATETIME_FORMAT_ON</a>.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">24-Sep-2015, (New in OTL 4.0.363):<br>
                <br>
                <ul>
                  <li>A few compilation errors were reported when
                    #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_UNIX">OTL_ODBC_UNIX</a>
                    and #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_INFORMIX_CLI">OTL_INFORMIX_CLI</a>
                    (Informix only) were used together in the 64-bit
                    mode. This release introduces #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_INFORMIX_CLI">OTL_INFORMIX_CLI_64_BIT</a>
                    in order to fix the problem.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">19-Sep-2015, (New in OTL 4.0.362):<br>
                <br>
                <ul>
                  <li>A problem was reported in <a href="https://otl.sourceforge.net/otl4_subscriber.htm">otl_subscriber</a>
                    class (Oracle only). The problem is that an optional
                    parameter (IP address) doesn't work unless it's
                    explicitly specified at least for Oracle 11.2.0.4
                    (see the <a href="https://otl.sourceforge.net/otl4_subscriber.htm#SUBSCRIBE">subscribe</a>
                    function for more detail). The reporter of the bug
                    filed a TAR with Oracle.<br>
                    <br>
                  </li>
                </ul>
                12-Sep-2015, (New in OTL 4.0.362):<br>
                <br>
                <ul>
                  <li>A few redundant pointer comparisons were pointed
                    out in <a href="https://otl.sourceforge.net/otl3_whatn.htm#OTL40361">OTL 4.0.361</a>. The
                    redundancies have been fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">05-Sep-2015, (New in OTL 4.0.361
                (updated)):<br>
                <br>
                <ul>
                  <li>This release of OTL compiles clean with clang 3.8
                    (latest), and unit test suite runs fine when built
                    with clang 3.8.<br>
                  </li>
                </ul>
                <br>
                <a name="OTL40361"></a>03-Sep-2015, (New in OTL
                4.0.361):<br>
                <br>
                <ul>
                  <li>This release introduces support for C++11
                    for-range-loops:<br>
                    <br>
                  </li>
                  <ul>
                    <li><a href="https://otl.sourceforge.net/otl3_stream_class.htm">otl_stream</a>
                      based loops can be rewritten like this:<br>
                      <br>
                      <tt>while(!my_stream.eof()){...} ==&gt;
                        for(auto&amp; it : </tt><tt>my_stream){...}</tt><br>
                      <br>
                    </li>
                    <li><a href="https://otl.sourceforge.net/otl4_stream_read_iterator.htm">otl_stream_read_iterator</a>
                      based loops can be rewritten like this:<br>
                      <br>
                      <tt>while(my_stream_iter.next_row()){...} ==&gt;</tt><tt>
                        for(auto&amp; it: my_stream_iter){...}</tt><br>
                    </li>
                  </ul>
                </ul>
                <p>For more detail, see the following code examples:<br>
                </p>
                <ul>
                  <li>Oracle (<a href="https://otl.sourceforge.net/otl3_ex10.htm">10</a>, <a href="https://otl.sourceforge.net/otl4_ex260.htm">260</a>, <a href="https://otl.sourceforge.net/otl4_ex261.htm">261</a>) <br>
                  </li>
                  <li>MS SQL (<a href="https://otl.sourceforge.net/otl3_ex67.htm">67</a>, <a href="https://otl.sourceforge.net/otl4_ex262.htm">262</a>, <a href="https://otl.sourceforge.net/otl4_ex263.htm">263</a>)<br>
                  </li>
                  <li>DB2 (<a href="https://otl.sourceforge.net/otl3_ex89.htm">89</a>, <a href="https://otl.sourceforge.net/otl4_ex264.htm">264</a>)<br>
                  </li>
                  <li>PostgreSQL (<a href="https://otl.sourceforge.net/otl4_ex140.htm">140</a>, <a href="https://otl.sourceforge.net/otl4_ex342.htm">342</a>)<br>
                  </li>
                  <li>MySQL (<a href="https://otl.sourceforge.net/otl3_ex80.htm">80</a>, <a href="https://otl.sourceforge.net/otl3_ex225.htm">225</a>, <a href="https://otl.sourceforge.net/otl4_ex344.htm">344</a>)<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">23-Jul-2015, (New in OTL 4.0.360):<br>
                <br>
                <ul>
                  <li>Visual C++ Studio 2015 as well as GNU C++ 5.2 have
                    been released in the last few days. This release of
                    OTL fixes a number of compilation issues: all OTL
                    unit tests compile clean and run fine when built
                    with VC++ 2015 and G++ 5.2.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">15-Jun-2015, (New in OTL 4.0.359):<br>
                <br>
                <ul>
                  <li>A few CLANG 3.6 (and higher) warnings generated by
                    -Wreserved-id-macro were reported. The warnings are
                    fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">14-Jun-2014, (New in OTL 4.0.358):<br>
                <br>
                <ul>
                  <li>This release introduces the following new #define:
                    <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CPP_14_ON">OTL_CPP_14_ON</a>.
                    This #define enables OTL to use <a href="https://en.wikipedia.org/wiki/C%2B%2B14">C++14</a>
                    features to take advantage of the latest of the
                    available C++ compiler technology.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">08-Jun-2015, (New in OTL 4.0.357):<br>
                <br>
                <ul>
                  <li>A few compiler warnings were reported when OTL was
                    compiled with CLANG 3.6. The compiler warnings have
                    been fixed in this release.<br>
                    <br>
                  </li>
                  <li>A question was also asked whether OTL supported
                    -std=c++14 for CLANG. This release compiles clean
                    with CLANG (at least CLANG 3.6 and higher) under
                    -std=c++14. The OTL unit test suite runs fine when
                    built with CLANG under -std=c++14.<br>
                  </li>
                </ul>
                <p><br>
                </p>
              </td>
            </tr>
            <tr>
              <td valign="top">
                <p>04-Jun-2015, (New in OTL 4.0.356 (updated)):<br>
                </p>
                <ul>
                  <li>A question was asked whether OTL compiles with the
                    latest GNU C++ (5.1) when -std=c++14 is used. This
                    release builds clean and the OTL unit test suite
                    runs correctly when built with GNU C++ 5.1 with
                    -std=c++14<br>
                  </li>
                </ul>
                <br>
                30-May-2015, (New in OTL 4.0.356):<br>
                <br>
                <ul>
                  <li>A few <a href="http://cppcheck.sourceforge.net/">cppcheck</a>
                    ("Exception thrown in function declared not to throw
                    exceptions") warnings were reported against OTL
                    4.0.355. The warnings are fixed in this release.</li>
                </ul>
                <br>
                <br>
              </td>
            </tr>
            <tr>
              <td valign="top">25-May-2015, (New in OTL 4.0.355):<br>
                <br>
                <ul>
                  <li>GNU C++ 4.8 compiler warnings (XXX shadows member
                    of this) were reported in <a href="https://otl.sourceforge.net/otl4_connect_pool.htm">otl_connect_pool</a>
                    class when -std=c++11 was used: the warnings are
                    fixed in this release.<br>
                    <br>
                  </li>
                  <li>This release adds the following new function to <a href="https://otl.sourceforge.net/otl4_connect_pool.htm">otl_connect_pool</a>:
                    <a href="https://otl.sourceforge.net/otl4_connect_pool.htm#get_mutex">get_mutex</a>().<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">23-May-2015, (New in OTL 4.0.354):<br>
                <br>
                <ul>
                  <li>The following new function was added to <a href="https://otl.sourceforge.net/otl4_connect_pool.htm">otl_connect_pool</a>:
                    <a href="https://otl.sourceforge.net/otl4_connect_pool.htm#change_max_pool_size">change_max_pool_size</a>().<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">14-May-2015, (New in OTL 4.0.353):<br>
                <br>
                <ul>
                  <li>Code cleanup: no change to any public interfaces.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">06-May-2015, (New in OTL 4.0.352):<br>
                <br>
                <ul>
                  <li>A problem was reported with #define
                    OTL_VERSION_NUMBER, which sets the OTL version
                    number in hexadecimal. The problem is that the
                    hexadecimal number was ahead of the official decimal
                    number of the OTL version. The problem is fixed in
                    this release. Because the hexadecimal number can't
                    go down without breaking some code that checks the
                    version number, the official decimal version number
                    had to be bumped up to 4.0.352.<br>
                    <br>
                  </li>
                  <li>A problem was reported that otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#clean">clean</a>()
                    didn't reset otl_stream's internal pointers
                    correctly, and&nbsp; otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#check_end_of_row">check_end_of_row</a>()

                    / <a href="https://otl.sourceforge.net/otl3_stream_class.htm#ENDR">endr </a>threw

                    the <a href="https://otl.sourceforge.net/otl3_exc_list.htm#32035">END-OF-ROW
                      check failed</a>&nbsp; otl_exception after the
                    call to otl_stream::clean(). The problem is fixed in
                    this release.<span style="font-family: monospace;"><br>
                      <br>
                    </span></li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">02-May-2015, (New in OTL4.335):<br>
                <br>
                <ul>
                  <li>This release introduces the following new feature:
                    <a href="https://otl.sourceforge.net/otl4_connect_pool.htm">otl_connect_pool</a>.
                    See also #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CONNECT_POOL_ON">OTL_CONNECT_POOL_ON</a>,
                    code examples <a href="https://otl.sourceforge.net/otl4_ex763.htm">763</a>
                    (Oracle),&nbsp; <a href="https://otl.sourceforge.net/otl4_ex764.htm">764</a>
                    (DB2), <a href="https://otl.sourceforge.net/otl4_ex765.htm">765</a> (MS SQL), <a href="https://otl.sourceforge.net/otl4_ex766.htm">766</a> (MySQL), and <a href="https://otl.sourceforge.net/otl4_ex767.htm">767</a> (PostgreSQL).<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">23-Apr-2015, (New in OTL 4.0.334
                (updated)):<br>
                <br>
                <ul>
                  <li><a href="http://gcc.gnu.org/">GNU C++</a> 5.1 has
                    just been released. This release of OTL builds clean
                    with G++ 5.1, and the OTL unit test suite runs fine
                    when built with G++ 5.1.<br>
                    <br>
                  </li>
                </ul>
                02-Mar-2015, (New in OTL 4.0.334):<br>
                <br>
                <ul>
                  <li>A problem was reported that OTL didn't compile
                    with DB2 Client 8.0 header files (old client from
                    early 2000s) under Visual C++ 2010. The problem is
                    fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">05-Feb-2015, (New in OTL 4.0.333):<br>
                <br>
                <ul>
                  <li>A compilation error was reported ('void' function
                    returning a value) when otlv4.h was compiled with
                    Visual C++ 6.0. The error is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">29-Jan-2015, (New in OTL 4.0.332):<br>
                <br>
                <ul>
                  <li>This release discontinues support for Oracle Call
                    Interface 7 (OCI7, #define OTL_ORA7. Oracle
                    discontinued it over a decade ago, but the diehards
                    were using it until 2012-2013): any OCI7 related
                    code has been removed from the OTL header file
                    (otlv4.h).<br>
                  </li>
                </ul>
                <br>
              </td>
            </tr>
            <tr>
              <td valign="top">24-Jan-2015, (New in OTL 4.0.331
                (updated)):<br>
                <br>
                <ul>
                  <li>PostgreSQL 9.4 was released a month ago, and a
                    question was asked whether OTL suppored it or not.
                    The OTL unit test suite runs clean (no errors)
                    against PostgreSQL 9.4.<br>
                    <br>
                  </li>
                </ul>
                04-Jan-2015, (New in OTL 4.0.331):<br>
                <br>
                <ul>
                  <li>Copyright notice has been updated for 2015.<br>
                    <br>
                  </li>
                  <li>The OTL header file (otlv4.h) has been reformatted
                    with "clang-format" using the LLVM formatting style:
                    <br>
                    <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <tt>clang-format

                      -style=llvm -i otlv4.h</tt><br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">25-Dec-2014, (New in OTL 4.0.330):<br>
                <br>
                <ul>
                  <li>A a typo was reported in a #define, which results
                    in a failed compile time check. The typo is fixed in
                    this release.<br>
                    <br>
                  </li>
                  <li>Code cleanup: integration of all available
                    sanitizers for CLANG and G++ (-fsanitize=thread,
                    -fsanitize=address, -fsanitize=undefined,
                    -fsanitize=leak, -fsanitize=memory (CLANG only as of
                    G++ 4.9.2, presumably it will be available for G++
                    at a later date)) into the OTL build / automated
                    unit test process is complete.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">13-Dec-2014 (New in OTL 4.0.329):<br>
                <br>
                <ul>
                  <li>Code cleanup:&nbsp; <br>
                    <br>
                  </li>
                  <ul>
                    <li>(round 3, a.k.a. OTL tries to play nice with
                      CLANG): this release started to use CLANG's
                      --analyze option to build the OTL unit test suite
                      for Linux. This release fixes a few CLANG Analyzer
                      warnings.<br>
                      <br>
                    </li>
                    <li>This release started to use -fsanitize=address
                      for GNU C++ 4.8 (and higher), and for CLANG 3.4
                      (and higher) to build the OTL unit test suite for
                      Linux.<br>
                      <br>
                    </li>
                  </ul>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">07-Dec-2014 (New in OTL 4.0.328):<br>
                <br>
                <ul>
                  <li>Code cleanup: a few explicit type casts have been
                    added to fix CLANG++'s -Wno-sign-conversion
                    warnings.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">29-Nov-2014 (New in OTL 4.0.327):<br>
                <br>
                <ul>
                  <li>Code cleanup:<br>
                    <br>
                  </li>
                  <ul>
                    <li>&nbsp;a couple of internal enums have been
                      converted to scoped class enums for C++11
                      compilers (Visual C++, GNU C++, CLANG++) in order
                      to reduce the global namespace pollution; <br>
                      <br>
                    </li>
                    <li>a few explicit type casts have been added to fix
                      CLANG++ warnings; <br>
                      <br>
                    </li>
                    <li>a couple of copy constructors have been declared
                      "= default" (when it's safe to make a bit-wise
                      copy) for C++11 compilers.<br>
                      <br>
                      <br>
                    </li>
                  </ul>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">22-Nov-2014 (New in OTL 4.0.326
                (updated)):<br>
                <br>
                <ul>
                  <li>The following new code examples have been added to
                    show how OTL works with JSON (a.k.a. new XML):
                    example <a href="https://otl.sourceforge.net/otl4_ex760.htm">760</a> (Oracle
                    12.1.0.2 and higher), example <a href="https://otl.sourceforge.net/otl4_ex761.htm">761</a> (Oracle 12.1.0.2 and
                    higher), example <a href="https://otl.sourceforge.net/otl4_ex762.htm">762</a>
                    (PostgreSQL 9.3 and higher).<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">16-Nov-2014, (New in OTL 4.0.326):<br>
                <br>
                <ul>
                  <li>A few GNU C++ 4.8.2 and GNU C++ 4.9.2 warnings
                    were reported for Linux. The warnings are fixed in
                    this release.<br>
                    <br>
                  </li>
                  <li><a href="https://otl.sourceforge.net/otl3_faq.htm#SQL_SERVER_LINUX">Q&amp;A</a>
                    for Linux and Microsoft SQL Server is updated to say
                    that SNAC 11 is available.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">01-Nov-2014, (New in OTL 4.0.325):<br>
                <br>
                <ul>
                  <li>Compilation errors were reported when #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CPP_11_ON">OTL_CPP_11_ON</a>
                    and #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_FUNC_THROW_SPEC_ON">OTL_FUNC_THROW_SPEC_ON</a>
                    are used together. They are not compatible, so this
                    release of OTL adds a check if both #defines are
                    enabled, the OTL header file issues an error
                    (#error).<br>
                    <br>
                  </li>
                  <li>GNU C++ <a href="https://gcc.gnu.org/gcc-4.9/">4.9.2</a>
                    was&nbsp; just released. The OTL unit test suite
                    compiles clean with this release, and all tests run
                    fine.<br>
                    <br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">29-Oct-2014, (New in OTL 4.0.324):<br>
                <br>
                <ul>
                  <li>A compilation error was reported when #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_FUNC_THROW_SPEC_ON">OTL_FUNC_THROW_SPEC_ON</a>
                    is enabled. The problem is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">21-Oct-2014, (New in OTL 4.0.323):<br>
                <br>
                <ul>
                  <li>A problem was reported that when #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_MSSQL_2008">OTL_ODBC_MSSQL_2008</a>
                    , #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UNICODE">OTL_UNICODE</a>,
                    and #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_NUMERIC_TYPE_1">OTL_NUMERIC_TYPE_1</a>
                    are used together,
                    otl_stream::operator&gt;&gt;(OTL_NUMERIC_TYPE_1&amp;)
                    doesn't return correct data. The problem is fixed in
                    this release.<br>
                    <br>
                  </li>
                  <li>This release introduces #defines <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_NUMERIC_TYPE_1">OTL_NUMERIC_TYPE_1_NO_NUMERIC_STATIC_CASTS</a>,
                    OTL_NUMERIC_TYPE_2_NO_NUMERIC_STATIC_CASTS, and
                    OTL_NUMERIC_TYPE_3_NO_NUMERIC_STATIC_CASTS to be
                    used with #defines OTL_NUMERIC_TYPE_X, when the
                    "large numeric types" can't be type cast
                    (static_cast&lt;&gt;) to regular numeric types like
                    int, double, short int, etc.<br>
                    <br>
                  </li>
                  <li>A problem was reported that when #define
                    OTL_DB2_CLI is used against DB2 v10.5.400.191,
                    SELECT statements returning 0 rows generate an error
                    under some circumstances. The problem is fixed in
                    this release.<br>
                    <br>
                    More precisely, SQLExecute() may return SQL_NO_DATA
                    sometimes, which makes it slightly incompatible with
                    any previous version of DB2.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">11-Oct-2014, (New in OTL 4.0.322):<br>
                <br>
                <ul>
                  <li>A problem was reported that when #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_MSSQL_2008">OTL_ODBC_MSSQL_2008</a>,
                    and #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ROLLS_BACK_BEFORE_LOGOFF">OTL_ROLLS_BACK_BEFORE_LOGOFF

                    </a>are used together, otl_connect::~otl_connect()
                    doesn't roll back the last transaction before
                    disconnecting from the database. The problem is
                    fixed in this release.<br>
                    <br>
                  </li>
                  <li>A problem was reported that when #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_DESTRUCTORS_DO_NOT_THROW">OTL_DESTRUCTORS_DO_NOT_THROW</a>
                    is used, otl_::~otl_connect shouldn't be marked as
                    noexcept(false) for C++11 compilers. The problem is
                    fixed is this release.<br>
                    <br>
                  </li>
                  <li>A few 64-bit GNU C++ compiler (4.8 and higher)
                    warnings were reported when command line option
                    -Wconversion is used. The warnings are fixed in this
                    release.<br>
                  </li>
                </ul>
                <p><br>
                </p>
              </td>
            </tr>
            <tr>
              <td valign="top">04-Oct-2014, (New in OTL4.0.321):<br>
                <br>
                <ul>
                  <li>A problem was reported that OTL <a href="https://otl.sourceforge.net/otl3_stream_class.htm#create_stored_proc_call">otl_stream::create_stored_proc_call</a>()

                    function doesn't return any results when used with
                    Oracle 12.1.0.2 and when the PL/SQL procedure name
                    that is used as the input argument for the function
                    call has no parameters. The problem is due to some
                    incompatibility in the system data dictionary
                    between Oracle 12.1.0.1 and Oracle 12.1.0.2. OTL was
                    successfully tested against Oracle 12.1.0.1 before.
                    Oracle 12.1.0.2 came out a few months after the
                    first release of Oracle 12c back in June of 2014.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">30-Sep-2014, (New in OTL 4.0.320 (update
                1)):<br>
                <br>
                <ul>
                  <li>The following new code example was added to show
                    how to enable UTF-8 encoding for MySQL: example <a href="https://otl.sourceforge.net/otl4_ex759.htm">759</a>.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">25-Sep-2014, (New in OTL 4.0.320):<br>
                <br>
                <ul>
                  <li>A problem was reported that when #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CPP_11_ON">OTL_CPP_11_ON</a>
                    is used with g++ 4.7.0 (or higher) and -std=c++11,
                    the program may terminate. The problem is due to
                    some incompatibility between C++03 and C++11
                    standards. C++11 compilers add noexcept(true) to all
                    destructors by default. This release fixes the
                    problem by adding noexcept(false) to some
                    destructors.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">09-Aug-2014, (New in OTL 4.0.319):<br>
                <br>
                <ul>
                  <li>A memory leak was reported when OTL was used with
                    #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA11G_R2">OTL_ORA11G_R2</a>
                    or #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA12C">OTL_ORA12C</a>.
                    The leak turned out to be an OCI resource leak that
                    was introduced in one of the OTL 4.0.31x versions
                    due to ambiguity in the OCI manual. The memory leak
                    is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">05-Aug-2014, (New in OTL 4.0.318 (update
                2)):<br>
                <br>
                <ul>
                  <li>GNU C++ 4.9.1 was released in July 17, 2014. This
                    release of OTL compiles clean with GNU C++ 4.9.1,
                    and the OTL unit test suite runs fine.<br>
                  </li>
                </ul>
                <br>
                04-Aug-2014, (New in OTL4.0.318 (update 1)):<br>
                <br>
                <ul>
                  <li>Visual C++ Studio 2013 Update 3 has been released
                    today. This release of OTL compiles clean with the
                    Visual C++ 2013 Update 3, and the OTL unit test
                    suite runs fine.<br>
                    <br>
                  </li>
                </ul>
                27-Jun-2014, (New in OTL 4.0.318):<br>
                <br>
                <ul>
                  <li>Code cleanup: a few new typedefs and C++11 enums
                    (for C++ compilers that support such features) were
                    added&nbsp; and a few constants were changed for
                    better readability and performance.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">16-May-2014, (New in OTL 4.0.317 (updated
                (3)):<br>
                <br>
                <ul>
                  <li>The following new Q&amp;A has been added to the
                    OTL F.A.Q.: <a href="https://otl.sourceforge.net/otl3_faq.htm#MYSQL_UTF8">does
                      OTL work with UTF-8 and MySQL</a>?<br>
                  </li>
                </ul>
                <br>
                24-Apr-2014, (New in OTL 4.0.317 (updated (2)):<br>
                <br>
                <ul>
                  <li>GNU C++ 4.9 has just been released. The OTL unit
                    test suite compiles clean with GNU C++ 4.9, and all
                    of the unit tests run fine after that.<br>
                  </li>
                </ul>
                <br>
                01-Apr-2014, (New in OTL 4.0.317 (updated)):<br>
                <br>
                <ul>
                  <li>MS SQL Server 2014 just got released. All of the
                    OTL unit tests for MS SQL run fine when built with
                    the current version of OTL. #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_MSSQL_2008">OTL_ODBC_MSSQL_2008</a>
                    is good for using it against SQL Server 2014.<br>
                  </li>
                </ul>
                <br>
                17-Fed-2014, (New in OTL 4.0.317):<br>
                <br>
                <ul>
                  <li>A problem was reported that
                    std::uncaught_exception() is not thread safe (an
                    exception thrown in a different thread may make the
                    function return true) in the following versions of
                    xlC compilers (AIX):<br>
                    <br>
                    <pre><span class="n">IBM</span> <span class="n">XL</span> <span class="n">C</span><span class="o">/</span><span class="n">C</span><span class="o">++</span> <span class="k">for</span> <span class="n">AIX</span><span class="p">,</span> <span class="n">V12</span><span class="mf">.1</span> <span class="p">(</span><span class="mi">5765</span><span class="o">-</span><span class="n">J02</span><span class="p">,</span> <span class="mi">5725</span><span class="o">-</span><span class="n">C72</span><span class="p">)</span>

<span class="nl">Version:</span> <span class="mf">12.01.0000.0007</span>

<span class="n">IBM</span> <span class="n">XL</span> <span class="n">C</span><span class="o">/</span><span class="n">C</span><span class="o">++</span> <span class="k">for</span> <span class="n">AIX</span><span class="p">,</span> <span class="n">V11</span><span class="mf">.1</span> <span class="p">(</span><span class="mi">5724</span><span class="o">-</span><span class="n">X13</span><span class="p">)</span>

<span class="nl">Version:</span> <span class="mf">11.01.0000.0010<br><br></span></pre>
                    <span class="mf">This</span> release introduces the
                    following new #define in order to disable the
                    default use of the std::uncaught_exception()
                    function: #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UNCAUGHT_EXCEPTION_OFF">OTL_UNCAUGHT_EXCEPTION_OFF</a>.<br>
                    <br>
                  </li>
                  <li>This release works around an Oracle bug (BUG
                    11716746 on Oracle Metalink), which causes the OCI
                    layer to make a database round-trip on an
                    OCILobRead() call even when "LOB prefetching" was
                    enabled via otl_connect::<a href="https://otl.sourceforge.net/otl3_connect_class.htm#set_lob_prefetch_size">set_lob_prefetch_size</a>().<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">9-Feb-2014, (New in OTL 4.0.316):<br>
                <br>
                <ul>
                  <li>This release introduces the following new
                    function: otl_connect::<a href="https://otl.sourceforge.net/otl3_connect_class.htm#set_lob_prefetch_size">set_lob_prefetch_size</a>()

                    for <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA11G_R2">Oracle
                      11G Release 2</a>, and <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA12C">Oracle 12c</a>.
                    The function can be used to enable OCI default
                    prefetching of CLOBs/BLOBs in order to reduce the
                    total number of database round-trips for small LOB
                    values.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">18-Jan-2014, (New in OTL 4.0.315):<br>
                <br>
                <ul>
                  <li>The problem that OTL <a href="https://otl.sourceforge.net/otl3_whatn.htm#OTL40313">4.0.313</a>
                    was supposed to fix was reported not to be fully
                    fixed. The problem is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">12-Jan-2014, (New in OTL 4.0.314):<br>
                <br>
                <ul>
                  <li>A problem was reported that OTL can't be used with
                    the <a href="http://www.dba-oracle.com/t_activate_client_caching_for_oci_applications.htm">OCI

                      Client Caching</a>. This release changed calls to
                    OCIStmtPrepare() / OCIHandleFree() to
                    OCIStmtPrepare2() / OCIStmtRelease() for Oracle 11.2
                    and Oracle 12c (#define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA11G_R2">OTL_ORA11G_R2</a>,
                    #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA12C">OTL_ORA12C</a>).<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top"><a name="OTL40313"></a>04-Jan-2014, (New
                in OTL 4.0.313):<br>
                <br>
                <ul>
                  <li>A problem was reported that when a bind variable <a href="https://otl.sourceforge.net/otl3_bind_variables.htm">declaration</a> is
                    not complete, yet it does not generate an error
                    message / OTL <a href="https://otl.sourceforge.net/otl3_exception_class.htm">
                      exception</a>, for example:<br>
                    <br>
                    <tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                      "...:v&lt;char[100]&gt;</tt>, or even <tt>"...:v&lt;char[100]"</tt><br>
                    <br>
                    It only happens for the very last bind variable
                    declaration is an SQL statement. The problem is
                    fixed is this release, and also this release is
                    introducing the following new OTL <a href="https://otl.sourceforge.net/otl3_exc_list.htm">defined</a> exception:
                    Code=<a href="https://otl.sourceforge.net/otl3_exc_list.htm#32044">32044</a>,
                    Bind variable declaration is missing a terminator:
                    &gt; or */.<br>
                    <br>
                  </char[100"<></tt></char[100]"<></tt></li><tt><tt>
                </tt></tt></ul><tt><tt>
              </tt></tt></td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">29-Dec-2013, (New in OTL 4.0.312):<br>
                <br>
                <ul>
                  <li>A problem was reported in functions
                    otl::get_number_of_errors_in_batch() and
                    otl_stream::get_error(), which were introduced in
                    OTL <a href="https://otl.sourceforge.net/otl3_whatn.htm#OTL4308">4.0.308</a>, that the
                    functions don't handle OCI errors correctly. The
                    problem is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">22-Dec-2013, (New in OTL 4.0.311):<br>
                <br>
                <ul>
                  <li>New nonvariadic <a href="https://otl.sourceforge.net/otl4_read_row.htm#nonvariadic_cpp11_write_row">versions</a>
                    of <a href="https://otl.sourceforge.net/otl4_read_row.htm">otl_write_row</a>()
                    that accept <a href="https://otl.sourceforge.net/otl4_read_row.htm#universal_references">universal

                      references</a> were added for Visual C++ 2010 /
                    2012 in order to relax the restrictions on the
                    nonvariadic pre-C++11 <a href="https://otl.sourceforge.net/otl4_read_row.htm#nonvariadic_precpp11_write_row">versions</a>
                    of the function.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">18-Dec-2013, (New in OTL 4.0.310):<br>
                <br>
                <ul>
                  <li>CODE CLEANUP: Calls to std::forward() have been
                    added to the variadic version the <a href="https://otl.sourceforge.net/otl4_read_row.htm#variadic_otl_write_row">otl_write_row</a>()

                    function in order to preserve properties of input
                    parameters (rvalue-ness, lvalue-ness, const-ness,
                    etc.).<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">16-Dec-2013, (New in OTL 4.0.309):<br>
                <br>
                <ul>
                  <li>CODE CLEANUP: <br>
                    <br>
                  </li>
                  <ul>
                    <li>Internal OCI (Oracle) resources are allocated
                      more optimally when Oracle batch error mode
                      (introduced in OTL 4.0.308) is used.<br>
                      <br>
                    </li>
                    <li>Deprecated OCI function OCIStmtFetch() was
                      replaced with OCIStmtFetch2() when OCI 9 through
                      OCI 12 is used.</li>
                  </ul>
                </ul>
                <p><br>
                </p>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top"><a name="OTL4308"></a>07-Dec-2013, (New
                in OTL 4.0.308):<br>
                <br>
                <ul>
                  <li>A problem was reported when #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UNICODE_EXCEPTION_AND_RLOGON"><span class="257403912-05122013"><span class="257403912-05122013"><font size="2" face="Arial"><font size="2">OTL_UNICODE_EXCEPTION_AND_RLOGON</font></font></span></span></a>
                    and #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_EXCEPTION_IS_DERIVED_FROM_STD_EXCEPTION">OTL_EXCEPTION_IS_DERIVED_FROM_STD_EXCEPTION</a>
                    are used together: std::exception.what() returns a
                    garbagy string. The problem is fixed in this
                    release.<br>
                    <br>
                  </li>
                  <li>This release introduces support for Oracle 8
                    through 12 <a href="http://docs.oracle.com/cd/A91202_01/901_doc/appdev.901/a89857/oci04sql.htm#444387">batch

                      error mode</a> via the following otl_stream
                    functions: <a href="https://otl.sourceforge.net/otl3_stream_class.htm#set_batch_error_mode">set_batch_error_mode</a>(),

                    <a href="https://otl.sourceforge.net/otl3_stream_class.htm#get_number_of_errors_in_batch">get_number_of_errors_in_batch</a>(),

                    <a href="https://otl.sourceforge.net/otl3_stream_class.htm#get_error">get_error</a>().

                    Code example <a href="https://otl.sourceforge.net/otl3_ex232.htm">232</a>&nbsp;
                    was modified to show the use of the new
                    functionality.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">23-Oct-2013, (New in OTL 4.0.307):<br>
                <br>
                <ul>
                  <li>A compilation error was reported when OTL_ORA8I is
                    used. The error is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">19-Oct-2013, (New in OTL 4.0.306):<br>
                <br>
                <ul>
                  <li>GNU C++ 4.8.2 and Visual C++ 2013 have just been
                    released. Visual C++ 2013 supports C++11's "=delete"
                    qualifier as well as variadic templates. This
                    release uses those two features automatically for
                    Visual C++ 2013, especially for <a href="https://otl.sourceforge.net/otl4_read_row.htm">otl_read_row() /
                      otl_write_row()</a>. The OTL unit test suite
                    compiles clean with GNU C++ 4.8.2 and Visual C++
                    2013, and it produces the correct results after
                    having been compiled with GNU C++ 4.8.2 and Visual
                    C++ 2013.<br>
                  </li>
                </ul>
                <br>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">05-Oct-2013, (New in OTL 4.0.305):<br>
                <br>
                <ul>
                  <li>This release introduces a limited set (from 1 to
                    15 parameters) of nonvariadic template functions <a href="https://otl.sourceforge.net/otl4_read_row.htm">otl_read_row() /
                      otl_write_row()</a> that can be used with
                    pre-C++11 compilers. Also, the following code
                    examples have been modified to show the use of the
                    new nonvariadic template functions:<br>
                    <br>
                    <ul>
                      <li>Oracle, OCI7 (example <a href="https://otl.sourceforge.net/otl3_ex01.htm">1</a>,
                        <a href="https://otl.sourceforge.net/otl3_ex97.htm">97</a>)</li>
                    </ul>
                  </li>
                  <ul>
                    <li>&nbsp;Oracle, OCI8 and higher (example <a href="https://otl.sourceforge.net/otl3_ex10.htm">10</a>, <a href="https://otl.sourceforge.net/otl3_ex98.htm">98</a>)<br>
                    </li>
                    <li>&nbsp;MS SQL (example<a href="https://otl.sourceforge.net/otl3_ex67.htm"> 67</a>,
                      <a href="https://otl.sourceforge.net/otl3_ex99.htm">99</a>)</li>
                    <li>DB2 (example <a href="https://otl.sourceforge.net/otl3_ex89.htm">89</a>, <a href="https://otl.sourceforge.net/otl3_ex100.htm">100</a>)<br>
                      <br>
                    </li>
                  </ul>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">26-Sep-2013, (New in OTL 4.0.304):<br>
                <br>
                <ul>
                  <li>A GNU C++ 3.4.6 compilation error was reported
                    when the following OTL #defines are defined:<br>
                    <br>
                    <div>
                      <div><tt>#define&nbsp;OTL_ORA9I</tt></div>
                      <tt> </tt>
                      <div><tt>#define&nbsp;OTL_UNICODE</tt></div>
                    </div>
                    <tt> </tt>
                    <div><tt>#define&nbsp;OTL_UNICODE_CHAR_TYPE&nbsp;wchar_t</tt></div>
                    <tt> </tt>
                    <div><tt>#define&nbsp;OTL_UNICODE_STRING_TYPE&nbsp;std::wstring

                      </tt></div>
                    <tt>
#define&nbsp;OTL_DEFAULT_STRING_NULL_TO_VAL&nbsp;(L"")</tt><tt><br>
                    </tt><br>
                    The error is this:<br>
                    <br>
                    <tt>/otlv4.h:30772:&nbsp;error:&nbsp;reinterpret_cast&nbsp;from&nbsp;type&nbsp;`const&nbsp;wchar_t*'&nbsp;to&nbsp;type&nbsp;`wchar_t*'&nbsp;casts&nbsp;away&nbsp;constness</tt><tt><br>
                      <br>
                      <br>
                    </tt><br>
                    This release fixes the error.<br>
                    <br>
                  </li>
                  <li>A memory access violation error / program crash
                    was reported when OTL was used with MS SQL Server
                    2008 (#define OTL_ODBC_MSSQL_2008), and when
                    otl_stream::clean() was being called in a catch
                    block after a SELECT statement that referenced a
                    nonexistent table:<br>
                    <tt><br>
                    </tt><tt>try{</tt><tt><br>
                    </tt><tt>&nbsp;&nbsp; s.open(...);</tt><tt><br>
                    </tt><tt>&nbsp;&nbsp; ...</tt><tt><br>
                    </tt><tt>}catch(otl_exception&amp;...){</tt><tt><br>
                    </tt><tt>&nbsp;&nbsp; ...</tt><tt><br>
                    </tt><tt>&nbsp;&nbsp; s.clean(1);</tt><tt><br>
                    </tt><tt>&nbsp;&nbsp; ...</tt><tt><br>
                    </tt><tt>}</tt><tt><br>
                    </tt><br>
                    This release fixes the error.<br>
                    <br>
                  </li>
                  <li>The following existing code examples have been
                    modified in order to show how to use OTL variadic
                    template functions <a href="https://otl.sourceforge.net/otl4_read_row.htm">otl_read_row()

                      / otl_write_row()</a> that were introduced in OTL
                    4.0.303: <br>
                    <br>
                    <ul>
                      <li>Oracle, OCI7 (example <a href="https://otl.sourceforge.net/otl3_ex01.htm">1</a>,
                        <a href="https://otl.sourceforge.net/otl3_ex97.htm">97</a>)</li>
                      <li>&nbsp;Oracle, OCI8 and higher (example <a href="https://otl.sourceforge.net/otl3_ex10.htm">10</a>, <a href="https://otl.sourceforge.net/otl3_ex98.htm">98</a>)<br>
                      </li>
                      <li>&nbsp;MS SQL (example<a href="https://otl.sourceforge.net/otl3_ex67.htm">
                          67</a>, <a href="https://otl.sourceforge.net/otl3_ex99.htm">99</a>)</li>
                      <li>DB2 (example <a href="https://otl.sourceforge.net/otl3_ex89.htm">89</a>,
                        <a href="https://otl.sourceforge.net/otl3_ex100.htm">100</a>)<br>
                        <br>
                      </li>
                    </ul>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">22-Sep-2013, (New in OTL 4.0.303):<br>
                <br>
                <ul>
                  <li>This release introduces the following new C++11
                    variadic template functions: <a href="https://otl.sourceforge.net/otl4_read_row.htm">otl_read_row() /
                      otl_write_row()</a>. The functions accept lists of
                    variable numbers of parameters that form whole
                    logical rows, and the functions check the "<a href="https://otl.sourceforge.net/otl3_stream_class.htm#check_end_of_row">end-of-row</a>"
                    condition at the end of each parameter list, which
                    completely eliminates the "<a href="http://soci.sourceforge.net/doc/3.1/rationale.html">row-tearing</a>"
                    problem. For now, the functions are enabled under
                    g++ 4.7 and higher. As soon as CLANG and / or Visual
                    C++ 2013 implement the necessary feature, the
                    functions will be automatically enabled for those
                    C++ compilers.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">10-Sep-2013, (New in OTL 4.0.302):<br>
                <br>
                <ul>
                  <li>This release introduces the following new #define:
                    <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_PARANOID_EOF">OTL_PARANOID_EOF</a>.
                    When enabled, this #define makes OTL throw
                    otl_exception (code <a href="https://otl.sourceforge.net/otl3_exc_list.htm#32043">32043</a>) when a
                    call to otl_stream::operator&gt;&gt;() is being made
                    beyond the "end of file". This technique allows
                    subtle bugs to be caught quicker, but it effectively
                    disables the following coding idiom:
                    while(s&gt;&gt;f1&gt;&gt;f2)..., if(s&gt;&gt;f1)...,
                    etc.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">07-Sep-2013, (New in OTL 4.0.301):<br>
                <br>
                <ul>
                  <li>A problem was reported that OTL <a href="https://otl.sourceforge.net/otl3_lob_stream.htm#read">otl_lob_stream::operator&gt;&gt;</a>(otl_long_string&amp;)

                    doesn't always return a correct database error under
                    #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_MSSQL_2008">OTL_ODBC_MSSQL_2008</a>.
                    The problem is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">04-Sep-2013, (new in OTL 4.0.300):<br>
                <br>
                <ul>
                  <li>This release introduces the following new pair of
                    template functions:<a href="https://otl.sourceforge.net/otl4_read_from_stream.htm">
                      otl_read_from_stream() / otl_write_to_stream()</a>.
                    Also, see code examples <a href="https://otl.sourceforge.net/otl4_ex754.htm">754</a>
                    (OCI7), <a href="https://otl.sourceforge.net/otl4_ex755.htm">755</a> (OCI8 and
                    higher), <a href="https://otl.sourceforge.net/otl4_ex756.htm">756</a> (MS SQL),
                    <a href="https://otl.sourceforge.net/otl4_ex757.htm">757</a> (DB2), and <a href="https://otl.sourceforge.net/otl4_ex758.htm">758</a> (PostgreSQL).<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">01-Aug-2013, (new in OTL 4.0.299):<br>
                <br>
                <ul>
                  <li>This release introduces the following new optional
                    parameter for <a href="https://otl.sourceforge.net/otl4_subscriber.htm#SUBSCRIBE">otl_subscribe::subscribe</a>():

                    ipaddr (IP&nbsp; address).<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">22-Jul-2013, (new in OTL 4.0.298
                (updated)):<br>
                <br>
                <ul>
                  <li>DB2 LUW 10.5 was released last month (June 2013).
                    This release of OTL builds clean with the DB2 10.5
                    client header files and libraries, and the OTL unit
                    test suite runs fine against DB2 10.5.<br>
                  </li>
                </ul>
                <br>
                21-Jul-2013, (New in OTL 4.0.298):<br>
                <br>
                <ul>
                  <li>Oracle 12c has been released. This release of OTL
                    introduces basic support for Oracle 12c with the
                    following new #define: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA12C">OTL_ORA12C</a>.
                    All available OTL code examples for prior releases
                    of Oracle (7-11) should work, assuming that #define
                    OTL_ORA12C is used, and each code example is
                    compiled and linked with Oracle 12c client header
                    files and libraries. <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">20-Jun-2013, (New in OTL 4.0.297):<br>
                <br>
                <ul>
                  <li> A problem was reported in otl_stream::<a href="file:///C:/oscl/vc/doc/otl4/otl3_stream_class.htm#create_stored_proc_call">create_stored_proc_call</a>()

                    (Oracle only). The problem is that when a stored
                    procedure has a RAW parameter, it gets mapped to
                    char[XXX]. In order to eliminate the problem
                    (limitation), this release introduces the following
                    two new #defines: <a href="file:///C:/oscl/vc/doc/otl4/otl3_compile.htm#OTL_ORA_CREATE_STORED_PROC_CALL_MAPS_RAW_TO_RAW_LONG">OTL_ORA_CREATE_STORED_PROC_CALL_MAPS_RAW_TO_RAW_LONG</a>,
                    <a href="file:///C:/oscl/vc/doc/otl4/otl3_compile.htm#OTL_ORA_CREATE_STORED_PROC_CALL_MAPS_RAW_TO_RAW">OTL_ORA_CREATE_STORED_PROC_CALL_MAPS_RAW_TO_RAW</a>.
                    Also, code example <a href="file:///C:/oscl/vc/doc/otl4/otl4_ex153.htm">153</a>
                    was changed to show how the new #defines work.<br>
                    <br>
                  </li>
                </ul>
              </td>
            </tr>
            <tr>
              <td valign="top">01-Jun-2013, (New in OTL 4.0.296 (updated
                (2)):<br>
                <br>
                <ul>
                  <li>GNU C++ 4.8.1 was just released. This release of
                    OTL builds clean with g++ 4.8.1, and the OTL unit
                    test suite runs fine.<br>
                    <br>
                  </li>
                </ul>
                30-May-2013, (New in OTL 4.0.296 (updated)):<br>
                <br>
                <ul>
                  <li>A problem was reported that it was not possible to
                    connect to MS SQL Server when UID contains an '@'
                    sign, for example:<br>
                    <br>
                    &nbsp;&nbsp; <tt>db.rlogon("UID=user@servername;DSN=mydsn;PWD=mypassword");</tt><br>
                    <br>
                    The <a href="https://otl.sourceforge.net/otl3_connect_class.htm#AT_IN_CONNECT_STR">following

                      text</a> in the manual was extended with a connect
                    string example to show how use the '@' sign
                    literally in connect strings.<br>
                  </li>
                </ul>
                <br>
                27-May-2013, (New in OTL 4.0.296):<br>
                <br>
                <ul>
                  <li>A problem was reported with OTL_UNICODE_ID (an
                    internal #define in the OTL header file) being
                    defined more than once when <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STREAM_POOLING_ON">OTL_STREAM_POOLING_ON</a>
                    and <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UNICODE_STRING_TYPE">OTL_UNICODE_STRING_TYPE</a>
                    are used together under some circumstances. The C++
                    compiler issues a warning, and when warnings are set
                    to be treated like errors, it makes the compilation
                    fail. The problem was introduced in OTL <a href="https://otl.sourceforge.net/otl3_whatn.htm#OTL_4_0_295">4.0.295</a>. The problem is
                    fixed in this release. Also, the following new code
                    examples have been added to demonstrate how to use
                    OTL_STREAM_POOLING_ON and OTL_UNICODE_STRING_TYPE
                    together: examples <a href="https://otl.sourceforge.net/otl4_ex751.htm">751
                      (Oracle)</a>, <a href="https://otl.sourceforge.net/otl4_ex752.htm">752 (MS
                      SQL)</a>, <a href="https://otl.sourceforge.net/otl4_ex753.htm">753 (DB2)</a>.
                    These new code examples should be easy enough to
                    modify to work with the rest of the database types
                    that OTL supports.<br>
                    <br>
                  </li>
                  <li>A couple of compilation problems was reported with
                    'OTL_STRING_CONTAINER: OTL_STRING_CONTAINER' :
                    undeclared identifier. The problems are fixed in
                    this release.<br>
                  </li>
                </ul>
                <br>
                <ul>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top"><a name="OTL_4_0_295"></a>24-May-2013,
                (New in OTL 4.0.295):<br>
                <br>
                <ul>
                  <li>This release relaxes the <a href="https://otl.sourceforge.net/otl3_stream_pooling.htm#STREAM_POOLING_PREREQS">requirements</a>
                    for using <a href="https://otl.sourceforge.net/otl3_stream_pooling.htm">OTL
                      stream pooling</a>. OTL stream pooling can be now
                    used when #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UNICODE_STRING_TYPE">OTL_UNICODE_STRING_TYPE</a>
                    is enabled.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">20-May-2013, (New in OTL 4.0.294):<br>
                <br>
                <ul>
                  <li>CODE CLEANUP: a few minor code tweaks were
                    suggested for OTL 4.0.293. This release implements
                    the suggestions.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">18-May-2013, (New in OTL 4.0.293):<br>
                <br>
                <ul>
                  <li>More Visual C++ 2012 Code Analysis warnings were
                    reported. A few Visual C++ 2010 Code Analysis
                    warnings were reported as well. This release fixes
                    all of the reported warnings.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">15-May-2013, (New in OTL 4.0.292):<br>
                <br>
                <ul>
                  <li>A few Visual C++ 2012 Code Analysis warnings were
                    reported for OTL 4.0.291. This release fixes the
                    warnings.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">05-May-2013, (New in OTL 4.0.291):<br>
                <br>
                <ul>
                  <li>A problem was reported that when otl_lob_stream is
                    used with a stored procedure that returns an
                    implicit result set to enter an input parameter, OTL
                    throws the "<a href="https://otl.sourceforge.net/otl3_exc_list.htm#32012">CLOB/BLOB

                      stream is not open for reading</a>" exception. It
                    wasn't quite clear what was going on. This release
                    introduces the following new exception: <a href="https://otl.sourceforge.net/otl3_exc_list.htm#32042">32042</a>,
                    otl_lob_stream can't be used as an input parameter
                    with a SELECT statement or a stored procedure that
                    returns an implicit result set. <br>
                    <br>
                    OTL (for DB2 CLI, ODBC) has a limitation on how <a href="https://otl.sourceforge.net/otl3_lob_stream.htm">otl_lob_streams</a> are
                    used with SELECTs / SPs returning implicit result
                    sets: otl_lob_streams can only be used for output
                    parameters / output SELECT columns.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">28-Apr-2013, (New in OTL 4.0.290):<br>
                <br>
                <ul>
                  <li>CODE CLEANUP: "get_rpc" functions have been marked
                    as "non-throwing" (noexcept for C++11 (when #define
                    <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CPP_11_ON">OTL_CPP_11_ON</a>
                    is enabled, throw() (when #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_NO_THROW_IS_EMPTY_THROW">OTL_NO_THROW_IS_EMPTY_THROW</a>
                    is enabled)) for the C++ compiler's&nbsp; optimizer
                    to be able to generate more efficient code.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">26-Apr-2013, (New in OTL 4.0.289):<br>
                <br>
                <ul>
                  <li>CODE CLEANUP: this release adds noexcept(false)
                    for C++11 compilers (when #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CPP_11_ON">OTL_CPP_11_ON</a>
                    is enabled) to functions that may throw <a href="https://otl.sourceforge.net/otl3_exception_class.htm">otl_exception</a>.<br>
                    <br>
                  </li>
                  <li>This release documents a previously undocumented
                    #define: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_NO_THROW_IS_EMPTY_THROW">OTL_NO_THROW_IS_EMPTY_THROW</a>.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">23-Apr-2013, (New in OTL 4.0.288):<br>
                <br>
                <ul>
                  <li>This release implements a new optimized SELECT
                    statement for otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#create_stored_proc_call">create_stored_proc_call</a>()

                    for Oracle 11.x to access the Oracle data
                    dictionary.&nbsp; A patch was submitted by a
                    developer from Malta. Many thanks!<br>
                    <br>
                  </li>
                  <li>This release introduces the following new function
                    to the otl_lob_stream class for a more flexible
                    interface: <a href="https://otl.sourceforge.net/otl3_lob_stream.htm#setInitialReadOffset">setInitialReadOffset</a>().

                    The function is implemented for Oracle only. Also,
                    code examples <a href="https://otl.sourceforge.net/otl3_ex56.htm">56</a> and <a href="https://otl.sourceforge.net/otl3_ex57.htm">57</a> have been modified to
                    show how to use the new function.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">20-Apr-2013, (New in OTL 4.0.287):<br>
                <br>
                <ul>
                  <li>CODE CLEANUP: in order to address a legitimate
                    question, some conditional compilation (#ifs)
                    statements were simplified for better readability.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">07-Apr-2013, (New in OTL 4.0.286):<br>
                <br>
                <ul>
                  <li>A problem was reported that when OTL was used
                    against Oracle, a SELECT statement was used in the
                    LOB stream mode (<a href="https://otl.sourceforge.net/otl3_lob_stream.htm">otl_lob_stream</a>),

                    and CLOB / BLOB columns were in the middle of a
                    SELECT output column list, the otl_lob_stream didn't
                    return the correct LOB length or the content.
                    Normally, CLOB / BLOB columns should be put at the
                    end of the SELECT output column list to work
                    correctly in the LOB stream mode.<br>
                    <br>
                    In order to address the need of being able to put
                    CLOBs / BLOBs in the middle of the list and being
                    able to use the LOB stream mode (Oracle only), this
                    release introduces the following new #define: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_SELECT_STREAM_ALTERNATE_FETCH">OTL_SELECT_STREAM_ALTERNATE_FETCH</a>.<br>
                  </li>
                </ul>
                <br>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">04-Apr-2013, (New in OTL 4.0.285):<br>
                <br>
                <ul>
                  <li>CODE CLEANUP to address a couple of legitimate
                    questions: <br>
                    <br>
                  </li>
                  <ul>
                    <li>several NULL (zero) pointers were replaced with
                      nullptr for C++ compilers that support C++11 for
                      cleaner, more readable code.<br>
                      <br>
                    </li>
                    <li>some conditional compilation (#ifdefs)
                      statements were simplified for better readability.<br>
                      <br>
                    </li>
                  </ul>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">23-Mar-2013, (New in OTL 4.0.284):<br>
                <br>
                <ul>
                  <li>GNU C++ 4.8.0 was <a href="http://gcc.gnu.org/">released</a>
                    yesterday. This release of OTL builds clean with G++
                    4.8.0, and the OTL unit test suite runs fine.<br>
                  </li>
                </ul>
                <p><br>
                </p>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">21-Mar-2013, (New in OTL 4.0.283 (updated
                (3)):<br>
                <br>
                <ul>
                  <li>The following entry has been added to the F.A.Q: <a href="https://otl.sourceforge.net/otl3_faq.htm#SQL_SERVER_LINUX">Does OTL work
                      with MS SQL Server and Linux</a>?<br>
                  </li>
                </ul>
                <br>
                16-Mar-2013, (New in OTL 4.0.283 (updated (2)):<br>
                <br>
                <ul>
                  <li>The following new page has been added to address a
                    question whether OTL supports UTF8 for Oracle 11g
                    (R2) or not: <a href="https://otl.sourceforge.net/otl4_ora11_utf8_examples.htm">examples

                      for Oracle 11g (R2), UTF8</a>.<br>
                    <br>
                  </li>
                </ul>
                03-Mar-2013, (New in OTL 4.0.283 (updated)):<br>
                <br>
                <ul>
                  <li>The PostgreSQL specific part of the OTL unit test
                    suite runs fine against the latest PostgreSQL 9.2.3
                    and this release.<br>
                  </li>
                </ul>
                <br>
                11-Feb-2013, (New in OTL 4.0.283):<br>
                <br>
                <ul>
                  <li>A problem was reported that when the otl_stream
                    buffer size is invalid (&lt;=0), OTL doesn't raise
                    any exceptions. The problem is fixed in this
                    release, and the following new OTL defined exception
                    is introduced: <a href="https://otl.sourceforge.net/otl3_exc_list.htm#32041">Invalid

                      stream buffer size</a> (&lt;=0).<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">10-Feb-2013, (New in OTL 4.0.282
                (updated)):<br>
                <br>
                <ul>
                  <li>MySQL 5.6 came out recently. OTL unit tests for
                    MySQL run fine against MySQL 5.6 and MySQL ODBC
                    connector 5.2.<br>
                  </li>
                </ul>
                <br>
                14-Jan-2013, (New in OTL 4.0.282):<br>
                <br>
                <ul>
                  <li>A problem was reported that when #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_EXCEPTION_COPIES_INPUT_STRING_IN_CASE_OF_OVERFLOW">OTL_EXCEPTION_COPIES_INPUT_STRING_IN_CASE_OF_OVERFLOW</a>
                    is enabled as well as <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_TRACE">OTL tracing</a>,
                    OTL doesn't log input string values correctly along
                    with the <a href="https://otl.sourceforge.net/otl3_exception_class.htm">otl_exception</a>
                    data. The problem is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">27-Dec-2012, (New in OTL 4.0.281):<br>
                <br>
                <ul>
                  <li>CODE CLEANUP: OTL had #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_NO_TMPL_MEMBER_FUNC_SUPPORT">OTL_NO_TMPL_MEMBER_FUNC_SUPPORT</a>
                    enabled for GNU C++ by default. Somebody pointed out
                    that GNU C++ has supported template member functions
                    for quite some time. This release does not disable
                    template member function by default for GNU C++
                    (version 4.1 and higher). This opens more
                    optimization and semantic check opportunities for
                    the GNU C++ compiler.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">19-Dec-2012, (New in OTL 4.0.280):<br>
                <br>
                <ul>
                  <li>BUG FIX: A bug was reported that the OTL header
                    file didn't compile with ACE 6.x when #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ACE">OTL_ACE</a> and
                    #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA11G_R2">OTL_ORA11G_R2</a>
                    are enabled together. The problem is fixed in this
                    release.<br>
                    <br>
                  </li>
                  <li>CODE CLEANUP: Visual C++ 2012 introduced #define
                    _NOEXCEPT throw(). Many VC++ 2012 STL functions are
                    marked as _NOEXCEPT, IntelliSense recognizes it, and
                    a throwing function that is marked as _NOEXCEPT will
                    not compile. There are also optimization
                    opportunities for the compiler when functions are
                    marked as "non-throwing".<br>
                    <br>
                    This release of OTL adds _NOEXCEPT to its
                    non-throwing functions when compiled with VC++ 2012.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">15-Dec-2012, (New in OTL 4.0.279
                (updated)):<br>
                <br>
                <ul>
                  <li>Visual Studio 2012 Update 1 just came out. This
                    release compiles clean with VC++ 2012 Update 1, and
                    the unit test suite runs fine.<br>
                  </li>
                </ul>
                <br>
                13-Dec-2012, (New in OTL 4.0.279):<br>
                <br>
                <ul>
                  <li>A problem was reported that <a href="https://otl.sourceforge.net/otl4_subscriber.htm">otl_subscriber</a>
                    (Oracle 10g and higher) didn't handle the following
                    cases in a switch statement in
                    otl_subscriber::notification_callback() correctly:<br>
                    <pre wrap="">        case (OCI_OPCODE_INSERT+OCI_OPCODE_UPDATE+OCI_OPCODE_ALLROWS):<br>        case (OCI_OPCODE_INSERT+OCI_OPCODE_DELETE+OCI_OPCODE_ALLROWS):<br>        case (OCI_OPCODE_UPDATE+OCI_OPCODE_DELETE+OCI_OPCODE_ALLROWS):<br>        case (OCI_OPCODE_INSERT+OCI_OPCODE_UPDATE+<br>              OCI_OPCODE_DELETE+OCI_OPCODE_ALLROWS):<br>        case (OCI_OPCODE_UNKNOWN+OCI_OPCODE_ALLROWS):<br>          OnTableChange(table_name,all_rows);

          continue;

</pre>
                    The problem is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
                <ul>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">08-Dec-2012, (New in OTL.0.278):<br>
                <br>
                <ul>
                  <li>This release introduces the following new function
                    and #define as a workaround for a problem:
                    otl_connect::<a href="https://otl.sourceforge.net/otl3_connect_class.htm#set_fetch_scroll_mode">set_fetch_scroll_mode</a>(),

                    #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_USES_SQL_FETCH_SCROLL_WHEN_SPECIFIED_IN_OTL_CONNECT">OTL_ODBC_USES_SQL_FETCH_SCROLL_WHEN_SPECIFIED_IN_OTL_CONNECT</a>.
                    <br>
                    <br>
                    The problem is that when an ODBC app connects to
                    more than one type of ODBC drivers, and it needs to
                    use both SQLExtendedFetch() and SQLFetchScroll(), it
                    wasn't possible before with OTL.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">04-Dec-2012, (New in OTL 4.0.277):<br>
                <br>
                <ul>
                  <li>A potential problem was reported in isalnum()
                    calls. According to the C standard, isalnum()
                    expects an input value in the range of "unsigned
                    char", or EOF (-1). Otherwise, the behavior is
                    undefined. This could be problematic for C++
                    compilers that have "char" as "signed char" by
                    default, if SQL statements contain bind variable
                    names with, say, extended ASCII ([128..255] range).
                    The problem is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">27-Nov-2012, (New in OTL 4.0.276):<br>
                <br>
                <ul>
                  <li>The following problem was reported: when <a href="http://www.klocwork.com/">klocwork</a>
                    compiles OTL, it marks occurrences of class data
                    member / variable "override" as a problematic use of
                    keyword "override". According to C++11, "override"
                    has special meaning in certain contexts, but it's
                    not a C++ keyword. It'll take a while for the
                    klocwork folks to fix the problem in their C++
                    parser, so as a goodwill gesture, problematic
                    occurrences of "override" are fixed in this release.<br>
                    <br>
                  </li>
                  <li>OTL unit test suite runs fine against MS SQL
                    Server 2012 SP1.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">25-Oct-2012, (New in OTL 4.0.275):<br>
                <br>
                <ul>
                  <li>A code inconsistency (missing "breaks") was
                    reported in a few switch statements. The switch
                    statements didn't produce incorrect results. This
                    release fixes the problem for the sake of code
                    consistency and readability.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">20-Oct-2012, (New in OTL 4.0.274):<br>
                <br>
                <ul>
                  <li>A problem was reported that OTL has a few
                    compilation errors / warnings when it's used with <a href="http://en.wikipedia.org/wiki/WxWidgets">wxWidgets</a>
                    version 2.9.4 or higher. The problem is that
                    wxWidgets' string class wxString's "c_str()"
                    function for Unicode / wide character strings is
                    called wc_str(). OTL makes calls to c_str(), which
                    is the problem. This release introduces the
                    following new #define to address the problem: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_C_STR_FOR_UNICODE_STRING_TYPE">OTL_C_STR_FOR_UNICODE_STRING_TYPE</a>.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">12-Oct-2012, (New in OTL 4.0.273):<br>
                <br>
                <ul>
                  <li>An "uninitialized variable" compilation warning
                    was reported for GNU C++ 4.1. The warning is fixed
                    in this release.<br>
                    <br>
                  </li>
                  <li>A dead URL was reported in the OTL Introduction
                    page. The link is fixed in this release.<br>
                    <br>
                  </li>
                  <li>GNU C++ 4.7.2 came out 9/20/2012. This release
                    compiles clean with G++ 4.7.2.<br>
                  </li>
                </ul>
                &nbsp;<br>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">19-Sep-2012, (New in OTL 4.0.272 (updated
                (2)):<br>
                <br>
                <ul>
                  <li>PostgreSQL 9.2 got released recently. PostgreSQL
                    specific unit tests from the OTL unit test suite
                    have been successfully tested against PostgreSQL 9.2
                    and this release of OTL.<br>
                    <br>
                  </li>
                </ul>
                18-Sep-2012, (New in OTL 4.0.272 (updated):<br>
                <br>
                <ul>
                  <li>This release compiles clean with Visual C++ Studio
                    2012 (it came out last week), and the OTL unit test
                    suite runs fine.<br>
                    <br>
                  </li>
                </ul>
                11-Sep-2012, (New in OTL 4.0.272):<br>
                <br>
                <ul>
                  <li>A problem was reported that when an OTL based
                    program has a long uptime (months on end), and the
                    program opens and closes OTL streams a lot, dynamic
                    heap fragmentation goes up. In order to address the
                    problem, this release introduces the following new
                    #define: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_INITIAL_VAR_LIST_SIZE">OTL_INITIAL_VAR_LIST_SIZE</a>.<br>
                    <br>
                  </li>
                  <li>This release compiles clean with <a href="http://clang.llvm.org/get_started.html">CLANG</a>++

                    3.1, and the OTL unit test suite runs fine.<br>
                    <br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">02-Sep-2012, (New in OTL 4.0.271):<br>
                <br>
                <ul>
                  <li>An "unused variable" compilation warning was
                    reported when OTL compiles with CLANG. The problem
                    is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">11-Aug-2012, (New in OTL 4.0.270):<br>
                <br>
                <ul>
                  <li>A problem was reported when #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UNICODE">OTL_UNICODE</a>
                    is used with Oracle and LONG table columns. The
                    problem is that sometimes LONG string values contain
                    garbage characters at the end, presumably from
                    longer LONG values fetched by the otl_stream before.
                    The problem is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">04-Aug-2012, (New in OTL 4.0.269):<br>
                <br>
                <ul>
                  <li>A bug was reported that the OTL header file didn't
                    compile with ACE 6.0 when #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ACE">OTL_ACE</a> was
                    enabled. The problem is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td valign="top">20-Jul-2012, (New in OTL 4.0.268):<br>
                <br>
                <ul>
                  <li>This release compiles clean with GNU C++ 4.7.1,
                    which was released over a month ago.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td valign="top"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">09-Jun-2012, (New in OTL
                4.0.267):<br>
                <br>
                <ul>
                  <li>This release introduces two new bind variable data
                    types: <a href="https://otl.sourceforge.net/otl3_bind_variables.htm#bfloat">bfloat</a>,
                    <a href="https://otl.sourceforge.net/otl3_bind_variables.htm#bdouble">bdouble</a>.
                    These new bind variable data types should only be
                    used with Oracle PL/SQL tables of BINARY_FLOAT and
                    BINARY_DOUBLE (Oracle 10 and higher) in order to
                    work around quirks of the PL/SQL engine.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">06-Jun-2012, (New in OTL
                4.0.266):<br>
                <br>
                <ul>
                  <li>The following two problems were reported:<br>
                    <br>
                  </li>
                  <ul>
                    <li>When #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_MSSQL_2008">OTL_ODBC_MSSQL_2008</a>
                      or #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_DB2_CLI">OTL_DB2_CLI</a>
                      is enabled, otl_lob_stream::<a href="https://otl.sourceforge.net/otl3_lob_stream.htm#len">len</a>() returns
                      lengths from previously fetched LOB values if the
                      current LOB value is NULL. The expectation is that
                      the function should return 0. <br>
                      <br>
                    </li>
                    <li>When #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UNICODE">OTL_UNICODE</a>
                      is enabled, and
                      otl_lob_stream::operator&gt;&gt;(otl_long_string&amp;)
                      or &lt;&lt;(const otl_long_string&amp;) is called
                      for reading / writing a binary LOB (not a
                      character LOB), OTL throws otl_exception <a href="https://otl.sourceforge.net/otl3_exc_list.htm#32038">32038</a>.<br>
                    </li>
                  </ul>
                </ul>
                <p>The problems are fixed in this release.<br>
                  <br>
                </p>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">12-May-2012, (New in OTL
                4.0.265 (updated)):<br>
                <br>
                <ul>
                  <li>This release has been successfully tested with DB2
                    LUW 10.1. #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_DB2_CLI">OTL_DB2_CLI</a>
                    should be used with DB2 10.1.<br>
                    <br>
                  </li>
                  <li>This release has been successfully tested with SQL
                    Server 2012. #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_MSSQL_2008">OTL_ODBC_MSSQL_2008</a>
                    should be used with SQL Server 2012, SQL Server 2008
                    Release 2, and SQL Server 2008.<br>
                  </li>
                </ul>
                <br>
                24-Apr-2012, New (in OTL 4.0.265):<br>
                <br>
                <ul>
                  <li>A problem was reported that the following line(s)
                    in the OTL header file cause a core dump in HPUX:<br>
                    <br>
                    &nbsp;&nbsp;&nbsp;&nbsp; <span style="font-family:
                      monospace;">static OTL_STRING_CONTAINER
                      delimiter(";");</span><br>
                    <br>
                    The problem is that for static-in-function non-POD
                    (plain old data) variables, the HPUX C++ registers
                    corresponding destructor calls as atexit() handlers,
                    which get called when main() returns. This is
                    problematic when static variables reside in a shared
                    object, which may be unloaded before main() returns.
                    Ideally, destructors of such static(-in-function)
                    variables should get called before the shared object
                    is unloaded. Most C++ compilers don't have such a
                    problem. HPUX C++ does, and some old versions of AIX
                    C++ (xlC) have similar behavior. The problem is
                    fixed in this release.<br>
                    <br>
                  </li>
                  <li>The following compilation problem was reported
                    when #define OTL_ODBC_TIMESTEN_WIN is used in
                    compilation with VC++ in 64-bit mode (#define
                    _WIN64) in Windows:<br>
                    <br>
                    <span style="font-family: monospace;">error C2664:
                      "SQLParamOptions" : cannot convert parameter 3
                      from "SQLUINTEGER *" into "SQLULEN *"</span><br style="font-family: monospace;">
                    <br>
                    The problem is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">19-Apr-2012, New (in
                4.0.264 (updated)):<br>
                <br>
                <ul>
                  <li>The F.A.Q. has been updated: a <a href="https://otl.sourceforge.net/otl3_faq.htm#MULTI_RS_SUPPORT">new Q&amp;A</a>
                    has been added to answer the question of whether OTL
                    can handle stored procedures that return multiple
                    implicit result sets or not (when used with ODBC, MS
                    SNAC, or DB2 CLI).</li>
                </ul>
                <br>
                14-Apr-2012, New (in OTL 4.0.264):<br>
                <br>
                <ul>
                  <li>A problem was reported that when <a href="https://otl.sourceforge.net/otl3_lob_stream.htm#OTL_LOB_STREAM_READ_STRING">otl_lob_stream::operator&gt;&gt;(std::string&amp;)</a>
                    is reading a BLOB (binary large object) value
                    containing 0 bytes ('\0') in it, the value gets
                    truncated to the very first 0 byte. It was not a
                    bug, it was a feature, meaning that std::strings
                    were meant to be used with character strings (not
                    binary strings), and the
                    otl_lob_stream::operator&gt;&gt;() used
                    std::string::operator+=(), which relied on the null
                    terminator byte in the string. This release and
                    higher will use std::string::append(const char*,
                    size_t len) instead, which does the concatenation
                    based on the "len" parameter.
                    otl_lob_stream::operator(ACE_TString&amp;) has the
                    same behavior (when #define OTL_ACE is used) as
                    otl_lob_stream::operator&gt;&gt;(std::string&amp;)
                    (when #define OTL_STL is used).<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">10-Apr-2012, New (in OTL
                4.0.263):<br>
                <br>
                <ul>
                  <li>More of C++11 features used in this release: copy
                    / move constructors, copy / move assignment
                    operators, etc., that were made private before, are
                    declared " = delete" (as deleted) for GNU C++ 4.7.0
                    and higher for better compiler diagnostic and
                    clarity of the interface.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">6-Apr-2012, New (in OTL
                4.0.262):<br>
                <br>
                <ul>
                  <li>A problem in&nbsp; <a href="https://otl.sourceforge.net/otl3_exception_class.htm">otl_exception</a>
                    class reported: when Visual C++&nbsp; 8 or higher is
                    used, and when the text of an SQL statement
                    (stm_text data member) is longer than the
                    sizeof(stm_text), Visual C++ runtime throws an
                    error. The problem is fixed in this release.<br>
                    <br>
                  </li>
                  <li>This release introduces the use of many C++11
                    features available in g++ 4.7.0 or higher under the
                    following new #define: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CPP_11_ON">OTL_CPP_11_ON</a>.
                    The OTL source code was modified to take advantage
                    of the C++11 new techniques and features, which
                    results in cleaner code. Support of C++11 features
                    is not even in different C++ compilers, so it had to
                    be conditionally compiled.<br>
                    <br>
                    When g++ 4.7.0 or higher is used, and when
                    -std=c++11 is enabled on the compilation command
                    line, I'd also recommend to add the following
                    warnings: -Wc++0x-compat
                    -Wzero-as-null-pointer-constant. The compiler will
                    tell you what's not kosher in your source code. OTL
                    build enables the warnings when -std=c++11 is
                    enabled on the command line.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">3-Apr-2012, New (in OTL
                4.0.261):<br>
                <br>
                <ul>
                  <li>This release introduces the following new OTL
                    defined exception in order to avoid confusion about
                    stored procedures returning <a href="https://otl.sourceforge.net/otl3_stream_class.htm#SP_RS">result sets</a>:<br>
                    <br>
                  </li>
                  <ul>
                    <li>code <a href="https://otl.sourceforge.net/otl3_exc_list.htm#32040">32040</a>,
                      this type of otl_stream can only have input
                      variables.<br>
                      <br>
                    </li>
                  </ul>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">30-Mar-2012, New (in OTL
                4.0.260):<br>
                <br>
                <ul>
                  <li>A memory leak was reported when <a href="https://otl.sourceforge.net/otl3_stream_pooling.htm">OTL stream pooling</a>
                    (#define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STREAM_POOLING_ON">OTL_STREAM_POOLING_ON</a>)
                    is used. The symptom is reproducible when
                    otl_stream::open() is called, and
                    otl_stream::~otl_stream() right after that. The
                    reporter of the problem says that the memory leak is
                    present in more circumstances. The problem is fixed
                    in this release.<br>
                    <br>
                  </li>
                  <li>More detail has been added to the descriptions of
                    otl_connect::<a href="https://otl.sourceforge.net/otl3_connect_class.htm#commit">commit</a>()

                    and otl_connect::<a href="https://otl.sourceforge.net/otl3_connect_class.htm#rollback">rollback</a>()

                    functions in order to clarify things.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">24-Mar-2012, New (in OTL
                4.0.259):<br>
                <br>
                <ul>
                  <li>GNU C++ 4.7.0 was released a few days ago. This
                    release of OTL compiles clean with G++ 4.7.0, and
                    all unit tests work correctly.<br>
                    <br>
                  </li>
                  <li>A problem was reported that when <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UNICODE">OTL_UNICODE</a>
                    is enabled and a variable of the <a href="https://otl.sourceforge.net/otl3_long_string.htm">otl_long_string</a>
                    class is used instead of otl_long_unicode_string by
                    mistake, it is hard to figure out what went wrong.
                    This release closes the loophole by introducing the
                    following two new OTL defined exceptions:<br>
                    <br>
                    <ul>
                      <li>code <a href="https://otl.sourceforge.net/otl3_exc_list.htm#32038">32038</a>,
                        otl_long_unicode_string should be used with
                        strings when OTL_UNICODE is enabled, and
                        otl_long_string should be use with strings when
                        OTL_UNICODE is not enabled<br>
                        <br>
                      </li>
                      <li>code <a href="https://otl.sourceforge.net/otl3_exc_list.htm#32039">32039</a>,
                        otl_long_string should be used with nonstrings
                        when OTL_UNICODE is enabled<br>
                        <br>
                      </li>
                    </ul>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">21-Mar-2012, New (in OTL
                4.0.258):<br>
                <br>
                <ul>
                  <li>GNU C++ 4.6.3 was released a few weeks ago. This
                    release of OTL compiles clean with G++ 4.6.3, and
                    all unit tests work correctly.<br>
                    <br>
                  </li>
                  <li>A problem was reported that when #define OTL_ODBC
                    / #define OTL_ODBC_MULTI_MODE is used with the
                    Oracle ODBC driver, and #define OTL_BIGINT / #define
                    OTL_STR_TO_BIGINT / #define OTL_BIGINT_TO_STR,
                    "bigint" values beyond 2GB do not get written / read
                    correctly. The problem is fixed in this release. <br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">29-Feb-2012, New (in OTL
                4.0.257):<br>
                <br>
                <ul>
                  <li>This release introduces the following new
                    functions when <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STREAM_POOLING_ON">OTL
                      stream pooling</a> is enabled: otl_connect::<a href="https://otl.sourceforge.net/otl3_connect_class.htm#stream_pool_enable">stream_pool_enable</a>(),

                    otl_connect::stream_pool_disable(),
                    otl_connect::get_stream_pool_enabled_flag().<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">12-Feb-2012, New (in OTL
                4.0.256):<br>
                <br>
                <ul>
                  <li>A problem was reported that when <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STREAM_POOLING_ON">OTL
                      stream pooling</a> is used with two identical
                    SELECT statements, which have the same otl_stream
                    buffer sizes, but have different sets of SELECT
                    output column overrides (made via calls to
                    otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#set_column_type">set_column_type</a>()),

                    the stream pool doesn't distinguish between the two
                    SELECT statements. The key in the stream pool was
                    the SQL statement text + stream buffer size. This
                    release extends the <a href="https://otl.sourceforge.net/otl3_stream_pooling.htm#stream_pool_key">stream

                      pool key</a> to take the SELECT output column
                    overrides into account.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">11-Feb-2012, New (in OTL
                4.0.255):<br>
                <br>
                <ul>
                  <li>This release introduces basic <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UBIGINT">optional</a>
                    native support for unsigned 64-bit integers in the
                    form of the following new bind variable type: <a href="https://otl.sourceforge.net/otl3_bind_variables.htm#ubigint">ubigint</a>.
                    Also, see OTL code example <a href="https://otl.sourceforge.net/otl4_ex243.htm">243</a>
                    (DB2), <a href="https://otl.sourceforge.net/otl4_ex698.htm">698</a> (Oracle
                    11.2).<br>
                    <br>
                    NOTICE: For database APIs that have no native
                    support for unsigned 64-bit ints, OTL <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_NUMERIC_TYPE_1">extended</a>
                    numeric types can be used, which were introduced in
                    OTL <a href="https://otl.sourceforge.net/otl3_whatn.htm#OTL40245">4.0.245</a>.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">21-Jan-2012, New (in OTL
                4.0.254):<br>
                <br>
                <ul>
                  <li>The following compilation problem was reported in
                    a 64-bit Linux, unixodbc 2.2.14, SQLite, and GNU C++
                    4.6.1:<br>
                    <br>
                    <span style="font-family: monospace;">error: cannot
                      convert ‘SQLUINTEGER* {aka unsigned int*}’ to
                      ‘SQLULEN* {aka long unsigned int*}’ for argument
                      ‘3’ to ‘SQLRETURN SQLParamOptions(SQLHSTMT,
                      SQLULEN, SQLULEN*)’ </span><br style="font-family: monospace;">
                    <br>
                    The problem has been fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">11-Jan-2012, New (in OTL
                4.0.253):<br>
                <br>
                <ul>
                  <li>The following compilation problem was reported in
                    OTL/DB2-CLI (#define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_DB2_CLI">OTL_DB2_CLI</a>),

                    when it's compiled in a 64-bit Windows in the 64-bit
                    mode: internal OTL_SQLLEN type (and others) were not
                    of the proper size for a 64 bit Windows system. The
                    problem is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">22-Dec-2011, New (in OTL
                4.0.252):<br>
                <br>
                <ul>
                  <li>A bug was reported that when an std::string has a
                    null terminator in the middle, and it gets written
                    into a VARCHAR table column via char[XXX] bind
                    variable, nothing gets written beyond the null
                    terminator. It's not quite a bug, it's a feature as
                    far as the cliche goes. OTL binds "NULL terminated
                    strings" with its char[XXX] bind variables. <br>
                    <br>
                    For strings with null terminators in the middle,
                    raw[XXX] binding should be used instead. In this
                    release, otl_stream's string (std::, or ACE, or user
                    defined) operator&gt;&gt;/&lt;&lt; have been
                    expanded to work with raw[XXX]. See also code
                    examples <a href="https://otl.sourceforge.net/otl4_ex747.htm">747</a> (Oracle,
                    OCI7), <a href="https://otl.sourceforge.net/otl4_ex748.htm">748</a> (Oracle,
                    OCI 8 or higher), <a href="https://otl.sourceforge.net/otl4_ex749.htm">749</a>
                    (DB2), <a href="https://otl.sourceforge.net/otl4_ex750.htm">750</a> (MS SQL).
                    It's easy to convert these new code examples to use
                    with other database types.<br>
                    <br>
                    A new <a href="https://otl.sourceforge.net/otl3_faq.htm#null_term">entry</a>
                    has been added to the F.A.Q. to cover the topic of
                    std::strings and embedded NULL characters.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">19-Dec-2011, New (in OTL
                4.0.251 (updated)):<br>
                <br>
                <ul>
                  <li>This release compiles clean with GNU C++ 4.3.x and
                    higher when the following command warning option is
                    enabled:<br>
                    <br>
                    <span style="font-family: monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

                      -Wc++0x-compat</span><br>
                    <br>
                    It's a C++0X / C++11 compatibility warning for GNU
                    C++.<br>
                  </li>
                </ul>
                <br>
                10-Dec-2011, New (in OTL 4.0.251): <br>
                <br>
                <ul>
                  <li>A bug was reported in otl_connect::<a href="https://otl.sourceforge.net/otl3_connect_class.htm#session_begin">session_begin</a>()

                    (OTL for Oracle), when it's used with Oracle 11.2
                    and empty user id / empty password (a.k.a. external
                    authentication, equivalent to "connect /" in
                    SQLPlus), it fails to authenticate the credentials.
                    The bug is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">24-Nov-2011, New (in OTL
                4.0.250):<br>
                <br>
                <ul>
                  <li>The following typos (bugs) were reported in copy
                    and move constructors in the <a href="https://otl.sourceforge.net/otl3_stream_class.htm#otl_column_desc">otl_column_desc</a>
                    class:<br>
                    <br>
                    <span style="font-family: monospace;">&nbsp;
                      otl_column_desc(const otl_column_desc&amp; desc):</span><br>
                    <span style="font-family: monospace;">&nbsp;&nbsp;&nbsp;

                      ...</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">&nbsp;&nbsp;&nbsp;

                      dbsize(desc.<span style="color: rgb(255, 0, 0);">dbtype</span>),</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">&nbsp;&nbsp;&nbsp;

                      ...</span><br>
                    <br>
                    <span style="font-family: monospace;">&nbsp;
                      otl_column_desc(otl_column_desc&amp;&amp; desc):</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">&nbsp;&nbsp;
                      ...<br>
                    </span><span style="font-family: monospace;">
                      &nbsp;&nbsp; dbsize(desc.<span style="color:
                        rgb(255, 0, 0);">dbtype</span>),</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">&nbsp;&nbsp;
                      ...</span><br>
                    <br>
                    which means that if otl_column_desc is used in
                    containers (std:: or any other) that implement copy
                    and / or move semantic, the dbsize data member will
                    be copied / moved incorrectly.<br>
                    <br>
                    The bugs are fixed in this release. The impact of
                    these typos seems to be pretty small, because any of
                    the OTL unit tests or the use of otl_column_desc in
                    actual OTL based C++ code haven't uncovered the
                    typos until now. Typically, otl_column_desc is not
                    used in any containers.<br>
                    <br style="font-family: monospace;">
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top; font-family: monospace;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">16-Nov-2011, New (in OTL
                4.0.249):<br>
                <br>
                <ul>
                  <li>A problem was reported in OTL/ODBC when it's used
                    with the SQLite 3 ODBC driver in the
                    SQLDescribeCol() function call when #define
                    OTL_UNICODE is enabled. The problem is that the
                    column name buffer size (4th parameter) is specified
                    in bytes instead of Unicode characters. The problem
                    is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">29-Oct-2011, New (in OTL
                4.0.248 (updated)):<br>
                <br>
                <ul>
                  <li>GNU C++ 4.6.2 was released on 10/26/2011. OTL
                    4.0.248 compiles clean with GNU C++ 4.6.2.<br>
                    <br>
                  </li>
                  <li>Two new code examples have been added:<br>
                    <br>
                  </li>
                  <ul>
                    <li>example <a href="https://otl.sourceforge.net/otl4_ex745.htm">745</a>, which
                      demonstrates how to use the UTF-8 client encoding
                      with OTL and PostgreSQL. The PostgreSQL ANSI ODBC
                      driver supports UTF-8 "out of the box".<br>
                      <br>
                    </li>
                    <li>example <a href="https://otl.sourceforge.net/otl4_ex746.htm">746</a>, which
                      demonstrates how to use #define: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA_CUSTOM_MAP_NUMBER_ON_SELECT">OTL_ORA_CUSTOM_MAP_NUMBER_ON_SELECT</a>,
                      introduced in OTL 4.0.247.<br>
                      <br>
                    </li>
                  </ul>
                </ul>
                13-Oct-2011, New (in OTL 4.0.248):<br>
                <br>
                <ul>
                  <li>This release introduces the following new
                    function: otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#get_error_state">get_error_stream</a>().

                    This function returns true if the stream is in the
                    "error state" and requires "cleaning". See also code
                    examples <a href="https://otl.sourceforge.net/otl3_ex65.htm">65</a>, <a href="https://otl.sourceforge.net/otl3_ex66.htm">66</a>, <a href="https://otl.sourceforge.net/otl3_ex67.htm">67</a>, <a href="https://otl.sourceforge.net/otl4_ex166.htm">166</a>.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">11-Oct-2011, New (in OTL
                4.0.247):<br>
                <br>
                <ul>
                  <li>This release introduces the following new #define:
                    <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA_CUSTOM_MAP_NUMBER_ON_SELECT">OTL_ORA_CUSTOM_MAP_NUMBER_ON_SELECT</a>.
                    This #define can be used to override the OTL default
                    numeric data type mapping on SELECT statements for
                    Oracle.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">08-Oct-2011, New (in OTL
                4.0.246):<br>
                <br>
                <ul>
                  <li>A problem was reported that
                    otl_stream::describe_next_out_var() returns an
                    incorrect result after
                    otl_stream::skip_to_end_of_row() was called. The
                    problem has been fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;"><a name="OTL40245"></a>02-Oct-2011,

                New (in OTL 4.0.245):<br>
                <br>
                <ul>
                  <li>OTL introduces the following new feature: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_NUMERIC_TYPE_1">extended</a>
                    numeric data types. Normally, that would be used for
                    numeric data types that are not supported by the
                    underlying database APIs, for example unsigned long
                    long, long double, etc. It's done in a form of sets
                    of #defines that specify the details of the new
                    numeric data types. Also, see example <a href="https://otl.sourceforge.net/otl4_ex741.htm">741</a>, <a href="https://otl.sourceforge.net/otl4_ex742.htm">742</a>, <a href="https://otl.sourceforge.net/otl4_ex743.htm">743</a>, <a href="https://otl.sourceforge.net/otl4_ex744.htm">744</a>.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">18-Sep-2011, New (in OTL
                4.0.244 (updated)):<br>
                <br>
                <ul>
                  <li>PostgreSQL 9.1 was just released, and I've already
                    been getting questions on whether OTL supports it or
                    not. All PosgtreSQL based unit tests + publicly
                    available code examples run cleanly against
                    PostgreSQL 9.1.<br>
                  </li>
                </ul>
                <br>
                10-Sep-2011, New (in OTL 4.0.244):<br>
                <br>
                <ul>
                  <li>A problem was reported when an SQL statement in an
                    otl_stream has a bind variable declaration with a
                    white space in it, the SQL statement silently fails
                    at runtime. Ideally, an OTL defined exception should
                    be thrown, instead of the stream returning incorrect
                    results. Generally speaking, OTL <a href="https://otl.sourceforge.net/otl3_bind_variables.htm#no_spaces">doesn't
                      allow</a> white spaces in bind variable
                    declarations. This release fixes the problem, and
                    introduces the following new OTL defined exception,
                    which gets thrown when a white space is found in a
                    bind variable declaration: <a href="https://otl.sourceforge.net/otl3_exc_list.htm#32037">SQL Statement has a
                      white space in bind variable declaration</a>. <br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">06-Sep-2011, New (in OTL
                4.0.243 (updated)):<br>
                <br>
                <ul>
                  <li>Fixed a few dead hyperlinks.<br>
                    <br>
                  </li>
                </ul>
                03-Sep-2011, New (in OTL 4.0.243):<br>
                <br>
                <ul>
                  <li>A compilation problem (missing functions /
                    operators in otl_stream class) were reported under
                    the following set of OTL related #defines:<br>
                    <br>
                    <span style="font-family: monospace;">#define
                      OTL_BIND_VAR_STRICT_TYPE_CHECKING_ON </span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">#define
                      OTL_ORA10G_R2</span><br style="font-family:
                      monospace;">
                    <span style="font-family: monospace;">#define
                      OTL_ORA_TIMESTAMP</span><br style="font-family:
                      monospace;">
                    <span style="font-family: monospace;">#define
                      OTL_STL</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">#define
                      OTL_EXCEPTION_IS_DERIVED_FROM_STD_EXCEPTION</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">#define
                      OTL_VALUE_TEMPLATE_ON</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">#define
                      OTL_ORA_DECLARE_COMMON_READ_STREAM_INTERFACE</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">#define
                      OTL_BIGINT ...</span><br style="font-family:
                      monospace;">
                    <span style="font-family: monospace;">#define
                      OTL_STR_TO_BIGINT(str,n) ...</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">#define
                      OTL_BIGINT_TO_STR(n,str) ...</span><br style="font-family: monospace;">
                    <br>
                    The problem is fixed in this release.<br>
                    <br>
                  </li>
                  <li>Several potential problems (memory leaks,
                    dereferencing NULL pointer, etc.) were reported
                    based on results of the Microsoft Visual Studio 2005
                    "Team Edition for Software Developers" / "Code
                    Analysis for C/C++". The problems have never been
                    reported or found in tests as actual problems. This
                    release fixes some of these potential problems, in
                    order to make the Microsoft tool happy.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">11-Aug-2011, New (in OTL
                4.0.242): <br>
                <br>
                <ul>
                  <li>Several potential problems (memory leaks, check
                    for assignment to self in operator =, pointer may be
                    NULL and could be dereferenced) were reported based
                    on results of <a href="http://www.klocwork.com/">klocwork</a>.
                    The problems have never been reported or found in
                    tests as actual problems. This release fixes the
                    potential problems, in order to make klocwork happy.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">31-Jul-2011, New (in OTL
                4.0.241 (updated 2)):<br>
                <br>
                <ul>
                  <li>The following new code example was contributed to
                    the OTL examples: <a href="https://otl.sourceforge.net/otl4_ex740.htm">740</a>.
                    It demonstrates how to use OTL with MySQL stored
                    procedures that have output parameters. MySQL ODBC
                    driver doesn't seem to support stored procedure
                    output parameters. The code example demonstrates a
                    technique that works around the limitation of the
                    MySQL ODBC driver. If somebody knows how to work
                    with stored procedure output parameters in a more
                    regular way, any info would be highly appreciated.<br>
                    <br>
                  </li>
                </ul>
                30-Jul-2011, New (in OTL 4.0.241 (updated)):<br>
                <br>
                <ul>
                  <li>This release compiles clean with GNU C++ 4.6.1,
                    which was released about a month ago.<br>
                  </li>
                </ul>
                <br>
                23-Jul-2011, New (in OTL 4.0.241):<br>
                <br>
                <ul>
                  <li>A compilation problem was reported with Visual C++
                    6.0, when #define OTL_ORAX (ORA7, ORA8,
                    ...ORA11G_R2) and OTL_STLPORT are used. The problem
                    is fixed in this release.<br>
                    <br>
                  </li>
                  <li>A compilation problem was reported in <a href="https://otl.sourceforge.net/otl3_input_iterator.htm">otl_input_iterator</a>
                    when it's compiled with GNU C++ 4.6.0 and when
                    64-bit ODBC Unix/Linux header files are used. The
                    problem is fixed in this release.<br>
                    <br>
                  </li>
                  <li>This release introduces the following new #define:
                    <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA_CUSTOM_FREE_TEMP_LOB">OTL_ORA_CUSTOM_FREE_TEMP_LOB</a>.
                    It addresses a problem of proper utilization when
                    temporary Oracle LOBs get created via dbms_lob
                    package, and get passed back into C++/OTL based
                    code. When this #define is enabled it adds a call to
                    OCILobFreeTemporary(), which deallocates the
                    corresponding OCI resources correctly.<br>
                    <br>
                  </li>
                  <li>This release introduces the following new #define:
                    <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STLPORT_USES_STD_ALIAS_NAMESPACE">OTL_STLPORT_USES_STD_ALIAS_NAMESPACE</a>.
                    It addresses a problem when OTL is used with <a href="http://stlport.org/">STLPort</a> (#define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STLPORT">OTL_STLPORT</a>
                    is enabled), and when STLPort is configured to use
                    __std_alias namespace.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">19-Jun-2011, New (in OTL
                4.0.240):<br>
                <br>
                <ul>
                  <li>This release introduces the following new #define:
                    <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_EXCEPTION_COPIES_INPUT_STRING_IN_CASE_OF_OVERFLOW">OTL_EXCEPTION_COPIES_INPUT_STRING_IN_CASE_OF_OVERFLOW</a>.
                    It allows <a href="https://otl.sourceforge.net/otl3_exception_class.htm">otl_exceptions</a>
                    to capture input string values in case of the OTL
                    defined exception "input value too large to fit into
                    the input buffer" (code <a href="https://otl.sourceforge.net/otl3_exc_list.htm#32005">32005</a>). For
                    more detail, see also code examples <a href="https://otl.sourceforge.net/otl4_ex205.htm">205</a>, <a href="https://otl.sourceforge.net/otl4_ex206.htm">206</a>, <a href="https://otl.sourceforge.net/otl4_ex207.htm">207</a>.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">7-Jun-2011, New (in OTL
                4.0.239):<br>
                <br>
                <ul>
                  <li>
                    <p>The following compilation problem was reported
                      under OTL/OCIx: <span style="font-size: 8pt;
                        font-family: &quot;Courier New&quot;;">error
                        C2039: 'get_prefetched_row_count' : is not a
                        member of 'otl_stream'. </span>The problem is
                      fixed in this release.<br>
                    </p>
                  </li>
                  <li>otl_stream::inc_next_ov() under OTL/OCIx was
                    reported to be <span style="font-style: italic;">public</span>
                    yet undocumented. The function (and one&nbsp; more
                    similar function) was made <span style="font-style:
                      italic;">protected</span>.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">1-Jun-2011, New (in OTL
                4.0.238):<br>
                <br>
                <ul>
                  <li>The following bug was reported in <a href="https://otl.sourceforge.net/otl3_stream_class.htm#get_dirty_buf_len">otl_stream::get_dirty_buf_len</a>():

the

function

sometimes

returns

-2

instead

of

0

when

used

with

SELECT

statements

under

OTL/OCIx.

The

bug

is

fixed

in

this

release.

Also,

a

few

code

                    examples have been added (examples <a href="https://otl.sourceforge.net/otl4_ex736.htm">736</a>, <a href="https://otl.sourceforge.net/otl4_ex737.htm">737</a>, <a href="https://otl.sourceforge.net/otl4_ex738.htm">738</a>, <a href="https://otl.sourceforge.net/otl4_ex739.htm">739</a>) for Oracle, DB2,
                    and MS SQL Server (a.k.a. major database types). The
                    code examples can be easily modified for OTL
                    supported minor database types. <br>
                    <br>
                  </li>
                  <li>A compilation problem was reported when OTL was
                    used with C++/CLI (Managed C++) and VC++ 2008. The
                    problem was that nullptr was #defined as 0 when it's
                    a legitimate keyword in C++/CLI. The problem is
                    fixed in this release.<br>
                    <br>
                    <span style="font-family: monospace;"></span> </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">25-May-2011, New (in OTL
                4.0.237):<br>
                <br>
                <ul>
                  <li>The following bug was reported in <a href="https://otl.sourceforge.net/otl3_stream_class.htm#get_dirty_buf_len">otl_stream::get_dirty_buf_len</a>():<span style="font-family: monospace;"></span> the
                    function doesn't return 1 (one) when rows, say, get
                    inserted into a table. A typical actual sequence of
                    returned values goes like this: 0,2,3... The bug is
                    fixed in this release. <br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">04-May-2011, New (in OTL
                4.0.236):<br>
                <br>
                <ul>
                  <li>Visual C++ 10 supports C++11 rvalue references and
                    move semantics. This release adds (conditionally
                    compilable for VC++ 10) public move constructors and
                    move assignment operators to OTL classes (<a href="https://otl.sourceforge.net/otl3_stream_class.htm#otl_column_desc">otl_column_desc</a>,
                    <a href="https://otl.sourceforge.net/otl3_long_string.htm">otl_long_string /
                      otl_long_unicode_string</a>) that already have
                    public copy constructors / copy assignment operators
                    (a.k.a. copyable /&nbsp; assignable classes), and
                    which also have pointers to big chunks of
                    memory&nbsp; allocated as separate memory blocks on
                    the heap. Now the same classes are&nbsp; movable,
                    which makes them more efficient with STL containers.
                    <br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">30-Apr-2011, New (in OTL
                4.0.235):<br>
                <br>
                <ul>
                  <li>Visual C++ 10 supports C++11 rvalue references and
                    move semantics. This release adds (conditionally
                    compilable for VC++ 10) private move constructors
                    and move assignment operators to OTL classes that
                    already have private copy constructors and copy
                    assignment operators, in order to keep the classes
                    from being used in STL containers. The reason why
                    such classes got private copy constructors and copy
                    assignment operators in the first place was that
                    they allocated unsharable database APIs resources. <br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">20-Apr-2011, New (in OTL
                4.0.234):<br>
                <br>
                <ul>
                  <li>The following Open VMS C++ compiler warning
                    was&nbsp; reported&nbsp; for a number of lines: <font><font size="2" face="Calibri, sans-serif"><br>
                        <br>
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

%CXX-W-CASTQUALTYP,

                        type qualifier is meaningless on cast type. <br>
                        <br>
                      </font></font>The warning is fixed in this
                    release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">19-Apr-2011, New (in OTL
                4.0.233):<br>
                <br>
                <ul>
                  <li>This release introduces the following new #defines
                    as optimization of the <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STREAM_POOLING_ON">OTL
                      stream pooling</a>:<br>
                    <br>
                  </li>
                  <ul>
                    <li><a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA_STREAM_POOL_ASSUMES_SAME_REF_CUR_STRUCT_ON_REUSE">OTL_ORA_STREAM_POOL_ASSUMES_SAME_REF_CUR_STRUCT_ON_REUSE</a><br>
                      <br>
                    </li>
                    <li><a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STREAM_POOL_USES_STREAM_LABEL_AS_KEY">OTL_STREAM_POOL_USES_STREAM_LABEL_AS_KEY</a>.
                      See code examples <a href="https://otl.sourceforge.net/otl3_ex113.htm">113</a>,
                      <a href="https://otl.sourceforge.net/otl3_ex114.htm">114</a>, <a href="https://otl.sourceforge.net/otl3_ex115.htm">115</a>, <a href="https://otl.sourceforge.net/otl4_ex602.htm">602</a>, <a href="https://otl.sourceforge.net/otl4_ex641.htm">641</a> for more detail.
                      If a similar example for your database type is
                      missing, one of the examples above can be used
                      because the examples are very similar.&nbsp; <br>
                      <br>
                    </li>
                  </ul>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">03-Apr-2011, New (in OTL
                4.0.232):<br>
                <br>
                <ul>
                  <li>GNU C++ 4.6.0 came out on March 25. This release
                    fixes the following g++ 4.6.0 compilation warning:
                    Line 23402, variable byte_lob_len is set but not
                    used.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">25-Mar-2011, New (in OTL
                4.0.231):<br>
                <br>
                <ul>
                  <li>The following compilation warnings were reported
                    when OTL compiles with GNU C++ 4.5.1: <br>
                    &nbsp;&nbsp;&nbsp; <br>
                    <span style="font-family: monospace;">warning:
                      tmp.tagTIMESTAMP_STRUCT::year may be used
                      uninitialized in this function</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">note:tmp.tagTIMESTAMP_STRUCT::year

                      was declared here</span><br style="font-family:
                      monospace;">
                    <span style="font-family: monospace;">warning:
                      tmp.tagTIMESTAMP_STRUCT::month may be used
                      uninitialized in this function</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">note:
                      tmp.tagTIMESTAMP_STRUCT::month was declared here</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">warning:
                      tmp.tagTIMESTAMP_STRUCT::day may be used
                      uninitialized in this function</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">note:
                      tmp.tagTIMESTAMP_STRUCT::day was declared here</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">warning:tmp.tagTIMESTAMP_STRUCT::hour

                      may be used uninitialized in this function</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">note:
                      tmp.tagTIMESTAMP_STRUCT::hour was declared here</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">warning:
                      tmp.tagTIMESTAMP_STRUCT::minute may be used
                      uninitialized in this function</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">note:
                      tmp.tagTIMESTAMP_STRUCT::minute was declared here</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">warning:
                      tmp.tagTIMESTAMP_STRUCT::second may be used
                      uninitialized in this function</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">note:
                      tmp.tagTIMESTAMP_STRUCT::second was declared here</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">warning:
                      tmp.tagTIMESTAMP_STRUCT::fraction may be used
                      uninitialized in this function</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">note:
                      tmp.tagTIMESTAMP_STRUCT::fraction was declared
                      here</span><br style="font-family: monospace;">
                    <br>
                    <br>
                    The warnings are fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">17-Mar-2011, New (in OTL
                4.0.230):<br>
                <br>
                <ul>
                  <li>&nbsp;The following compilation problem was
                    reported when OTL 4.0.229 is compiled with DB2
                    Client 8.x header files: "symbol
                    SQL_ATTR_INFO_PROGRAMNAME is not defined". The
                    problem is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;"><small>05-Mar-2011, New
                  (in OTL 4.0.229):</small><br>
                <br>
                <ul>
                  <li>A Visual C++ compilation error was reported when
                    #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC">OTL_ODBC</a>
                    and #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA_UTF8">OTL_ORA_UTF8</a>
                    are defined together in the same compilation unit:
                    error C2039: 'set_nls_flag' : is not a member of
                    'odbc::otl_var'. The error is fixed in this release.<br>
                    <br>
                  </li>
                  <li>The following new #define is introduced in this
                    release in order to address a "memory access
                    violation" error when OTL_ODBC and OTL_ORA_UTF8
                    enable two different instances of OTL in two
                    separate compilation units in the same program: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_CONTAINER_CLASSES_HAVE_OPTIONAL_MEMBERS">OTL_CONTAINER_CLASSES_HAVE_OPTIONAL_MEMBERS</a>.
                    <br>
                    <br>
                  </li>
                  <li>This release introduces a new function in the
                    otl_connect class: <a href="https://otl.sourceforge.net/otl3_connect_class.htm#set_prog_name">set_prog_name</a>().

                    The function allows an "application name" to be set
                    that shows up in the output of DB2 command line
                    processor's "list applications" command.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;"><small>24-Feb-2011, New
                  (in OTL 4.0.228 (updated))<br>
                  <br>
                </small>
                <ul>
                  <li><a href="mailto:swen729@gmail.com">Suryadi Wen</a>,
                    a database developer from Canada contributed some
                    useful information on Oracle <a href="https://otl.sourceforge.net/otl4_subscriber.htm">otl_subscriber</a> for
                    the following <a href="https://otl.sourceforge.net/otl3_faq.htm#ORA_PUB_SUB">question</a>
                    in the OTL F.A.Q.: Why don't my Oracle
                    otl_subscriber receive notifications on INSERT or
                    UPDATE or DELETE statements? <br>
                    <br>
                  </li>
                </ul>
                <small>5-Feb-2011, New (in OTL 4.0.228):<br>
                  <br>
                </small>
                <ul>
                  <li>A memory leak was reported in OTL/OCIx when&nbsp;
                    the same otl_stream is used with an otl_long_string
                    that has an&nbsp; internal buffer and then with
                    another otl_long_string that uses an external
                    buffer. The memory leak is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">26-Jan-2011, New (in OTL
                4.0.227):<br>
                <br>
                <ul>
                  <li>A missing <span style="font-family: monospace;">defined(__MVS__)</span>
                    clause in a&nbsp; #if statement was reported in OTL
                    4.0.226, line 9797, which results in a compilation
                    error when compiled with C++ on z/OS, IBM
                    mainframes:<br>
                    <br>
                    <span style="font-family: monospace;">#if
                      (defined(_MSC_VER)&amp;&amp;(_MSC_VER==1200)) //
                      VC 6++</span><br>
                    <br>
                    It should read as follows:<br>
                    <br>
                    <span style="font-family: monospace;">#if
                      (defined(_MSC_VER)&amp;&amp;(_MSC_VER==1200)<span style="color: rgb(204, 0, 0);">||defined(__MVS__)</span>)
                      // VC 6++ or C++ in MVS</span><br>
                    <br>
                    The problem is fixed in this release. <br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">25-Jan-2011, New (in OTL
                4.0.226):<br>
                <br>
                <ul>
                  <li>The following compilation problem was reported for
                    VC++ 2010, when #defines OTL_ORA8I, OTL_STL,
                    OTL_ANSI_CPP, and OTL_EXPLICIT_NAMESPACES are
                    enabled at the same time:<br>
                    <br>
                    <font size="+1"><small><span style="font-family:
                          monospace;">otlv4.h(32933): error C2143:
                          syntax error : missing ';' before '&lt;'</span><br style="font-family: monospace;">
                        <span style="font-family: monospace;">
                          otlv4.h(32933): error C2059: syntax error :
                          '&lt;'</span><br style="font-family:
                          monospace;">
                        <span style="font-family: monospace;">
                          otlv4.h(32933): error C2065: 'T' : undeclared
                          identifier</span><br style="font-family:
                          monospace;">
                        <span style="font-family: monospace;">
                          otlv4.h(32933): error C2059: syntax error :
                          'public'</span><br style="font-family:
                          monospace;">
                        <span style="font-family: monospace;">
                          otlv4.h(32933): error C2143: syntax error :
                          missing ';' before '{'</span><br style="font-family: monospace;">
                        <span style="font-family: monospace;">
                          otlv4.h(32933): error C2447: '{' : missing
                          function header (old-style formal list?)</span><br style="font-family: monospace;">
                        <span style="font-family: monospace;">
                          otlv4.h(32933): error C2039:
                          'output_iterator_tag' : is not a member of
                          'oracle::std'</span><br style="font-family:
                          monospace;">
                        <span style="font-family: monospace;">
                          otlv4.h(32933): error C2146: syntax error :
                          missing ';' before identifier
                          'iterator_category'</span><br style="font-family: monospace;">
                        <span style="font-family: monospace;">
                          otlv4.h(32933): error C2433:
                          'output_iterator_tag' : 'inline' not permitted
                          on data declarations</span><br style="font-family: monospace;">
                        <span style="font-family: monospace;">
                          otlv4.h(32933): error C4430: missing type
                          specifier - int assumed. Note: C++ does not
                          support default-int</span><br style="font-family: monospace;">
                        <span style="font-family: monospace;">
                          otlv4.h(32933): error C2065: 'T' : undeclared
                          identifier</span><br style="font-family:
                          monospace;">
                      </small><br>
                    </font>The problem is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;"><small>31-Dec-2010, New
                  (in OTL 4.0.225 (updated (2)):<br>
                  <br>
                </small>
                <ul>
                  <li>The following new example has been added in order
                    to demonstrate how use OTL/OCIx with PL/SQL
                    functions that return reference cursors: example <a href="https://otl.sourceforge.net/otl4_ex735.htm">735</a>.<br>
                    <br>
                    <br>
                  </li>
                </ul>
                <small>25-Dec-2010, New (in OTL 4.0.225 (updated)):<br>
                  <br>
                </small>
                <ul>
                  <li>The following new code examples have been added in
                    order to demonstrate how to use OTL with numbers
                    larger than signed 64-bit integer (&gt;19 digits).
                    The main assumption is that there is a "Big Number"
                    class that can hold many enough decimal significant
                    digits.<br>
                    <br>
                  </li>
                  <ul>
                    <li>Oracle: example <a href="https://otl.sourceforge.net/otl4_ex729.htm">729</a>,
                      <a href="https://otl.sourceforge.net/otl4_ex732.htm">732</a> (Unicode)<br>
                    </li>
                    <li>DB2: example <a href="https://otl.sourceforge.net/otl4_ex730.htm">730</a>,
                      <a href="https://otl.sourceforge.net/otl4_ex733.htm">733</a> (Unicode)<br>
                    </li>
                    <li>MS SQL Server: example <a href="https://otl.sourceforge.net/otl4_ex731.htm">731</a>,
                      <a href="https://otl.sourceforge.net/otl4_ex734.htm">734</a> (Unicode)<br>
                      &nbsp;<br>
                    </li>
                  </ul>
                </ul>
                <small>18-Dec-2010, New (in OTL 4.0.225):<br>
                  <br>
                </small>
                <ul>
                  <li>A compilation error was reported when OTL_STLPORT
                    and OTL_ORA11G_R2 are defined together. The error
                    was introduced in OTL 4.0.223 in the following <a href="https://otl.sourceforge.net/otl3_whatn.htm#223">fixes</a> for Visual C++ 10. The
                    compilation problem is fixed in this release.<br>
                    <br>
                  </li>
                  <li>A problem was reported in otl_lob_stream::len()
                    when OTL is used with Oracle 9i. The function may
                    return random values under some circumstances. The
                    problem seems to be specific to an OCI9 call, which
                    doesn't initialize an output variable. The problem
                    is fixed in this release: the variable gets
                    initialized before the call.<br>
                    <br>
                  </li>
                  <li>GNU C++ 4.5.2 was just released (16-Dec-2010).
                    This release of OTL compiles clean with GNU C++
                    4.5.2, and all unit tests run fine.<br>
                    <br>
                  </li>
                  <li>CODE CLEANUP. Incoming <a href="http://en.wikipedia.org/wiki/C%2B%2B0x">C++0x</a>
                    standard is going to introduce "nullptr" as a new
                    keyword, which is already supported by Visual C++
                    10. nullptr is a "new NULL pointer" that is of
                    nullptr_t type, and it's convertible to any pointer
                    type, but it's not interchangeable with 0. OTL
                    #defines&nbsp; nullptr as 0 for C++ compilers that
                    don't support nullptr yet. All 0s (zeroes) in the
                    OTL header file that are NULL pointers have been
                    replaced with nullptr in this release.<br>
                    <br>
                  </li>
                </ul>
                <small> </small></td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;"><small>03-Dec-2010, New
                  (in OTL 4.0.224):<br>
                  <br>
                </small>
                <ul>
                  <li>The following bug was reported when OTL/ODBC +
                    Unicode (UTF-16) is used with MS ACCESS ODBC driver:
                    <span style="font-style: italic;">Invalid precision
                      value</span>. The problem was in an
                    SQLBindParameter() ODBC call in the columnSize
                    parameter. The bug is fixed in the this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;"><small>25-Nov-2010, New
                  (in OTL 4.0.223 (updated)):<br>
                  <br>
                </small>
                <ul>
                  <li>This release has been successfully tested with
                    MySQL 5.5<br>
                    <br>
                    <br>
                  </li>
                </ul>
                <small>24-Nov-2010. New (in OTL 4.0.223 (updated)):<br>
                  <br>
                </small>
                <ul>
                  <li>The following new code examples to demonstrate how
                    to the SQL MERGE statement with OTL have been added
                    in this release:<br>
                    <br>
                  </li>
                  <ul>
                    <li>Oracle 9i and higher, example <a href="https://otl.sourceforge.net/otl4_ex726.htm">726</a></li>
                    <li>DB2, example <a href="https://otl.sourceforge.net/otl4_ex727.htm">727</a></li>
                    <li>MS SQL Server, example <a href="https://otl.sourceforge.net/otl4_ex728.htm">728</a><br>
                      <br>
                    </li>
                  </ul>
                </ul>
                <small><a name="223"></a>29-Oct-2010. New (in OTL
                  4.0.223):</small><br>
                <br>
                <ul>
                  <li>A bug was reported&nbsp; in the following
                    conditional compilation that checks for Visual C++
                    10: (_MSC_VER &gt;= 1500). _MSC_VER for Visual C++
                    10 is 1600. The bug is fixed in this release of OTL.<br>
                    <br>
                  </li>
                  <li>A bug was reported that when <a href="https://otl.sourceforge.net/otl3_output_iterator.htm">otl_output_iterator</a>
                    is derived from class _Outit under Visual C++ 10.
                    _Outit actually belongs to namespace std, which OTL
                    didn't declare correctly. The bug is fixed in this
                    release of OTL.<br>
                    <br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;"><small>23-Oct-2010. New
                  (in OTL 4.0.222):</small><br>
                <br>
                <ul>
                  <li>A bug was reported that when #define OTL_STL is
                    used, the OTL header file uses "using namespace
                    std", which pollutes the global namespace with names
                    from namespace std. This release of OTL fixes the
                    problem. <br>
                    <br>
                  </li>
                  <li>A compilation warning (C4996) was reported when
                    OTL is compiled with Visual C++ 2010 in Debug mode
                    and when&nbsp; #define OTL_STL is enabled. The Debug
                    mode of Visual C++ 2010 enables "#define _SECURE_SCL
                    1" by default, that is, it enables the so called
                    "Checked STL Iterators", which are supposed to help
                    debug STL iterators in custom C++ code. When
                    _SECURE_SCL is set to 0, the compilation warning
                    doesn't show up. The problem was that Visual C++
                    2010 changed its implementation of STL. Now, it
                    requires additional helper classes for Checked
                    Iterators to function properly. OTL defines <a href="https://otl.sourceforge.net/otl3_input_iterator.htm">otl_input_iterator</a>,
                    and <small><a href="https://otl.sourceforge.net/otl3_output_iterator.htm">otl_output_iterator</a></small>,
                    which need those extra helper classes. The problem
                    is fixed in this release. Checked Iterators now can
                    be used with OTL otl_input_iterator, and
                    otl_output_iterator.<br>
                  </li>
                </ul>
                <br>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;"><small>22-Sep-2010. New
                  (in OTL 4.0.221 (updated)):<br>
                  <br>
                </small>
                <ul>
                  <li>This release of OTL has been successfully tested
                    with PostgreSQL 9.0 and DB2 9.7.2.<br>
                  </li>
                </ul>
                <small><br>
                  13-Sep-2010. New (in OTL 4.0.221):<br>
                  <br>
                </small>
                <ul>
                  <li>The following OTL defined compilation error has
                    been relaxed / eliminated in this release: #error <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_BIGINT">OTL_BIGINT</a>
                    is not supported when OTL_ORAXX and OTL_ODBC. This
                    means that OTL supports "bigint" functionality when
                    more than one instatiation of OTL is enabled in the
                    same module. For example, when OTL_ODBC and
                    OTL_ORA11G are defined, or OTL_DB2_CLI and OTL_ORA7
                    are defined. Special thanks to <a href="mailto:mailto:kbac@hotbox.ru">Konstantin
                      Vasilyev</a> from Russia for providing the
                    necessary code changes.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;"><small>29-Aug-2010. New
                  (in OTL 4.0.220 updated (2)):<br>
                  <br>
                </small>
                <ul>
                  <li>The following code example for TimesTen has been
                    added to show how to use TT_BIGINT (64-bit integers)
                    <br>
                    with OTL: example <a href="https://otl.sourceforge.net/otl4_ex725.htm">725</a>.<br>
                    <br>
                  </li>
                </ul>
                <small>08-Aug-2010. New (in OTL 4.0.220 (updated)):<br>
                  <br>
                </small>
                <ul>
                  <li>GNU C++ 4.5.1 was just released (end of July,
                    2010). This version of OTL compiles clean with GNU
                    C++ 4.5.1, and all unit tests run fine.<br>
                    <br>
                  </li>
                </ul>
                <small>0<small>6</small>-Aug-2010. New (in OTL 4.0.220):<br>
                  <br>
                </small>
                <ul>
                  <li>This release introduces support for the following
                    ODBC/DB2-CLI data dictionary access function: <a href="https://otl.sourceforge.net/otl4_append_b.htm#SQLStatistics">SQLStatistics</a>().<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;"><small>17-July-2010. New
                  (in OTL 4.0.219):<br>
                  <br>
                </small>
                <ul>
                  <li>A problem was reported that the otl_stream
                    "auto-commit" flag is not available (after public
                    data members of the otl_stream class were made
                    private/protected at some point in time in OTL 4.0).
                    This release introduces the following new getter
                    function for getting the flag: otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#get_auto_commit_flag">get_auto_commit_flag</a>().<br>
                  </li>
                </ul>
                <br>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;"><small>27-June-2010. New
                  (in OTL 4.0.218 (updated)):<br>
                  <br>
                </small>
                <ul>
                  <li>I've been asked to add similar code examples (of
                    the bulk interface and LOBs) for MS SQL Server, and
                    DB2 at least. Here they go:</li>
                  <ul>
                    <li>DB2: examples <a href="https://otl.sourceforge.net/otl3_ex109.htm">109</a>,
                      <a href="https://otl.sourceforge.net/otl4_ex722.htm">722</a>;</li>
                    <li>MS SQL Server: examples <a href="https://otl.sourceforge.net/otl4_ex723.htm">723</a>, <a href="https://otl.sourceforge.net/otl4_ex724.htm">724</a>;<br>
                      <br>
                    </li>
                  </ul>
                </ul>
                <small>26-June-2010. New (in OTL 4.0.218):<br>
                  <br>
                </small>
                <ul>
                  <li>This version of OTL introduces OCI7 (<span style="font-style: italic;">classic OCI</span>)
                    support for the bulk interface for small Oracle LONG
                    RAWs (up to 64KB in size) via <a href="https://otl.sourceforge.net/otl3_bind_variables.htm#raw">raw</a>[XXX]
                    bind variable data type, and the bulk interface for
                    Oracle LONGs (the upper limit is not clear,
                    theoretically it could be up to 2GB) via <a href="https://otl.sourceforge.net/otl3_bind_variables.htm#char">char</a>[XXX]
                    bind variable data type. For more detail, see
                    examples <a href="https://otl.sourceforge.net/otl4_ex720.htm">720</a>, <a href="https://otl.sourceforge.net/otl4_ex721.htm">721</a>.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">23-June-2010. New (in OTL
                4.0.217):<br>
                <br>
                <ul>
                  <li>This version of OTL introduces support for the
                    bulk interface for small Oracle BLOBs (up to 64KB in
                    size) via <a href="https://otl.sourceforge.net/otl3_bind_variables.htm#raw">raw</a>[XXX]

                    bind variable data type, and the bulk interface for
                    Oracle CLOBs (the upper limit is not clear,
                    theoretically it could be up to 2GB) via <a href="https://otl.sourceforge.net/otl3_bind_variables.htm#char">char</a>[XXX]
                    bind variable data type. For more detail, see
                    examples <a href="https://otl.sourceforge.net/otl4_ex718.htm">718</a>, <a href="https://otl.sourceforge.net/otl4_ex719.htm">719</a>.<br>
                    <br>
                    Versions of OTL below 4.0.217 support the bulk
                    interface for small BLOBs (up to 32KB in size).<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">19-June-2010. New (in OTL
                4.0.216):<br>
                <br>
                <ul>
                  <li><a href="https://otl.sourceforge.net/otl4_postgresql_examples.htm">Examples</a>
                    for PostgreSQL have been modified to show the use of
                    the bulk interface (buffer sizes &gt; 1 for INSERT /
                    UPDATE / DELETE statements) for PostgreSQL 8.2 and
                    higher. Versions of the PostgreSQL ODBC drivers
                    higher than the version of the PostgreSQL server can
                    be used together. For example, server version 8.1
                    works with PostgreSQL ODBC driver version 8.4 (and
                    this version of the driver supports the bulk
                    interface even with PostgreSQL server 8.1).<br>
                    <br>
                  </li>
                </ul>
                05-June-2010. New (in OTL 4.0.216):<br>
                <br>
                <ul>
                  <li>An Oracle error was reported in otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#create_stored_proc_call">create_stored_proc</a>(),

                    when it's used with Oracle 10.2. The bug is fixed in
                    this release.<br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">28-May-2010. New (in OTL
                4.0.215):<br>
                <br>
                <ul>
                  <li>A few C++ compilation warnings were reported when
                    compiling with the latest cygwin (version 1.7.5, I
                    believe). The warnings have been fixed in this
                    release. <br>
                    &nbsp; <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">19-Apr-2010. New (in OTL
                4.0.214, updated (2)):<br>
                <br>
                <ul>
                  <li>GNU C++ 4.5.0 was released recently. OTL 2.0.214
                    compiles clean with g++ 4.5.0, and all OTL tests
                    from the OTL test suite run correctly.</li>
                </ul>
                <br>
                18-Apr-2010. New (in OTL 4.0.214, updated):<br>
                <br>
                <ul>
                  <li>Visual C++ Studio 2010 (version 10) was released
                    recently. OTL 2.0.14 compiles clean with VC++ 10,
                    and all OTL tests from the OTL test suite run
                    correctly.<br>
                    <br>
                  </li>
                </ul>
                02-Apr-2010. New (in OTL 4.0.214):<br>
                <br>
                <ul>
                  <li><a name="BUG1"></a>A bug was reported that when
                    OTL/OCIx (x&gt;=8) is used together with the <a href="https://otl.sourceforge.net/otl3_lob_stream.htm">LOB stream class</a>,
                    in case of an UPDATE statement that updates 0 rows,
                    OTL throws the Oracle "Invalid LOB locator"
                    exception. otl_lob_stream::<a href="https://otl.sourceforge.net/otl3_lob_stream.htm#close">close</a>()
                    function was modified to accommodate this special
                    condition, and OTL code examples <a href="https://otl.sourceforge.net/otl3_ex56.htm">56</a>, and <a href="https://otl.sourceforge.net/otl3_ex57.htm">57</a> were modified to show
                    how to use it.<br>
                    <br>
                  </li>
                  <li>A bug similar to the <a href="https://otl.sourceforge.net/otl3_whatn.htm#BUG1">first bug</a>
                    was found, when&nbsp; OTL/OCIx (x&gt;=8) is used
                    without the LOB stream class, in case if an UPDATE
                    statement updates 0 rows. The bug is fixed in this
                    release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">19-Mar-2010. New (in OTL
                4.0.213, updated):<br>
                <br>
                <ul>
                  <li><a href="https://otl.sourceforge.net/otl3_comm.htm">What's New</a> Page has
                    been updated to reflect the traffic to the OTL Web
                    site.<br>
                    <br>
                  </li>
                </ul>
                10-Mar-2010. New (in OTL 4.0.213):<br>
                <br>
                <ul>
                  <li>This release introduces the following new #define
                    in order to address compatibility issues with some
                    frameworks, and transaction monitors: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ROLLS_BACK_BEFORE_LOGOFF">OTL_ROLLS_BACK_BEFORE_LOGOFF</a>.
                    <br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">07-Mar-2010. New (in OTL
                4.0.212):<br>
                <br>
                <ul>
                  <li>This release of OTL introduces the following new
                    #defines in order to address a need for mapping
                    DECIMAL / NUMERIC to signed 64-bit integers on
                    SELECT statements instead of doubles: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_MAP_SQL_DECIMAL_TO_OTL_BIGINT">OTL_MAP_SQL_DECIMAL_TO_OTL_BIGINT</a>,
                    <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_MAP_SQL_NUMERIC_TO_OTL_BIGINT">OTL_MAP_SQL_DECIMAL_TO_OTL_BIGINT</a>.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">28-Feb-2010. New (in OTL
                4.0.211, updated):<br>
                <br>
                <ul>
                  <li>GNU C++ 4.4.3 was released a month ago. This
                    release of OTL compiles clean with g++ 4.4.3.<br>
                    <br>
                  </li>
                </ul>
                25-Feb-2010. New (in OTL 4.0.211): <br>
                <br>
                <ul>
                  <li>A bug was reported that when otl_stream is
                    instantiated with an otl_connect object that is not
                    connected to the database, OTL/OCI10G throws an
                    otl_exception with seemingly random error message
                    and error code. This release introduces the
                    following new #define that can be used as a
                    workaround: #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STREAM_THROWS_NOT_CONNECTED_TO_DATABASE_EXCEPTION">OTL_STREAM_THROWS_NOT_CONNECTED_TO_DATABASE_EXCEPTION</a>.
                    The #define needs to be enabled before including the
                    OTL header file. OTL will throw the <a href="https://otl.sourceforge.net/otl3_exc_list.htm#32036">not-connected-to-database</a>
                    exception in case if the otl_connect::connected flag
                    is 0. <br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">18-Feb-2010. New (in OTL
                4.0.210, updated):<br>
                <br>
                <ul>
                  <li>A problem was reported that T-SQL stored
                    procedures that have INSERTs / UPDATEs / DELETEs
                    don't work with OTL. An <a href="https://otl.sourceforge.net/otl3_faq.htm#SET_NOCOUNT_ON">explanation</a>
                    has been added to the OTL F.A.Q.<br>
                    <br>
                  </li>
                </ul>
                20-Jan-2010: New (in 4.0.210):<br>
                <br>
                <ul>
                  <li>A complition problem was reported when #define
                    OTL_EXCEPTION_IS_DERIVED_FROM_STD_EXCEPTION is
                    defined and g++ 4.1.2 is used. The problem is fixed
                    in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">17-Jan-2010: New (in
                4.0.209):<br>
                <br>
                <ul>
                  <li>This release introduces a new Oracle SQL tool
                    neutral <a href="https://otl.sourceforge.net/otl3_bind_variables.htm#sql_neut_bvar">syntax</a>
                    for bind variables. The rationale for the new
                    feature is that OTL extended bind variable syntax
                    should be transparent for the SQL tools. Also, see
                    code example <a href="https://otl.sourceforge.net/otl4_ex717.htm">717</a>. <br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">03-Jan-2010: New (in OTL
                4.0.208):<br>
                <br>
                <ul>
                  <li>OTL <a href="https://otl.sourceforge.net/otl3_whatn.htm#40181">4.0.181</a>
                    introduced&nbsp;otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#check_end_of_row">check_end_of_row</a>()

(and

                    the otl_stream manipulator <span style="font-style:
                      italic;">endr</span>) in order to address the "<a href="http://soci.sourceforge.net/doc/rationale.html">row-tearing</a>"
                    problem in SELECT statements. This release of OTL
                    extends the check_end_of_row() function (and the
                    endr stream manipulator) to do the end-of-row
                    checking for INSERT / UPDATE / DELETE statements as
                    well as calls to stored procedures / anonymous
                    PL/SQL blocks. the endr (end-of-row) stream
                    manipulator is designed to be similar to C++
                    standard std::endl and std::ends stream manipulators
                    at least by usage, for example:<br>
                    <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="font-family: monospace;">s&gt;&gt;f1&gt;&gt;f2&gt;&gt;endr;<br>
                      &nbsp;&nbsp; ...<br>
                      <span style="font-family: monospace;">&nbsp;&nbsp;
                        o&lt;&lt;&lt;/span>f1&lt;&lt;f2&lt;&lt;endr;<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
                    What it means is that when <span style="font-style:
                      italic;">endr</span> is called at the end of each
                    operator &gt;&gt;/&lt;&lt; chain, it calls
                    otl_stream::check_end_of_row(), which check the "end
                    of row" condition. At least syntactically it looks
                    very similar to the following:<br>
                    <br>
                    &nbsp;&nbsp;&nbsp;&nbsp; <span style="font-family:
                      monospace;">o&lt;&lt;f1&lt;&lt;f1&lt;&lt;endl;</span><br>
                    <br>
                    endr is recommended for use in long term projects,
                    when over time the table layout may change, and the
                    OTL based C++ code may get out of sync with the
                    table layout. At least, the end-of-row check will
                    catch that. See also the following new code
                    examples:<br>
                    <br>
                    <ul>
                      <li>Oracle (OCI7): example <a href="https://otl.sourceforge.net/otl4_ex710.htm">710</a>;<br>
                      </li>
                      <li>Oracle (OCI8 and higher): example <a href="https://otl.sourceforge.net/otl4_ex711.htm">711</a>;</li>
                      <li>DB2 CLI: example <a href="https://otl.sourceforge.net/otl4_ex712.htm">712</a>;</li>
                      <li>MS SQL Server: example <a href="https://otl.sourceforge.net/otl4_ex713.htm">713</a>;</li>
                      <li>Sybase: example <a href="https://otl.sourceforge.net/otl4_ex714.htm">714</a>;</li>
                      <li>MySQL: example <a href="https://otl.sourceforge.net/otl4_ex715.htm">715</a>;<br>
                      </li>
                      <li>PostgreSQL: example <a href="https://otl.sourceforge.net/otl4_ex716.htm">716</a>.<br>
                        <br>
                      </li>
                    </ul>
                    For database types that are not in the list (above),
                    the same code can be used with appropriate&nbsp;
                    database type specific #define's, and table columns.<br>
                    <br>
                  </span></span></li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">27-Dec-2009: New (in OTL
                4.0.207 updated (2) ):<br>
                <br>
                <ul>
                  <li>The following PostgreSQL code samples have been
                    added (by popular demand!) in order to show how to
                    use OTL with PostgreSQL XML data type. See examples:
                    <a href="https://otl.sourceforge.net/otl4_ex706.htm">706</a>, <a href="https://otl.sourceforge.net/otl4_ex707.htm">707</a>, <a href="https://otl.sourceforge.net/otl4_ex708.htm">708</a>, <a href="https://otl.sourceforge.net/otl4_ex709.htm">709</a>.<br>
                    <br>
                  </li>
                </ul>
                20-Dec-2009: New (in OTL 4.0.207 updated):<br>
                <br>
                <ul>
                  <li>A few questions were asked whether OTL supported
                    Unicode for MySQL / MyODBC or not. OTL/ODBC 4.0.207
                    has been successfully tested with MySQL / MyODBC 5.1
                    connector (which is the latest version at this point
                    in time). A set on new <a href="https://otl.sourceforge.net/otl4_mysql_unicode_examples.htm">OTL code
                      examples</a> has been added to demonstrate how
                    OTL/ODBC works with MyODBC 5.1 connector and
                    Unicode.<br>
                    <br>
                    <br>
                  </li>
                </ul>
                13-Dec-2009: New (in OTL 4.0.207):<br>
                <br>
                <ul>
                  <li>A problem was reported that otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#eof">eof</a>() doesn't
                    return 1 after a call to otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#clean">clean</a>()
                    when the stream was instantiated with a SELECT
                    statement. The problem is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">12-Dec-2009. New (in OTL
                4.0.206):<br>
                <br>
                <ul>
                  <li>A problem was reported that otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#create_stored_proc_call">create_stored_proc_call</a>()

function

doesn't

recognize&nbsp;

PL/SQL

global

stored

procedures

with

no

parameters

(Oracle).

The

bug

is

fixed

in

this

release.

Also,

an

example

of

a

global

stored

procedure

without

any

parameters

was

added

to

code

example

                    <a href="https://otl.sourceforge.net/otl4_ex153.htm">153</a>.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">29-Nov-2009. New (in OTL
                4.0.205 updated):<br>
                <br>
                <ul>
                  <li>NEW GNU C++ COMPILER VERSION. G++ 4.4.2 was
                    released back in mid-October. OTL 4.0.205 was
                    verified to compile clean and tested with G++ 4.4.2.<br>
                  </li>
                </ul>
                <br>
                26-Nov-2009: New (in OTL 4.0.205):<br>
                <br>
                <ul>
                  <li>A problem was reported that in OTL/OCI10-11, <a href="https://otl.sourceforge.net/otl4_subscriber.htm">otl_subscriber</a>
                    class doesn't report simultaneous UPDATE / INSERT /
                    DELETE events that are happening to the same row.
                    The problem is fixed in this release.<br>
                    <br>
                    Happy Thanksgiving to everybody in US!<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">22-Oct-2009. New (in
                OTL.4.204):<br>
                <br>
                <ul>
                  <li>A problem was reported in OTL/OCI8-11 (under
                    #define OTL_ORA8-11). The problem is that <a href="https://otl.sourceforge.net/otl3_connect_class.htm">otl_connect</a>
                    leaks memory when used in a series of unsuccessful
                    rlogon() calls (database connection requests are
                    unsuccessful because, say, TNS name couldn't be
                    resolved, or the database account credentials are
                    invalid). The problem is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">1-Oct-2009. New (in
                OTL4.0.203):<br>
                <br>
                <ul>
                  <li>DB2 UDB 9.7 was released this past summer. This
                    release has been successfully compiled and tested
                    with DB2 9.7. DB2 9.7 introduced new data type:
                    timestamp(N), where N in [0..12]. OTL only supports
                    precision up to 9 digits (nanoseconds). So, <a href="https://otl.sourceforge.net/otl3_stream_class.htm#otl_datetime">otl_datetime</a>::frac_pecision

                    can be set as high as 9. I'll implement DB2 9.7
                    timestamp's precision in [10..12] range at some
                    point in the future when somebody requests the
                    feature.<br>
                    <br>
                  </li>
                </ul>
                29-Sep-2009. New (in OTL4.0.203):<br>
                <br>
                <ul>
                  <li>The following GNU C++ compilation error was
                    reported when <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA11G">OTL_ORA11G</a>,
                    <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA7_TIMESTAMP_TO_STRING">OTL_ORA7_TIMESTAMP_TO_STRING</a>
                    <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UNICODE">OTL_UNICODE</a>,
                    and <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UNICODE_CHAR_TYPE">OTL_UNICODE_CHAR_TYPE</a>
                    are defined together:<br>
                    <br>
                    <span style="font-family: monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

                      operator "defined" requires an identifier<br>
                      <br>
                    </span>The error is fixed in this release.<span style="font-family: monospace;"><br>
                    </span></li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">20-Sep-2009. New (in
                OTL4.0.202):<br>
                <br>
                <ul>
                  <li>Oracle 11g Release 2 (11.2) was released recently.
                    This release of OTL introduces support for Oracle
                    11.2 via #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA11G_R2">OTL_ORA11G_R2</a>.
                    Also, OTL 4.0.202 supports signed 64-bit integers
                    natively for both 32-bit and 64-bit platforms (via
                    OCI 11.2's new feature for signed 64-bit ints) when
                    OTL_ORA11G_R2 is defined. So, there is no need to
                    use string-to-64-bit-int / 64-bit-int-to-string
                    emulation (#define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_BIGINT_TO_STR">OTL_BIGINT_TO_STR</a>,
                    <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STR_TO_BIGINT">OTL_STR_TO_BIGINT</a>)
                    for Oracle 11.2. For more detail, see two new code <a href="https://otl.sourceforge.net/otl4_ora112_examples.htm">examples</a> for
                    Oracle 11.2:<br>
                    <br>
                    <ul>
                      <li>native support for signed 64-bit ints for
                        Oracle 11.2</li>
                      <li>direct path data loading via optimizer hint
                        /*+APPEND_VALUES*/ for Oracle 11.2<br>
                      </li>
                    </ul>
                    <br>
                  </li>
                  <li>TimesTen 11.2 was released recently at the same
                    time as Oracle 11.2 (Oracle Corporation actually
                    acquired <a href="http://www.timesten.com/">TimesTen</a>
                    back in 2005). OTL 4.0.202 was tested successfully
                    with TimesTen 11.2<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">5-Sep-2009. New (in OTL
                4.0.201):<br>
                <br>
                <ul>
                  <li>I was asked to provide a few code examples for the
                    new features introduced in OTL 4.0.200:</li>
                </ul>
                <br>
                <ul>
                  <ul>
                    <li>Oracle OCI7 (classic OCI), examples <a href="https://otl.sourceforge.net/otl4_ex690.htm">690</a>, <a href="https://otl.sourceforge.net/otl4_ex691.htm">691</a></li>
                  </ul>
                  <ul>
                    <li>Oracle OCI8 and higher, examples <a href="https://otl.sourceforge.net/otl4_ex692.htm">692</a>, <a href="https://otl.sourceforge.net/otl4_ex693.htm">693</a></li>
                  </ul>
                  <ul>
                    <li>DB2 CLI, examples <a href="https://otl.sourceforge.net/otl4_ex694.htm">694</a>,
                      <a href="https://otl.sourceforge.net/otl4_ex695.htm">695</a></li>
                  </ul>
                  <ul>
                    <li>MS SQL Server 2008 SNAC, examples <a href="https://otl.sourceforge.net/otl4_ex696.htm">696</a>, <a href="https://otl.sourceforge.net/otl4_ex697.htm">697</a></li>
                  </ul>
                  <ul>
                    <li>For other supported database types, examples can
                      be derived from example 690-697.<br>
                      <br>
                    </li>
                  </ul>
                  <li>OTL Web Site Stats Report was added to the "<a href="https://otl.sourceforge.net/otl3_comm.htm">Users' Comments / OTL Web
                      Stats</a>" page.<br>
                    <br>
                  </li>
                  <li>A problem was reported that
                    operator&lt;&lt;(ostream&amp;,const
                    otl_value&lt;otl_datetime&gt;&amp;) can't be
                    overloaded because the OTL header file already
                    defines such an operator. New #define <small><a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_DISABLE_OPERATOR_GT_GT_FOR_OTL_VALUE_OTL_DATETIME">OTL_DISABLE_OPERATOR_GT_GT_FOR_OTL_VALUE_OTL_DATETIME</a></small>
                    is introduced in this release to disable
                    operator&lt;&lt;(ostream&amp;,const
                    otl_value&lt;otl_datetime&gt;&amp;) in the OTL
                    header file.<br>
                    <br>
                  </li>
                  <li>Documentation bug was reported in otl_subscriber::<a href="https://otl.sourceforge.net/otl4_subscriber.htm#OnException">OnException</a>()

                    function. OTL 4.0.200 code <a href="https://otl.sourceforge.net/otl3_whatn.htm#40200_CODE_CLEANUP">cleanup</a> changed the
                    function signature (OTL_CONST_EXCEPTION was added to
                    the function's parameter), but the change was not
                    reflected in the manual. The documentation bug is
                    fixed in this release.<br>
                  </li>
                </ul>
                <br>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">30-Aug-2009. New (in OTL
                4.0.200):<br>
                <br>
                Gerrit Hobbelt from Netherlands contributed a few ideas,
                bug reports, bug fixes, and some code for new
                functionality. I adapted most of them and had to rework
                the rest for this new release of OTL. I also fixed a
                couple of unrelated bugs:<br>
                <br>
                <ul>
                  <li>BUG: When a fractional part ("fraction") of
                    otl_datetime has more decimal significant digits
                    than MS SQL Server 2005/2008 can handle, say, the
                    fractional part is .1234 for a datetime table
                    column, or .12345678 for a datetime2 table column,
                    MS SQL Server returns an error. It is actually a
                    known feature of MS SQL Server. MSDN Web site
                    describes a workaround, but it isn't clear whether
                    it would work with the rest of the database types,
                    supported by OTL. This release of OTL uses the
                    otl_datetime.frac_precision to truncate the decimal
                    significant digits beyond the specified precision.
                    Such databases as Oracle, or DB2 don't return an
                    error when the second fractional part is larger than
                    the corresponding timestamps data types can handle.
                    However, the timestamp values don't get rounded up
                    or truncated correctly by the databases. So, it's
                    recommended that the timestamp values should be
                    within the specified precision. OTL will truncate
                    the redundant decimal significant digits, which is
                    more correct than it was before. <br>
                    <br>
                  </li>
                  <li>BUG: In two <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_TRACE">OTL

                      tracing</a> statements, calls to
                    otl_stream::describe_next_out_var(),
                    otl_stream::describe_next_in_var() may return 0
                    pointers, which may results in the program crash. In
                    this release, the checks for 0 pointers were added
                    to the OTL tracing statements in order to prevent
                    the program crash.<br>
                    <br>
                  </li>
                  <li>BUG: When #define OTL_ODBC is used, an otl_connect
                    object doesn't recover well after an unsuccessful
                    call to SQLAllocHandle(). The otl_connect object
                    could be destroyed and recreated again as a
                    workaround, but it's not desirable. The bug is fixed
                    in this release.<br>
                    <br>
                  </li>
                  <li>BUG: A problem was reported that when Oracle RAW
                    columns are used with :v&lt;raw[xxx]&gt; bind
                    variables, and when a RAW NULL value is written into
                    the stream, then sometimes all the subsequent RAW
                    values get written as NULLs. The bug is fixed in
                    this release.<br>
                    <br>
                  </li>
                  <li>BUG: A problem was reported that when
                    :v&lt;varchar_long&gt; is used in the WHERE clause
                    of a SELECT statement with PostgreSQL, it doesn't
                    work. The problem was that very few database types
                    allow &lt;varchar_long&gt; to be used in a WHERE
                    clause, and OTL didn't implement it properly. The
                    bug is fixed in this release.<br>
                    <br>
                  </li>
                  <li>TYPOS: Two typos were fixed in&nbsp; "operator
                    &gt;&gt;" in OTL tracing statements. "operator
                    &gt;&gt;"'s were changed to "operator &lt;&lt;" to
                    show the right operator names. Anybody who has "OTL
                    tracing based log parser" scripts may want to run
                    tests to check to see whether the scripts still work
                    correctly.<br>
                    <br>
                  </li>
                  <li><a name="40200_CODE_CLEANUP"></a>CODE CLEANUP: A
                    few references to otl_exception&amp; within the OTL
                    header file were changed to OTL_CONST_EXCEPTION
                    otl_exception&amp;. #define OTL_CONST_EXCEPTION is
                    defined as <span style="font-style: italic;">const</span>
                    under #define OTL_ANSI_CPP, otherwise it is empty.<br>
                    <br>
                  </li>
                  <li>NEW FUNCTIONALITY: OTL used the US date format in
                    <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_TRACE">OTL tracing</a>
                    statements. This release introduces the following
                    two new #defines that parameterize the data format
                    in OTL trace statements: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_TRACE_FORMAT_DATETIME">OTL_TRACE_FORMAT_DATETIME</a>,
                    <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_TRACE_FORMAT_DATETIME">OTL_TRACE_FORMAT_TZ_DATETIME</a>.<br>
                    <br>
                  </li>
                  <li>NEW FUNCTIONALITY: This release introduces two new
                    functions:<br>
                    <ul>
                      <li><a href="https://otl.sourceforge.net/otl3_stream_class.htm#skip_to_end_of_row">otl_stream::skip_to_end_of_row</a>,
                        <a href="https://otl.sourceforge.net/otl4_refcur_stream.htm#skip_to_end_of_row">otl_refcur_stream::skip_to_end_of_row</a>.<small><small><br>
                          </small></small></li>
                      <li><a href="https://otl.sourceforge.net/otl3_stream_class.htm#get_prefetched_row_count">get_prefetched_row_count<br>
                          <br>
                        </a></li>
                    </ul>
                  </li>
                  <li>NEW COMPILER VERSION: This release compiles clean
                    with GNU C++ 4.4.1, which was released a month ago.<br>
                    <br>
                  </li>
                  <li>OTL LICENSE: The OTL license hasn't changed since
                    1996. It was a one clause Free Software license. I
                    heard a fair amount of criticism about the OTL
                    license being a "non-license", etc. This release
                    (and subsequent releases) will use the official,
                    two-clause text of Open BSD license:<br>
                    <br>
                    <span style="font-family: monospace;">// ORACLE,
                      ODBC and DB2/CLI Template Library, Version
                      4.0.200,</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">// Copyright
                      (C) 1992-2011, Sergei Kuchin (skuchin@gmail.com)</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">// </span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">// This
                      library is free software. Permission to use, copy,
                      modify,</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">// and/or
                      distribute this software for any purpose with or
                      without fee</span><br style="font-family:
                      monospace;">
                    <span style="font-family: monospace;">// is hereby
                      granted, provided that the above copyright notice
                      and</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">// this
                      permission notice appear in all copies. </span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">//</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">// THE
                      SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR
                      DISCLAIMS ALL WARRANTIES</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">// WITH REGARD
                      TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
                      OF</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">//
                      MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
                      AUTHOR BE LIABLE FOR</span><br style="font-family:
                      monospace;">
                    <span style="font-family: monospace;">// ANY
                      SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
                      DAMAGES OR ANY DAMAGES</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">// WHATSOEVER
                      RESULTING FROM LOSS OF USE, DATA OR PROFITS,
                      WHETHER IN AN</span><br style="font-family:
                      monospace;">
                    <span style="font-family: monospace;">// ACTION OF
                      CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
                      ARISING OUT OF</span><br style="font-family:
                      monospace;">
                    <span style="font-family: monospace;">// OR IN
                      CONNECTION WITH THE USE OR PERFORMANCE OF THIS
                      SOFTWARE.</span><br style="font-family:
                      monospace;">
                    <span style="font-family: monospace;">//</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">// a.k.a. as <a href="http://www.openbsd.org/cgi-bin/cvsweb/%7Echeckout%7E/src/share/misc/license.template">Open

                        BSD license<br>
                        <br>
                      </a></span>See the OTL header file (otlv4.h) for
                    more detail .<br>
                    <br>
                    The first clause states the same thing as the OTL
                    old license. The second clause states that "The
                    Software" is provided "AS IS". If anybody has any
                    concerns about this change in the text of OTL
                    license, please, let me know.</li>
                </ul>
                <br>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">15-Aug-2009. New (in OTL
                4.0.199):<br>
                <br>
                <ul>
                  <li>Copy constructor and assignment operator were
                    reported to be missing from <a href="https://otl.sourceforge.net/otl3_long_string.htm">otl_long_unicode_string</a>
                    class. The bug is fixed in this release.<br>
                    <br>
                  </li>
                  <li>A link to OTL code example 454 (for PostgreSQL)
                    was reported to be broken. The link is fixed in this
                    release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">02-Aug-2009. New (in OTL
                4.0.198, updated):<br>
                <br>
                <ul>
                  <li>OTL 4.0.198 has been successfully tested with the
                    32-bit PostgreSQL 8.3.7 and the 32-bit pgODBC
                    8.03.04 driver in Windows. 64-bit pgODBC was
                    reported to have problems when the bulk interface
                    was used (otl_stream buffer size &gt;1). I encourage
                    everybody to report problems like that to the
                    development team of the PostgreSQL ODBC drivers.<br>
                    <br>
                  </li>
                </ul>
                08-Jul-2009. New (in OTL 4.0.198, updated):<br>
                <br>
                <ul>
                  <li>OTL 4.0.198 has been successfully compiled and
                    tested with GNU C++ 4.4.0, which was released a
                    couple of months ago. OTL compiles clean with GNU
                    C++ 4.4.0.<br>
                    <br>
                  </li>
                </ul>
                18-Jun-2009. New (in OTL 4.0.198):<br>
                <br>
                <ul>
                  <li>A problem was reported that MS SQL Server's BACKUP
                    command fails when executed via otl_connect::<a href="https://otl.sourceforge.net/otl3_const_sql.htm">direct_exec</a>(). The
                    problem is the BACKUP command returns from
                    direct_exec() right away, and the output from the
                    BACKUP commands is supposed to be retrieved by calls
                    to SQLGetDiagRec() in a loop. MS SQL Server has a
                    separate category of such commands: BACKUP, DBCC,
                    etc. direct_exec() deallocates the underlying SQL
                    statement resource right after it gets control back,
                    which is the problem. In order to work around the
                    problem, the otl_stream class has been extended to
                    process MS SQL Server commands such as BACKUP, DBCC,
                    etc. The following new #define and otl_stream
                    function are introduced in this release: <br>
                    <br>
                    <ul>
                      <li>#define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_SQL_STATEMENT_WITH_DIAG_REC_OUTPUT">OTL_ODBC_SQL_STATEMENT_WITH_DIAG_REC_OUTPUT</a></li>
                      <li>otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#get_next_diag_rec">get_next_diag_rec</a>()</li>
                      <li>otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#get_stm_handle">get_stm_handle</a>()</li>
                    </ul>
                    <br>
                    Also, see examples <a href="https://otl.sourceforge.net/otl4_ex688.htm">688</a>,
                    <a href="https://otl.sourceforge.net/otl4_ex689.htm">689</a>.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">6-Jun-2009. New (in OTL
                4.0.197):<br>
                <br>
                <ul>
                  <li>A problem was reported that when OTL defined "<a href="https://otl.sourceforge.net/otl3_exc_list.htm#32000">Incompatible data
                      types in stream operation</a>" exception is thrown
                    from an INSERT statement based otl_stream, no good
                    rows get inserted into the table. This behavior is
                    inconsistent with, say, when a "primary key
                    violation" exception is thrown. The difference
                    between the primary key violation and the
                    incompatible data types in stream operation
                    exception is that the latter is contained to the OTL
                    code itself. The following new function is
                    introduced in this release for efficient otl_stream
                    recovery: <a href="https://otl.sourceforge.net/otl3_stream_class.htm#reset_to_last_valid_row">reset_to_last_valid_row</a>().<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">3-Jun-2009. New (in OTL
                4.0.196):<br>
                <br>
                <ul>
                  <li>A bug was reported that under #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_MULTI_MODE">OTL_ODBC_MULTI_MODE</a>,
                    when the following code runs against&nbsp; a MySQL
                    database, otl_null() doesn't get written into the F2
                    table column correctly:<br>
                    <small><span style="font-family: monospace;">...</span><br style="font-family: monospace;">
                      <span style="font-family: monospace;">&nbsp;otl_long_string

                        f2(6000);</span></small><span style="font-family: monospace;"><br>
                      &nbsp;otl_stream o;</span><br style="font-family:
                      monospace;">
                    <pre><small> o.set_lob_stream_mode(true);<br> o.open(1,<br>        "insert into test_tab (F1,F2,F3) values"<br>        "(:f1&lt;int&gt;,:f2&lt;double&gt;,:f3&lt;varchar_long&gt;) ",<br>        db<br>       );<br> o.set_commit(0); <br> int i,j;<br> otl_lob_stream lob;<br> for(i=0;i&lt;=7;++i){<br>  o&lt;&lt;i;<br>  if(i==0||i==2||i==4||i==6)<br>    o&lt;&lt;i+12.56;<br>  else<br><span style="color: rgb(255, 0, 0);">    o&lt;&lt;otl_null(); doesn't work correctly<br>  o&lt;&lt;lob;<br>  for(j=0;j&lt;50;++j)<br>   f2[j]='*';<br>  f2[50]='?';<br>  f2.set_len(51);<br><br>  lob.set_len(51+23);<br>  lob&lt;&lt;f2;<br>  f2[22]='?';<br>  f2.set_len(23);<br>  lob&lt;&lt;f2;<br>  lob.close(); <br> }<br> db.commit();<br> ...<br></span><br><br></small></pre>
                    <p>It's not known at this time whether it's a bug or
                      a feature of MyODBC driver. The same code works
                      correctly at least with DB2 and MS SQL Server ODBC
                      drivers. The otl_stream's internal buffers
                      reinitialization algorithm was changed in this
                      release to work around this "feature" of MyODBC.
                      The change is not specific to MyODBC.<br>
                    </p>
                    <pre><br></pre>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">25-May-2009. New (in OTL
                4.0.195):<br>
                <br>
                <ul>
                  <li>A bug was reported that under some circumstances
                    when OTL/ODBC is used with PostgreSQL, and when
                    #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_ALTERNATE_RPC">OTL_ODBC_ALTERNATE_RPC</a>
                    is defined, OTL throws the "function sequence error"
                    when a SELECT statement is instantiated in an
                    otl_stream. The bug seems to be different from the
                    bug that was fixed in OTL 4.0.194. The new bug is
                    fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">20-May-2009. New (in OTL
                4.0.194):<br>
                <br>
                <ul>
                  <li>A bug was reported that under some circumstances
                    when OTL/ODBC is used with PostgreSQL, and when
                    #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_ALTERNATE_RPC">OTL_ODBC_ALTERNATE_RPC</a>
                    is defined, OTL throws the "function sequence error"
                    exception when a SELECT statement is instantiated in
                    an otl_stream. This bug is fixed in this release.<br>
                    <br>
                  </li>
                  <li>#define OTL_ODBC_ALTERNATE_RPC has been added to
                    the PostgreSQL code <a href="https://otl.sourceforge.net/otl4_postgresql_examples.htm">examples</a>
                    to reflect the latest recommendations for PostgreSQL
                    and OTL.<br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">New (in OTL 4.0.193):<br>
                <br>
                <ul>
                  <li>A bug was reported that the following function was
                    missing:<br>
                    <br>
                    <span style="font-family: monospace;">class
                      otl_stream_read_iterator{<br>
                    </span>...<br>
                    <font style="font-family: monospace;" face="Arial">&nbsp;&nbsp;

                      void get(const char* var_name, double&amp; n);<br>
                    </font><font face="Arial">...</font><b><font face="Arial"><br>
                        <br>
                      </font></b><font face="Arial">The bug is fixed in
                      this release.<br>
                    </font><b><font face="Arial"><br>
                      </font></b></li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">New (in OTL 4.0.192):<br>
                <br>
                <ul>
                  <li>In this release, <a href="https://otl.sourceforge.net/otl4_stream_read_iterator.htm">otl_stream_read_iterator</a>
                    has been enhanced to work with <a href="https://otl.sourceforge.net/otl4_refcur_stream.htm">otl_refcur_stream</a>
                    . For more detail, see example <a href="https://otl.sourceforge.net/otl4_ex687.htm">687</a>.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">New (in OTL 4.0.191):<br>
                <br>
                <ul>
                  <li>A problem was reported that OTL 4.0.190's new RPC
                    mechanism broke some OTL/ODBC based C++ code. This
                    release reinstates the old RPC, SQLRowCount()
                    mechanism, and adds the following new #define to
                    accommodate the PostgreSQL ODBC driver quirks: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_ALTERNATE_RPC">OTL_ODBC_ALTERNATE_RPC</a>.
                    Those who need precise RPC counts for PostgreSQL may
                    want to enable the new #define.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">New (in OTL 4.0.190):<br>
                <br>
                <ul>
                  <li>A problem was reported&nbsp; that PostgreSQL ODBC
                    driver on a bulk INSERT statement returns one row
                    count per inserted row instead of one row count with
                    the total of "rows processed". It doesn't contradict
                    the ODBC specification, though. However, OTL relies
                    on just one row count, which is not what the
                    PostgreSQL ODBC driver returns. OTL <a href="https://otl.sourceforge.net/otl3_whatn.htm#POSTGRESQL_RPC">4.0.188</a> already worked
                    around this problem, but otl_stream::get_rpc() still
                    returns 1 instead of the actual number of affected
                    rows. This release changes the "get rpc" scheme a
                    little bit, at least for ODBCVER &gt;= 3.0 in order
                    to get the right RPC count from the PostgreSQL ODBC
                    driver. This new scheme (ODBC attribute
                    SQL_ATTR_PARAMS_PROCESSED_PTR for SQL statements)
                    works fine with the rest OTL supported database
                    types.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">New (in OTL 4.0.189):<br>
                <br>
                <ul>
                  <li>The following buffer overrun was reported in
                    OTL/ORA7:<br>
                    <br>
                    <span style="font-family: monospace;">&nbsp;int
                      describe_column</span><br style="font-family:
                      monospace;">
                    <span style="font-family: monospace;">&nbsp;(otl_column_desc&amp;

                      col,</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">&nbsp; const
                      int column_num,</span><br style="font-family:
                      monospace;">
                    <span style="font-family: monospace;">&nbsp;
                      int&amp; eof_desc)</span><br style="font-family:
                      monospace;">
                    <span style="font-family: monospace;">&nbsp;{</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">&nbsp; &nbsp;
                      sb1 name[241];</span><br style="font-family:
                      monospace;">
                    <span style="font-family: monospace;">&nbsp; &nbsp;
                      nlen=sizeof(name);</span><br style="font-family:
                      monospace;">
                    <span style="font-family: monospace;">&nbsp; &nbsp;
                      int temp_rc=odescr<br>
                      &nbsp; &nbsp; &nbsp;&nbsp; (&amp;cda,<br>
                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                      column_num,<br>
                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                      &amp;dbsize,<br>
                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                      &amp;dbtype,<br>
                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                      &amp;name[0],<br>
                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                      &amp;nlen,<br>
                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                      &amp;dsize,<br>
                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                      &amp;prec,<br>
                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                      &amp;scale,<br>
                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                      &amp;nullok);<br>
                    </span><span style="font-family: monospace;">&nbsp;
                      &nbsp; if(temp_rc==0)<span style="color: rgb(255,
                        0, 0);">name[nlen]=0;</span></span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">&nbsp;&nbsp;&nbsp;

                      ...<br>
                    </span><br style="font-family: monospace;">
                    It happens very rarely, and it's not clear why it
                    happens at all, when the odescr() function returns
                    success (0), and at the same time it doesn't modify
                    the output nlen parameter. The bug is fixed in this
                    release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">New (in OTL 4.0.188):<br>
                <br>
                <ul>
                  <li><a name="POSTGRESQL_RPC"></a>A problem was
                    reported when OTL is used with the PostgreSQL ODBC
                    driver and an INSERT statement in the bulk interface
                    mode (otl_stream buffer size &gt;1), more rows than
                    expected could be inserted into the table in some
                    cases. OTL relies on the underlying ODBC driver to
                    return a correct "rows processed count" (RPC) when
                    SQLRowCount() is called right after the INSERT
                    statement gets executed. PostgreSQL ODBC driver
                    always returns 1, which makes OTL believe that the
                    RPC from INSERT was 1, and OTL doesn't have to set
                    the SQL_ATTR_PARAMSET_SIZE attribute of the INSERT
                    statement. This release of OTL works around the RPC
                    feature of the PostgreSQL ODBC driver, and inserts
                    the correct number of rows into the table.<br>
                    <br>
                  </li>
                  <li>This release introduces basic support for
                    SQLGetTypeInfo() (<a href="https://otl.sourceforge.net/otl4_append_b.htm">data
                      dictionary</a> ODBC/DB2 CLI&nbsp; function) . The
                    function returns a list of data types supported by
                    the database server. How to call ODBC data
                    dictionary functions, see the corresponding OTL code
                    examples. <br>
                    <br>
                  </li>
                  <li>MySQL OTL code <a href="https://otl.sourceforge.net/otl4_mysql_odbc35_examples.htm">examples</a>
                    have been reworked to show a technique of doing a
                    multi-row INSERT by using the multi-row VALUES
                    clause in an INSERT statement when the otl_stream
                    buffer size is set to 1. This technique is a
                    workaround of the lack of the bulk interface support
                    in MySQL.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">New (in OTL 4.0.187):<br>
                <br>
                <ul>
                  <li>A problem was reported in Oracle 10g, when #define
                    <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA_TIMESTAMP">OTL_ORA_TIMESTAMP</a>
                    is defined, that it takes 10 times longer than usual
                    to retrieve Oracle TIMESTAMP values. The Oracle 10g
                    JDBC driver seems to have the same problem. #define
                    <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA7_STRING_TO_TIMESTAMP">OTL_ORA7_STRING_TO_TIMESTAMP</a>/OTL_ORA7_TIMESTAMP_TO_STRING

can

be

used

as

a

workaround

for

the

problem.

See

example

                    <a href="https://otl.sourceforge.net/otl4_ex473.htm">473</a> for more detail.
                    The same technique can be used under #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UNICODE">OTL_UNICODE</a>.</li>
                </ul>
                <br>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">New (in OTL 4.0.186):<br>
                <br>
                <ul>
                  <li>A bug was reported that when in OTL/ODBC when the
                    following flavor of otl_connect::<a href="https://otl.sourceforge.net/otl3_connect_class.htm#rlogon3">rlogon</a>()
                    is used, the auto-commit parameter has no effect if
                    it's set to 0. The bug is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">New (in OTL 4.0.185):<br>
                <br>
                <ul>
                  <li>This release introduces the following new #define:
                    <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA_MAP_BIGINT_TO_LONG">OTL_ORA_MAP_BIGINT_TO_LONG</a>.
                    It enables mapping from &lt;<a href="https://otl.sourceforge.net/otl3_bind_variables.htm#bigint">bigint</a>&gt;

to

singed

64-bit

                    longs for 64-bit OCIs on LP64 platforms.<br>
                    <br>
                  </li>
                  <li><a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_TIME_ZONE">OTL_ODBC_TIME_ZONE</a>,<u>
                    </u><a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_STRING_TO_TIMESTAMP">OTL_ODBC_STRING_TO_TIMESTAMP</a>,
                    <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_TIMESTAMP_TO_STRING">OTL_ODBC_TIMESTAMP_TO_STRING</a>
                    were introduced a few releases ago as a way to work
                    with TIMESTAMP WITH TIME ZONE (PostgreSQL, Oracle) /
                    timestampoffset (MS SQL Server 2008) via ODBC. A bug
                    was reported that when #define OTL_UNICODE is
                    enabled, and the #define's above are enabled as
                    well, the code doesn't return the right results. The
                    bug is fixed in this release. See also examples <a href="https://otl.sourceforge.net/otl4_ex685.htm">685</a>, and <a href="https://otl.sourceforge.net/otl4_ex686.htm">686</a>.<br>
                    <br>
                  </li>
                  <li>A bug was reported that when an empty, numeric,
                    PL/SQL, STL-vector based <a href="https://otl.sourceforge.net/otl3_pl_tab.htm">container</a>
                    is being passed into a stored procedure call, it
                    causes the program to crash. The bug is fixed in
                    this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">New (in OTL 4.0.184):<br>
                <br>
                <ul>
                  <li>The OTL online manual is reformatted in order to
                    make it more readable (function lists have been put
                    in HTML tables). Comments and suggestions to improve
                    the manual are welcome.<br>
                    <br>
                  </li>
                  <li>otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#get_dirty_buf_len2">get_dirty_buf_len</a>()

                    is extended to work with SELECT statements, Oracle
                    PL/SQL reference cursors, and stored procedures that
                    return implicit result sets: it returns the number
                    of rows in the stream buffer that are yet to be
                    read.<br>
                    <br>
                  </li>
                  <li>A bug was reported that
                    otl_refcur_stream::rewind() causes the Oracle "fetch
                    out of sequence" error. The reporter of the bug
                    pointed out that to "rewind the reference cursor"
                    means to re-execute the master PL/SQL block the
                    reference cursor belongs to.
                    otl_refcur_stream::rewind() can't be easily
                    eliminated because it is derived from <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA_DECLARE_COMMON_READ_STREAM_INTERFACE">otl_read_stream_interface</a>,
                    when #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA_DECLARE_COMMON_READ_STREAM_INTERFACE">OTL_ORA_DECLARE_COMMON_READ_STREAM_INTERFACE</a>
                    is enabled. Instead, otl_refcur_stream::rewind() was
                    made private in this release.<br>
                    <br>
                  </li>
                  <li>A bug was reported that the new "<a href="https://otl.sourceforge.net/otl3_whatn.htm#endr">CHECK-END-OF-ROW</a>"
                    feature, which was introduced in OTL <a href="https://otl.sourceforge.net/otl3_whatn.htm#40181">4.0.181</a>, is no longer available.
                    The bug is fixed in this release.<br>
                    <br>
                  </li>
                  <li>A bug was reported that the <a href="https://otl.sourceforge.net/otl3_bind_variables.htm#SELECT_OVERRIDE">explicit</a>
                    :#N&lt;<a href="https://otl.sourceforge.net/otl3_bind_variables.htm#raw2">raw</a>[XXX]&gt;

                    override for SELECT statements maps to
                    &lt;raw_long&gt;, and that the bulk interface
                    (stream buffer size &gt;1) for Oracle doesn't work
                    as a result. The bug is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">New (in OTL 4.0.183):<br>
                <br>
                <ul>
                  <li>The following Visaul C++ 8 compilation warning was
                    reported for OTL 4.0.182, line 13840 under #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_FUNC_THROW_SPEC_ON">OTL_FUNC_THROW_SPEC_ON</a>,
                    and #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC">OTL_ODBC</a>:<br>
                    <br>
                    <span style="font-family: monospace;">C4297:
                      'function' : function assumed not to throw an
                      exception but does</span><br>
                    <br>
                    The warning is fixed in this release.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td style="vertical-align: top;">New (in OTL 4.0.182):<br>
                <br>
                <ul>
                  <li>This release extends the functionality of the
                    otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#create_stored_proc_call">create_stored_proc_cal</a>l()

function:

it

can

handle

stored

procedures

/

functions

that

have

more

than

one

output

reference

cursor

parameters

and

also

input

/

output

parameters

in

addition

to

the

reference

cursor

parameters.

The

following

new

global

constant

was

added

to

indicate

the

new

type

ot

stored

procedures:

                    <span style="font-family: monospace;"><a href="https://otl.sourceforge.net/otl3_stream_class.htm#otl_mixed_refcur_stream_type">otl_mixed_refcur_stream_type</a>.
                    </span>See also example <a href="https://otl.sourceforge.net/otl4_ex153.htm">153</a>
                    for more detail.<br>
                    <br>
                  </li>
                </ul>
              </td>
              <td style="vertical-align: top;"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p style="font-weight: normal;"><font size="3"><a name="40181"></a>New (in OTL 4.0.181):</font></p>
                <ul>
                  <li>
                    <p><font size="3"><span style="font-weight: normal;">A
                          bug was reported that in a WHERE clause in a
                          SELECT statement, :v&lt;<a href="https://otl.sourceforge.net/otl3_bind_variables.htm#raw">raw</a>[XXX]&gt;

                          doesn't work under #defines OTL_ORAXXX, and
                          the following OTL <a href="https://otl.sourceforge.net/otl3_exc_list.htm">defined</a>
                          <a href="https://otl.sourceforge.net/otl3_exception_class.htm">otl_exception</a>
                          gets raised:<br>
                          <br>
                          &nbsp;&nbsp;&nbsp;&nbsp; <span style="font-family: monospace;">Not all
                            input variables have been initialized</span><br>
                          <br>
                          The problem is fixed in this release. <br>
                        </span></font></p>
                  </li>
                  <li><font size="3"><span style="font-weight: normal;"><a name="endr"></a>This release introduces
                        otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#check_end_of_row">check_end_of_row</a>()

function

                        (or its operator&gt;&gt;() form) and the "<a href="https://otl.sourceforge.net/otl3_exc_list.htm#32035">END-OF-ROW
                          check failed</a>" otl_exception, in order to
                        address the "<a href="http://soci.sourceforge.net/doc/rationale.html">row

                          tearing</a>" problem. The problem is that, say</span></font>,
                    a SELECT statement has two int columns, and the loop
                    to read rows from the SELECT statement actually
                    reads three int values at a time, for example:<br>
                    <br>
                    <span style="font-family: monospace;">otl_stream
                      sql(10,"select a, b from some_table",db); // only
                      TWO columns</span><br style="font-family:
                      monospace;">
                    <br style="font-family: monospace;">
                    <span style="font-family: monospace;">while(!sql.eof())</span><span style="font-family: monospace;">{</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">&nbsp;&nbsp;&nbsp;

int

                      a, b, c;</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">&nbsp;&nbsp;&nbsp;

sql&gt;&gt;a&gt;&gt;b&gt;&gt;c;

                      // this causes "row-tearing"</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">&nbsp;&nbsp;&nbsp;

//

                      ...</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">}<br>
                      <br>
                    </span>The way OTL uses the C++ stream idiom is said
                    to be unsafe, and that it potentially could cause a
                    "row-tearing" problem, which could be very hard to
                    troubleshoot and maintain. The check_end_of_row()
                    function addresses the problem, so, in order to make
                    sure the code is safe and maintainable, here's how
                    the example above can be rewritten:<br>
                    <br>
                    <span style="font-family: monospace;">otl_stream
                      sql(10,"select a, b from some_table",db); // only
                      TWO columns</span><br style="font-family:
                      monospace;">
                    <br style="font-family: monospace;">
                    <span style="font-family: monospace;">while
                      (!sql.eof())</span><span style="font-family:
                      monospace;">{</span><br style="font-family:
                      monospace;">
                    <span style="font-family: monospace;">&nbsp;&nbsp;&nbsp;

int

                      a, b;</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">&nbsp;&nbsp;&nbsp;

                      sql&gt;&gt;a&gt;&gt;b;<br>
                      &nbsp;&nbsp;&nbsp; sql.<a href="https://otl.sourceforge.net/otl3_stream_class.htm#check_end_of_row">check_end_of_row</a>();</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">&nbsp;&nbsp;&nbsp;

//

                      ...</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">}<br>
                      <br>
                    </span>or this way<span style="font-family:
                      monospace;"><br>
                      <br>
                    </span><span style="font-family: monospace;">otl_stream

sql(10,"select

                      a, b from some_table",db); // only TWO columns</span><br style="font-family: monospace;">
                    <br style="font-family: monospace;">
                    <span style="font-family: monospace;">while
                      (!sql.eof())</span><span style="font-family:
                      monospace;">{</span><br style="font-family:
                      monospace;">
                    <span style="font-family: monospace;">&nbsp;&nbsp;&nbsp;

int

                      a, b;</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">&nbsp;&nbsp;&nbsp;

                      sql&gt;&gt;a&gt;&gt;b&gt;&gt;<a href="https://otl.sourceforge.net/otl3_stream_class.htm#check_end_of_row">endr</a>;<br>
                    </span><span style="font-family: monospace;">&nbsp;&nbsp;&nbsp;

                      // ...</span><br style="font-family: monospace;">
                    <span style="font-family: monospace;">}<br>
                    </span><span style="font-family: monospace;"><br>
                    </span>In case if the number of columns in the
                    SELECT statement changes, and the actual loop is not
                    changed, the check_end_of_row() function (or its
                    alternative operator&gt;&gt;() form) will throw this
                    exception.<br>
                    <br>
                    I personally don't believe that the OTL design is
                    too bad to cause "row-tearing" that is hard to
                    troubleshoot. Usually,&nbsp; a SELECT statement has
                    columns of more than one data type, so when the "row
                    is torn", OTL will throw the usual "<a href="https://otl.sourceforge.net/otl3_exc_list.htm#32000">incompatible data
                      types in stream operation</a>" exception, and it
                    will be obvious that the code is wrong.<br>
                    <br>
                    Those developers, who think that the "row tearing"
                    is a serious problem and don't want to use the
                    check_end_of_row() function, can use the <a href="https://otl.sourceforge.net/otl4_stream_read_iterator.htm">OTL stream
                      read iterator</a>, which provides JDBC-like <span style="font-style: italic;">getter</span>
                    interface. <br>
                    <br>
                    otl_stream::check_end_of_row() function is not
                    mandatory, so OTL will continue to work as before.<br>
                    <br>
                  </li>
                </ul>
                <ul>
                </ul>
              </td>
              <td width="80">
                <p><br>
                </p>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.180):</p>
                <ul>
                  <li>
                    <p>This release introduces the following new
                      function: otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#get_dirty_buf_len">get_dirty_buf_len</a>().

                      The feature was requested by a couple of
                      developers (from Canada and China).<br>
                    </p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.179):</p>
                <ul>
                  <li>
                    <p>A documentation bug was reported that :v&lt;<a href="https://otl.sourceforge.net/otl3_bind_variables.htm#long">long</a>&gt;
                      (bind variable) is not always a signed 32-bit
                      integer on 64-bit platforms. The documentation has
                      been corrected in this release to provide a more
                      detailed explanation on the topic.</p>
                  </li>
                  <li>
                    <p>OTL 4.0.176 was refactored to make undocumented
                      class public data members in OTL private or
                      protected. A compilation problem was reported
                      around the area of those previously public data
                      members. The following method has been added to
                      the otl_stream class (for all flavors of OTL) in
                      order to address the compilation issue:</p>
                    <pre style="margin-bottom: 0.2in;">  int get_connected() const {return connected;}</pre>
                  </li>
                  <li>
                    <p>Several projects asked for the following code to
                      be included into the OTL header file:<br>
                      <br>
                      <font face="monospace">#if defined(OTL_INCLUDE_0)</font><br>
                      <font face="monospace">#include "otl_include_0.h"</font><br>
                      <font face="monospace">#endif</font><br>
                      <br>
                      The rationale for it is that these projects need
                      to include their own credentials to the OTL header
                      file, so that, when the corresponding binary file
                      gets generated, the credentials will be present in
                      the binary as a string. Therefore, the exact
                      version/build number of the binary can be easily
                      identified.</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.178):</p>
                <ul>
                  <li>
                    <p>The following deficiency was reported in the OTL
                      tracing:</p>
                    <pre>...<br>(0) MY OTL TRACE ==&gt; otl_stream(this=0012FEFC)::open<br>(buffer_size=5, sqlstm=select * from test_tab where f1&gt;=:f&lt;int&gt; <br>and f1&lt;=:ff&lt;int&gt;*2, connect=004332CC); <br>(1) MY OTL TRACE ==&gt; otl_stream(this=0012FEFC)::operator &lt;&lt;<br>(char*: ftype=1, placeholder=:f2, value="Name10"); <br>(2) MY OTL TRACE ==&gt; otl_stream, executing SQL Stm=insert into <br>test_tab values(:f1     ,:f2          ), current batch size=10, row offset=0<br>...<br>(3) MY OTL TRACE ==&gt; otl_stream, executing SQL Stm=<br>select * from test_tab where f1&gt;=:f      and f1&lt;=:ff     *2, buffer size=5<br>(4) MY OTL TRACE ==&gt; otl_stream, fetched the first batch <br>of rows, SQL Stm=select * from test_tab where f1&gt;=:f      and f1&lt;=:ff     *2, RPC=5<br>...</int></int></pre>
                    <p> (2), (3), and (4) don't have the stream address,
                      which makes it difficult to keep track of
                      different instances of OTL streams that have the
                      same SQL statement, and especially when the
                      streams are used in different threads. The
                      deficiency is fixed in this release. The OTL trace
                      for the example above is going to look like this:</p>
                    <pre>...<br>(0) MY OTL TRACE ==&gt; otl_stream(this=0012FEFC)::open<br>(buffer_size=5, sqlstm=select * from test_tab <br>where f1&gt;=:f&lt;int&gt; and f1&lt;=:ff&lt;int&gt;*2, connect=004332CC); <br>(1) MY OTL TRACE ==&gt; otl_stream(this=0012FEFC)::operator &lt;&lt;<br>(char*: ftype=1, placeholder=:f2, value="Name10"); <br>(2) MY OTL TRACE ==&gt; otl_stream(this=0012FEFC), executing SQL Stm=<br>insert into test_tab values(:f1     ,:f2          ), <br>current batch size=10, row offset=0<br>...<br>(3) MY OTL TRACE ==&gt; otl_stream(this=0012FECC), executing SQL Stm=<br>select * from test_tab where f1&gt;=:f      and f1&lt;=:ff     *2, buffer size=5<br>(4) MY OTL TRACE ==&gt; otl_stream(this=0012FECC), fetched the first batch of rows, <br>SQL Stm=select * from test_tab where f1&gt;=:f      and f1&lt;=:ff     *2, RPC=5<br>...</int></int></pre>
                  </li>
                  <li>
                    <p>A bug was reported that some OTL trace statements
                      are missing for #define OTL_ORAXXX when reference
                      cursors are used. The bug is fixed in this release</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.177):</p>
                <ul>
                  <li>
                    <p>In order to address an issue, the following new <a href="https://otl.sourceforge.net/otl3_faq.htm#Large_Nvarchar_MSSQL">question

                        &amp; answer</a> has been added to the OTL
                      F.A.Q.: <font size="4"><i>How to insert or update
                          MS SQL NVARCHAR</i></font> <i>/ NCHAR values
                        larger than 2000 (UTF-16) characters?</i></p>
                  </li>
                  <li>
                    <p>The previous release (OTL 4.0.176) was refactored
                      to make undocumented class public data members in
                      OTL private or protected. A compilation problem
                      was reported around the area of those previously
                      public data members. The following two&nbsp;
                      methods have been added to class otl_conn (under
                      #define OTL_ORAXX, where XX&gt;=8) in order to
                      address the compilation issue:</p>
                    <pre>OCIServer* get_srvhp(){return srvhp;}<br>OCISession* get_authp(){return authp;}</pre>
                  </li>
                  <li>
                    <p>A problem was reported that when #define
                      OTL_ORA10G is used, an otl_stream stream has
                      :v&lt;refcur,...&gt;, and the stream's buffer size
                      is &gt; 1, the program crashes somewhere deep in
                      the OCI layer. The stream's buffer size should be
                      set to 1 when the stream has :v&lt;refcur&gt;. OTL
                      is supposed to throw the otl_exception with error
                      code of <a href="https://otl.sourceforge.net/otl3_exc_list.htm#32034">32034</a>,
                      but it doesn't&nbsp; The problem is fixed in this
                      release.</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.176):</p>
                <ul>
                  <li>
                    <p>OTL code has been refactored: public data members
                      that weren't part of the documented public
                      interfaces have been made private, or protected.
                      This may break some OTL based code, if the code
                      uses undocumented public data members in the OTL
                      classes, that have been made private/protected in
                      this release of OTL. Let me know right away if
                      this happens, and I'll add appropriate accessor
                      functions to the corresponding OTL classes. The
                      reason for the refactoring of the OTL header file
                      is that developers in many projects (I've heard
                      from many enough) are adopting stricter standards
                      for third-party libraries as well as their own
                      code.</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.175):</p>
                <ul>
                  <li>
                    <p>A bug was reported that otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#create_stored_proc_call">create_stored_proc_call</a>()

                      couldn't find a procedure / function name if the
                      procedure / function is available via Oracle
                      synonym mechanism. The bug is fixed in this
                      release: otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#create_stored_proc_call">create_stored_proc_call()</a>
                      searches Oracle's data dictionary's user_synonyms
                      and all_synonyms views in case if the procedure /
                      function name is not found anywhere else. </p>
                  </li>
                  <li>
                    <p>A bug was reported that the otl_connect object
                      can't fully recover from a database failure when
                      OTL/ODBC is used with the Oracle ODBC driver for
                      Oracle. OTL/ODBC doesn't deallocate the connect
                      related underlying ODBC handles on otl_connect::<a href="https://otl.sourceforge.net/otl3_connect_class.htm#logoff">logoff</a>().

                      The assumption was that the ODBC driver's
                      connection handles can be reused on the next
                      otl_connect::<a href="https://otl.sourceforge.net/otl3_connect_class.htm#rlogon">rlogon</a>().

Obviously,

                      there are situations when the assumption is not
                      true. The following new #define forces the
                      otl_connect::logoff() to free ODBC connection
                      related handles: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_LOGOFF_FREES_HANDLES">OTL_ODBC_LOGOFF_FREES_HANDLES</a>.</p>
                  </li>
                  <li>
                    <p>A bug was reported that <a href="https://otl.sourceforge.net/otl4_refcur_stream.htm">otl_refcur_stream</a>
                      doesn't support the RAW type. The bug is fixed in
                      this release.</p>
                  </li>
                  <li>
                    <p>A bug was reported that sometimes <a href="https://otl.sourceforge.net/otl4_subscriber.htm">otl_subscriber</a>
                      class doesn't report table-wide events because the
                      corresponding event bitmask contains the event bit
                      + OCI_OPCODE_ALLROWS. The bug has been fixed in
                      this release, and otl_subscriber's OnTableAlter(),
                      OnTableDrop(), OnTableChange()'s signatures have
                      been changed.</p>
                  </li>
                  <li>
                    <p>A problem was reported that Oracle
                      CLOB-to-XMLType and XMLType-to_CLOB conversion
                      didn't work for XMLType values larger than 4000
                      bytes. Example <a href="https://otl.sourceforge.net/otl4_ex678.htm">678</a>
                      has been added to show how to work around the
                      problem.</p>
                  </li>
                  <li>
                    <p>MS SQL 2005 introduced Multiple Active Result
                      Sets (MARS), which is not enabled by default. More
                      and more applications require this feature to be
                      enabled. This release of OTL introduces the
                      following #define to enable the feature: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ENABLE_MSSQL_MARS">OTL_ENABLE_MSSQL_MARS</a>.</p>
                  </li>
                  <li>
                    <p>This release introduces support for MS SQL 2008
                      (new #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_MSSQL_2008">OTL_ODBC_MSSQL_2008</a>,
                      new <a href="https://otl.sourceforge.net/otl3_connect_class.htm#OTL_MSSQL_2008_ODBC_CONNECT">OTL_MSSQL_2008_ODBC_CONNECT</a>
                      mode under #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_MULTI_MODE">OTL_ODBC_MULTI_MODE</a>).

For

more

detail,

see

also

examples

                      <a href="https://otl.sourceforge.net/otl4_ex679.htm">679</a>, <a href="https://otl.sourceforge.net/otl4_ex680.htm">680</a>, <a href="https://otl.sourceforge.net/otl4_ex681.htm">681</a>, <a href="https://otl.sourceforge.net/otl4_ex682.htm">682</a>, <a href="https://otl.sourceforge.net/otl4_ex683.htm">683</a>, <a href="https://otl.sourceforge.net/otl4_ex684.htm">684</a>.</p>
                  </li>
                  <li>
                    <p>This release of OTL compiles clean with the
                      latest g++: 4.3.2 (which has been released
                      recently).</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.174):</p>
                <ul>
                  <li>
                    <p>OTL 4.0.173 fixed the LOB-stream-mode-NULL <a href="https://otl.sourceforge.net/otl3_whatn.htm#LOB_NULL_BUG">bug</a> for OTL/DB2-CLI,
                      but it introduced the same bug in OTL/OCI. The bug
                      is fixed in this release.</p>
                  </li>
                  <li>
                    <p>ODBC doesn't support timestamps with time zone
                      components yet. However, there is a need to work
                      with "TIMESTAMP WITH TIME ZONE" columns via ODBC.
                      For example, PostgreSQL supports TIMESTAMP WITH
                      TIME ZONE. This version of OTL intrdoces the
                      following new #define to address the need: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_TIME_ZONE">OTL_ODBC_TIME_ZONE</a>,<u>
                      </u><a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_STRING_TO_TIMESTAMP">OTL_ODBC_STRING_TO_TIMESTAMP</a>,
                      <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_TIMESTAMP_TO_STRING">OTL_ODBC_TIMESTAMP_TO_STRING</a>.
                      See example <a href="https://otl.sourceforge.net/otl4_ex676.htm">676</a> for
                      more detail. <br>
                      <br>
                      A problem was reported that some versions of the
                      PostgreSQL ODBC driver don't populate the
                      timestamp's fractional part. The new #defines can
                      be used as a workaround to solve the problem. See
                      example <a href="https://otl.sourceforge.net/otl4_ex676.htm">676</a> for more
                      detail.</p>
                  </li>
                  <li>
                    <p>A problem was reported that xlC version 6 doesn't
                      support template member functions. The bug is
                      fixed in this release (for xlC, #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_NO_TMPL_MEMBER_FUNC_SUPPORT">OTL_NO_TMPL_MEMBER_FUNC_SUPPORT</a>
                      gets enabled by default).</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in&nbsp; OTL 4.0.173):</p>
                <ul>
                  <li>
                    <p>The following compilation errors were reported
                      when OTL is being compiled under Debian on AMD64,
                      #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_UNIX">OTL_ODBC_UNIX</a>,
                      and #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_MULTI_MODE">OTL_ODBC_MULTI_MODE</a>:</p>
                    <pre>In file included from test.cpp:12: <br>./otlv4.h: In member function 'int odbc::otl_sel::first(odbc::otl_cur&amp;,<br>int&amp;, int&amp;, int&amp;, int&amp;, int)': <br>./otlv4.h:12497: error: cannot convert 'SQLULEN*' to 'SQLROWSETSIZE*'<br>for argument '4' to 'SQLRETURN SQLExtendedFetch(void*, SQLUSMALLINT,<br>SQLROWOFFSET, SQLROWSETSIZE*, SQLUSMALLINT*)' <br>./otlv4.h: In member function 'int odbc::otl_sel::next(odbc::otl_cur&amp;,<br>int&amp;, int&amp;, int&amp;, int&amp;, int)': <br>./otlv4.h:12599: error: cannot convert 'SQLULEN*' to 'SQLROWSETSIZE*'<br>for argument '4' to 'SQLRETURN SQLExtendedFetch(void*, SQLUSMALLINT,<br>SQLROWOFFSET, SQLROWSETSIZE*, SQLUSMALLINT*)'</pre>
                    <p> The problem was due incompatible imlementations
                      of ODBC in the 64-bit Windows, and in the 64-bit
                      Unix ODBC package. If you read the comments in the
                      SQL/ODBC related header files in unixodbc, you'd
                      see that the implementors struggled with
                      interpreting ambiguities in the 64-bit ODBC
                      specification. Nobody says that life is perfect,
                      and there is nothing a few #ifdefs can't fix. The
                      problem is fixed in this release.</p>
                  </li>
                  <li>
                    <p><a name="LOB_NULL_BUG"></a>A bug was reported
                      that when OTL is used with <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_DB2_CLI,">OTL_DB2_CLI</a>.,

and

an

                      <a href="https://otl.sourceforge.net/otl3_stream_class.htm">otl_stream</a> is
                      opened in the LOB stream mode (otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#set_lob_stream_mode">set_lob_stream_mode</a>(true)),

                      NULL values, say, in an INSERT statement, don't
                      get processed correctly. Instead of inserting a
                      NULL, OTL inserts a non-NULL value from a row
                      prior to the one with the NULL. The bug is
                      specific to OTL/DB2-CLI. OTL introduced a tweak a
                      couple of years ago that resets the "NULL
                      indicator" / "length" fields for each bind
                      variable / array to the default "non-NULL" right
                      after SQLExcute() is called. Apparently, DB2 CLI
                      has some semi-documented behavior (maybe it's
                      documented, only I couldn't find the right
                      reference, so if somebody could point me to the
                      right spot in the DB2 CLI manual, that would be
                      helpful) that the "NULL indicator" / "length"
                      field is still used by the DB2 CLI layer after
                      SQLExecute() was already called under certain
                      conditions. The bug is fixed in this release.</p>
                  </li>
                  <li>
                    <p>This release introduces the following #define: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_EXCEPTION_IS_DERIVED_FROM_STD_EXCEPTION">OTL_EXCEPTION_IS_DERIVED_FROM_STD_EXCEPTION</a>.
                      The #define is a shortcut for "<a href="https://otl.sourceforge.net/otl3_exception_class.htm">otl_exception</a>
                      is derived std::excetion".</p>
                  </li>
                  <li>
                    <p>A few redundant calls to otl_null() were removed
                      inside the OTL header file.</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.172):</p>
                <ul>
                  <li>
                    <p>When #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_FREETDS_ODBC_WORKAROUNDS">OTL_FREETDS_ODBC_WORKAROUNDS</a>
                      is enabled, and, say, an INSERT statement is being
                      executed against a table, even after
                      otl_connect::commit() is called, the table still
                      has an exlusive lock on the rows that were
                      inserted into the table. The bug is fixed in this
                      release. It looks like the bug in FreeTDS, which
                      #define OTL_FREETDS_ODBC_WORKAROUNDS was meant to
                      fix, is fixed now in FreeTDS. Check the FreeTDS
                      Web site for more detail. Those who still use the
                      version of FreeTDS with the original bug can
                      continue using #define
                      OTL_FREETDS_ODBC_WORKAROUNDS.</p>
                  </li>
                  <li>
                    <p>When <a href="https://otl.sourceforge.net/otl3_lob_stream.htm">otl_lob_stream</a>
                      is #defines OTL_ORAXX (where XX&gt;=8), in a
                      situation when a clob/blob gets returned from a
                      PL/SQL stored procedure call and there is another
                      output parameter that precedes the clob/blob, for
                      example:<br>
                      <br>
                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font face="monospace">begin <br>
                        &nbsp;&nbsp;&nbsp;&nbsp;
                        GetClob(:f&lt;char[30],out&gt;,
                        :c&lt;clob,out&gt;);<br>
                        &nbsp;&nbsp; end;</font><br>
                      <br>
                      In case if the preceding output parameter is NULL
                      (<font face="monospace">:f</font> is NULL), the
                      clob (<font face="monospace">:c</font>) is empty .
                      The bug is fixed in this release. If the same
                      parameters (<font face="monospace">:f</font> and <font face="monospace">:c</font>) get returned by a
                      SELECT statement, such a bug doesn't exist.</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.171):</p>
                <ul>
                  <li>
                    <p>#define OTL_VERSION_NUMBER in the OTL header file
                      had a typo, it was set to 0x0400B0L instead of
                      0x0400AAL. The typo is fixed in this release.</p>
                  </li>
                  <li>
                    <p>The following constructor was broken:</p>
                    <pre>   otl_value&lt;otl_datetime&gt;(const otl_null&amp;):<br><font color="#ff0000">    v(0),</font>

    ind(true)

  {

  }</pre>
                    <p> It should be</p>
                    <pre>   otl_value&lt;otl_datetime&gt;(const otl_null&amp;):<br><font color="#ff0000">    v(),</font>

    ind(true)

  {

  }</pre>
                    <p> The bug is fixed in this release.</p>
                  </li>
                  <li>
                    <p>When #define OTL_ORA8I, or OTL_ORA9I, or
                      OTL_ORA10G, or OTL_ORA10G_R2, or OTL_ORA11G is
                      defined along with #define OTL_UNICODE, SELECT
                      trigger_body FROM all_triggers only returns 50% of
                      the trigger body text (trigger_body is a LONG
                      column) when read into an otl_long_unicode_string
                      variable. For an unknown reason (I was unable to
                      find any relevant information in the OCI manual,
                      metalink.oracle.com, or on the Internet), the OCI
                      sometimes returns the length of a Unicode LONG
                      value in double-byte characters, and most of the
                      time the length is returned in bytes. Thus, the
                      reason for OTL returning 50% of the LONG text in
                      SELECT trigger_body FROM all_triggers. The OCI
                      always adds a NULL terminator character to a LONG
                      string (in the case of Unicode, it's a double-byte
                      NULL terminator). In this release, OTL has been
                      changed to rely on the NULL terminator instead of
                      the returned length for LONG values.</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.170):</p>
                <ul>
                  <li>
                    <p>When #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UNICODE">OTL_UNICODE</a>
                      is enabled, <a href="https://otl.sourceforge.net/otl4_refcur_stream.htm">otl_refcur_stream</a>
                      returns incorrect Unicode characaters for
                      NVARCHAR2 values. OTL didn't set the OCI "Charset
                      Form" correctly for NLS string columns (NVARCHAR2
                      / NCHAR). The problem is fixed in this release.</p>
                  </li>
                  <li>
                    <p>When #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_MULTI_MODE">OTL_ODBC_MULTI_MODE</a>
                      is enabled, OTL doesn't compile with 64-bit Visual
                      C++ 2008 under 64-bit Windows. OTL had a variable
                      declared as SQLUINTEGER (unsigned 32-bit integer).
                      The variable was used in a call to
                      SQLExtendedFetch() as the <i>RowCountPtr </i>parameter<i>.
                      </i>The manual for 32-bit Visual C++ 7.1 said that
                      the <i>RowCountPtr </i>should be SQLUINTEGER*,
                      and in the actual function signature the parameter
                      is SQLULEN*:<br>
                      <br>
                      In the doc:<br>
                      &nbsp;&nbsp;&nbsp;&nbsp; <font face="monospace">SQLRETURN

                      </font><font color="#000000"><font face="monospace"><b><span style="background:
                              rgb(160, 255, 255) none repeat scroll 0%
                              50%; -moz-background-clip: -moz-initial;
                              -moz-background-origin: -moz-initial;
                              -moz-background-inline-policy:
                              -moz-initial;">SQLExtendedFetch</span></b></font></font><font face="monospace">(</font><br>
                      &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font face="monospace">SQLHSTMT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StatementHandle,</font><br>
                      &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <font face="monospace">SQLUSMALLINT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FetchOrientation,</font><br>
                      &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; <font face="monospace">SQLINTEGER&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FetchOffset,</font><br>
                      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <font color="#000000"><font face="monospace"><b><span style="background: rgb(153, 255, 153) none
                              repeat scroll 0% 50%;
                              -moz-background-clip: -moz-initial;
                              -moz-background-origin: -moz-initial;
                              -moz-background-inline-policy:
                              -moz-initial;">SQLUINTEGER</span></b></font></font>
                      <font face="monospace">*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RowCountPtr,</font><br>
                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

                      <font face="monospace">SQLUSMALLINT
                        *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RowStatusArray);</font><br>
                      <br>
                      In the header file:<br>
                      &nbsp;&nbsp;&nbsp; <font face="monospace">SQLRETURN

                        SQL_API SQLExtendedFetch(</font><br>
                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

                      <font face="monospace">SQLHSTMT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

                        hstmt,</font><br>
                      &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <font face="monospace">SQLUSMALLINT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

                        fFetchType,</font><br>
                      &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <font face="monospace">SQLLEN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

                        irow,</font><br>
                      &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <font face="monospace">SQLULEN&nbsp;&nbsp;&nbsp;
                        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; *pcrow,</font><br>
                      &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <font face="monospace">SQLUSMALLINT &nbsp;&nbsp;&nbsp;
                        &nbsp; *rgfRowStatus);</font><br>
                      <br>
                      The discrepancy between the manual and the actual
                      function signature has been corrected in the
                      latest MSDN <a href="http://msdn.microsoft.com/en-us/library/ms713591%28VS.85%29.aspx">article</a>
                      on SQLExtendedFetch.<br>
                      <br>
                      SQLUINTEGER and SQLULEN are not the same length in
                      64-bit Windows, that is why there was a
                      compilation error in the 64-bit mode. The problem
                      is fixed in this release. </p>
                  </li>
                  <li>
                    <p>When #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_DB2_CLI">OTL_DB2_CLI</a>
                      is enabled, OTL doesn't compile with DB2 CLI 7.x
                      client's include files: symbol SQL_XML is not
                      defined. The problem is fixed in this release.</p>
                  </li>
                  <li>
                    <p>When #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_MSSQL_2005">OTL_ODBC_MSSQL_2005</a>
                      is enabled, <a href="https://otl.sourceforge.net/otl4_stream_read_iterator.htm">otl_stream_read_iterator</a>
                      is attached to an <a href="https://otl.sourceforge.net/otl3_stream_class.htm">otl_stream</a>
                      that is opened in the LOB stream mode
                      (otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#set_lob_stream_mode">set_lob_stream_mode</a>(true)).

                      The stream was opened with a SELECT statement that
                      has a "TIMESTAMP" column, and an "IMAGE" column.
                      Visual C++ 8's runtime's assert on a call to
                      strcat_s() fails. The problem is fixed in this
                      release.</p>
                  </li>
                  <li>
                    <p><font face="monospace"><font size="1"><span style="font-weight: normal;"><a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA7_TIMESTAMP_TO_STRING">OTL_ORA7_TIMESTAMP_TO_STRING</a>
                          </span></font></font><font size="1"><span style="font-weight: normal;">and </span></font><a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA7_STRING_TO_TIMESTAMP"><font face="monospace">OTL_ORA7_STRING_TO_TIMESTAMP</font></a>
                      were introduced to support Oracle 9i's TMESTAMP
                      dadatype under #define <a href="https://otl.sourceforge.net/otl3_compile.htm#otl_ORA7">OTL_ORA7</a>,
                      This release introduces support for same #defines
                      for OTL/OCIx where x &gt;= 9 for easier migration
                      of OTL legacy apps that use OTL_ORA7 to more
                      recent OCIs (9.x, 10.x, 11.x). In example <a href="https://otl.sourceforge.net/otl4_ex473.htm">473</a>, #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA7">OTL_ORA7</a>
                      can be replaced with <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA9I">OTL_ORA9I</a>,
                      <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA10G">OTL_ORA10G</a>,
                      <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA10G_R2">OTL_ORA10G_R2</a>,
                      or <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA11G">OTL_ORA11G</a>.</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.169):</p>
                <ul>
                  <li>
                    <p>When #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA_UTF8">OTL_ORA_UTF8</a>
                      is enabled, OTL may truncate a string value, for
                      example:<font face="Arial"><font size="2">'schwarz+weiЯ'

                          gets truncated to 'schwarz+wei' on a SELECT
                          statement. OTL allocated the size of described
                          VARCHAR / NVARCHAR columns in bytes, which was
                          not sufficient to hold multibyte UTF8
                          characters that were stored as single bytes in
                          the database. On the database side, character
                          'Я' is stored in one byte in the case if the
                          database character set is "8-bit European",
                          and the client / C++ side's is UTF8, it
                          requires 2 bytes. If the database character
                          set is UTF8, then there is no such problem.
                          The problem has been fixed in this release</font></font></p>
                  </li>
                  <li>
                    <p><font face="Arial"><font size="2">A compilation
                          problem was reported for an unspecified
                          version of Informix for Linux when #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_INFORMIX_CLI">OTL_INFORMIX_CLI</a>
                          is enabled. I asked the guy (presumably
                          someone from P.R.C.) who reported the problem
                          to email me his version of the Informix header
                          files and object libraries.&nbsp; He emailed
                          me everything, I fixed the problem, emailed
                          him the patch, but I haven't heard from him
                          since.<br>
                          <br>
                          The compilation bug has been fixed in this
                          release. </font></font> </p>
                  </li>
                  <li>
                    <p><font face="Arial"><font size="2">A problem was
                          reported that when example <a href="https://otl.sourceforge.net/otl4_ex378.htm">378</a> (for Oracle
                          8.x and higher) is rewritten to use #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UNICODE">OTL_UNICODE</a>,
                          <a href="https://otl.sourceforge.net/otl3_long_string.htm">otl_long_unicode_string</a>,
                          and std::wcout, the output looks like this:</font></font></p>
                    <pre>   f1=1<br>      chunk #1, f2=*?, len=4001<br>   f1=2<br>      chunk #1, f2=##, len=6000<br>      chunk #2, f2=# , len=12000<br>      chunk #3, f2=# , len=12000<br>      chunk #4, f2=# , len=-9996<br>   f1=3<br>      chunk #1, f2=*?, len=4001</pre>
                    <p> It's obviously incorrect. The bug reporter also
                      sent me a fix along with the bug report. The fix
                      has been merged into this release.</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.168):</p>
                <ul>
                  <li>
                    <p>Some projects need to be able to connect to
                      multiple database types at the same time via ODBC.
                      For example, to MySQL and TimesTen, or to MS SQL
                      2005 and Sybase. OTL has specific #define's for
                      some database types (like #define
                      OTL_ODBC_MSSQL_2005, or #define
                      OTL_ODBC_POSTGRESQL, etc.), which makes it
                      impossible to connect to multiple database types
                      at the same time. In order to address the issue,
                      this release introduces #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_MULTI_MODE">OTL_ODBC_MULTI_MODE</a>,
                      and otl_connect::<a href="https://otl.sourceforge.net/otl3_connect_class.htm#set_connection_mode">set_connection_mode</a>().

For

more

detail,

see

example

                      <a href="https://otl.sourceforge.net/otl4_ex675.htm">675</a>.</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.167):</p>
                <ul>
                  <li>
                    <p>In this release or higher, #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UNCAUGHT_EXCEPTION_OWN_NAMESPACE">OTL_UNCAUGHT_EXCEPTION_OWN_NAMESPACE</a>
                      is obsolete. The underlying problem&nbsp; when OTL
                      gets compiled with #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STLPORT">OTL_STLPORT</a>
                      has been fixed. It's recommended to comment
                      out&nbsp;
                      #define.OTL_UNCAUGHT_EXCEPTION_OWN_NAMESPACE.</p>
                  </li>
                  <li>
                    <p>Some project still use Visual C++ 6.0. <a href="https://otl.sourceforge.net/otl3_whatn.htm#162_UNCAUGHT">OTL 4.0.162</a> made
                      #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UNCAUGHT_EXCEPTION_ON">OTL_UNCAUGHT_EXCEPTION_ON</a>
                      the default. VC 6.0's std::uncaught_exception()
                      always returns true, meaning that it doesn't work
                      the way the C++ standard defines. This release
                      stops enabling&nbsp; #define
                      OTL_UNCAUGHT_EXCEPTION_ON for VC 6.0 for backward
                      compatibility in order to allow the OTL
                      based&nbsp; projects that are stiil using VC 6.0
                      to continue to work.</p>
                  </li>
                  <li>
                    <p>This release introduces basic support for DB2
                      XML, MS SQL XML, and Oracle XMLType datatypes. For
                      more detail, see the following code examples:</p>
                    <ul>
                      <li>
                        <p style="margin-bottom: 0in;">Oracle: <a href="https://otl.sourceforge.net/otl4_ex659.htm">659</a>, <a href="https://otl.sourceforge.net/otl4_ex660.htm">660</a>, <a href="https://otl.sourceforge.net/otl4_ex661.htm">661</a>, <a href="https://otl.sourceforge.net/otl4_ex662.htm">662</a></p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">Oracle UTF-8: <a href="https://otl.sourceforge.net/otl4_ex663.htm">663</a>, <a href="https://otl.sourceforge.net/otl4_ex664.htm">664</a></p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">DB2: <a href="https://otl.sourceforge.net/otl4_ex671.htm">671</a>, <a href="https://otl.sourceforge.net/otl4_ex672.htm">672</a></p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">DB2 Unicode: <a href="https://otl.sourceforge.net/otl4_ex673.htm">673</a>, <a href="https://otl.sourceforge.net/otl4_ex674.htm">674</a></p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">MS SQL: <a href="https://otl.sourceforge.net/otl4_ex665.htm">665</a>, <a href="https://otl.sourceforge.net/otl4_ex666.htm">666</a></p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">MS SQL Unicode: <a href="https://otl.sourceforge.net/otl4_ex669.htm">669</a>, <a href="https://otl.sourceforge.net/otl4_ex670.htm">670</a></p>
                      </li>
                      <li>
                        <p>MS SQL with FreeTDS: <a href="https://otl.sourceforge.net/otl4_ex667.htm">667</a>, <a href="https://otl.sourceforge.net/otl4_ex668.htm">668</a></p>
                      </li>
                    </ul>
                  </li>
                  <li>
                    <p>This release compiles clean with g++ 4.3.0 when
                      the following command line options are enabled:</p>
                    <ul>
                      <li>
                        <p style="margin-bottom: 0in;">-Wshadow </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wall </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wundef </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wpointer-arith</p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wunused </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wreorder </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wcast-qual </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wno-uninitialized</p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wcast-align</p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wconversion</p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wsign-compare</p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Werror</p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wwrite-strings </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wcomments </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wunused-variable
                        </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wparentheses</p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-ansi </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wformat </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wstrict-aliasing=2

                        </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wstrict-null-sentinel</p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-fstrict-aliasing
                        </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wold-style-cast
                        </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Woverloaded-virtual</p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wctor-dtor-privacy

                        </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wnon-virtual-dtor</p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wsign-promo</p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wextra</p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wfloat-equal </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wmissing-noreturn

                        </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">-Wmissing-format-attribute

                        </p>
                      </li>
                      <li>
                        <p>-Weffc++</p>
                      </li>
                    </ul>
                  </li>
                  <li>
                    <p>This release has been reworked to compile clean
                      with g++'s -Weffc++. effc++ warns about violations
                      of the following style guidelines from Scott
                      Meyers™ Effective C++ book:</p>
                    <ul>
                      <li>
                        <p style="margin-bottom: 0in;">Item 6:
                          Distinguish between prefix and postfix forms
                          of increment and decrement operators. </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">Item 7: Never
                          overload operators "&amp;&amp;", "||", or ",".
                        </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">Item 11: Define a
                          copy constructor and an assignment operator
                          for classes with dynamically allocated memory.
                        </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">Item 12: Prefer
                          initialization to assignment in constructors.
                        </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">Item 14: Make
                          destructors virtual in base classes. </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;">Item 15: Have
                          "operator=" return a reference to *this. </p>
                      </li>
                      <li>
                        <p>Item 23: Don't try to return a reference when
                          you must return an object.<br>
                          <br>
                        </p>
                      </li>
                    </ul>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.166):</p>
                <ul>
                  <li>
                    <p>A bug was reported that otl_connect::<a href="https://otl.sourceforge.net/otl3_connect_class.htm#rollback">rollback</a>()

                      has no effect when OTL is used in a combination
                      with FreeTDS/ODBC against MS SQL. It turned out
                      that the feature wasn't implemnted in
                      FreeTDS/ODBC. In order to work around the problem,
                      this release introduces #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_FREETDS_ODBC_WORKAROUNDS">OTL_FREETDS_ODBC_WORKAROUNDS</a>.
                      See <a href="https://otl.sourceforge.net/otl4_mssql_freetds_examples.htm">MS
                        SQL Server / FreeTDS ODBC</a> examples for more
                      detail. The new #define is recommended for use
                      until a fix becomes available.<br>
                      <br>
                      FreeTDS/ODBC seems to have a similar problem with
                      otl_connect::rlogon()'s auto-commit with Sybase.
                      However, the new #define is not recommended as a
                      workaround for Sybase, because otl_connect::<a href="https://otl.sourceforge.net/otl3_connect_class.htm#auto_commit_off%28%29">auto_commit_off</a>()

                      and otl_connect::<a href="https://otl.sourceforge.net/otl3_connect_class.htm#auto_commit_on">auto_commit_on</a>()

functions

seem

to

work

with

Sybase.

Until

a

fix

becomes

available,

auto_commit_on()

/

auto_commit_off()

are

recommended

for

use.

See

for

                      <a href="https://otl.sourceforge.net/otl4_sybsql_freetds_examples.htm">Sybase
                        SQL Server / FreeTDS ODBC</a> examples more
                      detail.<br>
                      <br>
                      Also, FreeTDS/ODBC doesn't seem to support
                      "transaction isolation" level, that is,
                      otl_connect::<a href="https://otl.sourceforge.net/otl3_connect_class.htm#set_transaction_isolation_level">set_transaction_isolation_level</a>()

has

no

effect.

Until

the

feature

is

implemented

in

FreeTDS/ODBC,

it's

recommended

that

explicit

server

side

settings

should

be

used

instead.

For

example,

MS

SQL

supports

an

explicit

(NOLOCK)

option

on

the

FROM

clause

in

a

SELECT

statement.

Sybase

has

the

"set

transaction

isolation

level

X"

command

to

set

an

explicit,

session-wide

transaction

isolation

level.

For

more

detail,

see

examples

                      <a href="https://otl.sourceforge.net/otl4_ex516.htm">516</a> (MS SQL), and <a href="https://otl.sourceforge.net/otl4_ex561.htm">561</a> (Sybase).<br>
                      <br>
                      Many thanks to James Lowden the maintainer of
                      FreeTDS for clarifying the issues. More issues may
                      be uncovered as more developers begin using OTL
                      with FreeTDS/ODBC. I'd recommend those developers
                      to subsribe to the FreeTDS mailing list to keep
                      track of the latest developments. </p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.165):</p>
                <ul>
                  <li>
                    <p>A bug was reported that OTL/OCI crashes (memory
                      access violation) the program when a <a href="https://otl.sourceforge.net/otl3_bind_variables.htm#refcur">refcur</a>
                      bind variable is used, and the otl_stream buffer
                      size is greater than 1. The stream buffer size
                      actually has to be set to 1 in this case. In order
                      to diagnose cases like this one, OTL introduces
                      the following new <a href="https://otl.sourceforge.net/otl3_exception_class.htm">otl_exception</a>:
                      code=<a href="https://otl.sourceforge.net/otl3_exc_list.htm#32034">32034</a>,
                      otl_stream buffer size should be 1 when refcur or
                      plsql table<a href="https://otl.sourceforge.net/otl3_exc_list.htm#32034"> </a>is

                      used. OTL should throw the new exception instead
                      of memory access violation.</p>
                  </li>
                  <li>
                    <p>A new default for <font color="#000000">#define
                        <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UNCAUGHT_EXCEPTION_ON">OTL_UNCAUGHT_EXCEPTION_ON</a>
                      </font>was introduced in <a href="https://otl.sourceforge.net/otl3_whatn.htm#162_UNCAUGHT">OTL

                        4.0.162</a>. The #define was supposed to wortk
                      when #define OTL_STL is defined. This release
                      extends #define OTL_UNCAUGHT_EXCEPTION_ON to work
                      without requiring OTL_STL to be defined first, and
                      OTL_UNCAUGHT_EXCEPTION_ON is on by default. If
                      anybody has compilation issues with this new
                      arrangement, let me know, and we'd work something
                      out.</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.164):</p>
                <ul>
                  <li>
                    <p>A bug was reported that when #define
                      OTL_ORA10G_R2 is used, and a PL/SQL table of
                      NUMBER(14,4) from&nbsp; a PL/SQL package gets
                      bound with a :var&lt;double,out[xx]&gt; variable,
                      an otl_exception gets thrown that has the
                      following Oracle error message:<br>
                      <br>
                      <font face="monospace">PLS-00418: array bind type
                        must match PL/SQL table row type<br>
                        <br>
                      </font>The bug is fixed in this release. OCI10/11
                      has flaky support for PL/SQL tables of
                      BINARY_FLOAT / BINARY_DOUBLE, which makes it
                      impossible to implement any reliable scheme for
                      supporting PL/SQL tables of NUMBER and PL/SQL
                      table of BINARY_FLOAT /BINARY_DOUBLE without
                      introducing special data types (for example,
                      "binary_float" in addition to "float", which is
                      already binary) for PL/SQL tables BINARY_FLOAT /
                      BINARY_DOUBLE. Until Oracle straightens out the
                      support for PL/SQL tables of BINARY_FLOAT /
                      BINARY_DOUBLE, and the appropriate changes are
                      made to OTL, it's recommended to use PL/SQL tables
                      of NUMBERs instead. </p>
                  </li>
                  <li>
                    <p>A bug was reported that when #define UNICODE /
                      _UNICODE, OTL_UNICODE, and OTL_ODBC are defined,
                      and when a table has an accented column name in it
                      (for example,: assignй),&nbsp; function
                      SQLDescribeCol() returns bad information about the
                      column, which results in the program's crash. The
                      second bug related to accented column names was
                      reported when otl_connect::direct_exec() function
                      is used with accented table columns. The bugs were
                      due to the fact that a type cast to a signed char*
                      was used instead of unsigned char*. The bugs are
                      fixed in this release.<br>
                      <br>
                      OTL doesn't have full support for UTF16 based SQL
                      statement text. However, SQL statements based on
                      one-byte character sets&nbsp; should be fully
                      supported.</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.163):</p>
                <ul>
                  <li>
                    <p>This release compiles clean with Visual C++ 9
                      (Visual Studio 2008, which came out recently).</p>
                  </li>
                  <li>
                    <p>An OTL defined <a href="https://otl.sourceforge.net/otl3_exc_list.htm#CLOB_32008">exception</a>
                      has been changed in this release to the following
                      in order to carry more useful information: <font size="3"><br>
                        <br>
                      </font><font face="monospace"><font size="3">Writing

CLOB/BLOB

                          in stream mode: actual size is greater than
                          specified, trying to store X1 bytes / Unicode
                          characters at offset X2. New length: X3 would
                          be bigger than length of lob: X4.</font></font><font size="3"><br>
                        <br>
                        The text of the exception (of the <a href="https://otl.sourceforge.net/otl3_exception_class.htm">otl_exception</a>
                        class) carries more information than before to
                        simplify troubleshooting of incorrect custom C++
                        code. This change was originally submitted as a
                        patch and merged into this release with some
                        modifications.</font></p>
                  </li>
                  <li>
                    <p><font size="3">The following minor error was
                        reported in OTL code example <a href="https://otl.sourceforge.net/otl4_ex383.htm">383</a>: </font> </p>
                    <pre>The "drop table test_tab" statement silently fails when the table does<br>not exist (as expected) but since db.commit() isn't called immediately<br>afterward the transaction is still open and left in an error status.  <br>Any statement issued after that will fail with the following error:<br>"ERROR:  current transaction is aborted, commands ignored until end of<br>transaction block"</pre>
                    <p> Similar errors were present in some of the <a href="https://otl.sourceforge.net/otl4_postgresql_examples.htm">PostgreSQL
                        examples</a>. All the errors have been fixed in
                      this release.</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.162):</p>
                <ul>
                  <li>
                    <p>This release introduces the following code
                      examples for Informix CLI: <a href="https://otl.sourceforge.net/otl4_inf_examples.htm">examples 625-658</a>.
                      OTL has supported Informix via Informix CLI for a
                      few years. Informix CLI in Windows is
                      indistinguishable from ODBC, so in Windows #define
                      <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC">OTL_ODBC</a>
                      can used with Informix CLI. In Unix, #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_INFORMIX_CLI">OTL_INFORMIX_CLI</a>
                      can be used. </p>
                  </li>
                  <li>
                    <p>A bug was reported that when OTL is used with
                      TimesTen 7.0.2 or higher, it is impossible to set
                      the TT Prefetch size to 0, which enables the
                      default TT Prefetch sizes (see TT manuals for more
                      detail). The bug is fixed is this release. See
                      also the <a href="https://otl.sourceforge.net/otl3_stream_class.htm#STREAM_BUFFER_SIZE_0">stream

                        buffer size</a> description.</p>
                  </li>
                  <li>
                    <p>A compilation bug was reported that when OTL is
                      being compiled with g++ with -ansi commannd line
                      option, and&nbsp; #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ACE">OTL_ACE</a>. A <a href="https://sourceforge.net/forum/forum.php?thread_id=1930896&amp;forum_id=208859">patch</a>
                      was posted in the OTL discussion forum. The patch
                      has been merged with this release.</p>
                  </li>
                  <li>
                    <p>The following formatting problem was reported
                      when OTL tracing is enabled:</p>
                    <pre style="margin-bottom: 0.2in;"><font color="#000000">MY OTL TRACE ==&gt; otl_connect(this=0042A1D8)::rlogon(connect_str="/******@mssql", auto_commit=0);</font></pre>
                    <p> <font color="#000000">The user id is missing
                        from the trace. The problem is fixed in this
                        release.</font></p>
                  </li>
                  <li>
                    <p><a name="162_UNCAUGHT"></a><font color="#000000">In

order

                        to address user complaints about aborting /
                        terminating programs in the case of a cascade of
                        OTL exceptions, the following #define has been
                        made the default in this release: #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UNCAUGHT_EXCEPTION_ON">OTL_UNCAUGHT_EXCEPTION_ON</a>.
                        From the beginning, OTL, according to some C++
                        gurus who would <a href="https://otl.sourceforge.net/otl3_whatn_1.htm#HIT_IN_HEAD">hit</a> me
                        in the head, should not have had "throwing
                        destructors". See more detail on the history of
                        the question <a href="http://kolpackov.net/projects/c++/eh/dtor-1.xhtml">here</a>.<br>
                        <br>
                        By completely eliminating throwing desctructors,
                        OTL would have broken a lot of existing custom
                        code (the code would have to be rewritten), so
                        the decision had been made to introduce #define
                        OTL_UNCAUGHT_EXCEPTION_ON. <br>
                        <br>
                        Only really old C++ compilers like Visual C++
                        6.0 don't support the required C++ function
                        (uncaught_exception()). If anybody experience
                        any problems with this new default setting, let
                        me know, we would work something out.<br>
                        <br>
                        Those who do not want OTL destructors to "throw"
                        can use </font>#define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_DESTRUCTORS_DO_NOT_THROW">OTL_DESTRUCTORS_DO_NOT_THROW</a>,
                      but they would have to call the close() function
                      all otl_streams explicitly, before each stream
                      goes out scope.</p>
                  </li>
                </ul>
                <p><br>
                </p>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.161):</p>
                <ul>
                  <li>
                    <p>A bug was reported that when #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA10G">OTL_ORA10G</a>
                      (or <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA10G_R2">OTL_ORA10G_R2</a>,
                      or <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA11G">OTL_ORA11G</a>)
                      is used against an Oracle 9i database backend, the
                      OCI10 native SQLT_BDOUBLE / SQLT_BFLOAT bindings
                      don't work. The bug is fixed in this release, and
                      the fix can be enabled with #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA_LEGACY_NUMERIC_TYPES">OTL_ORA_LEGACY_NUMERIC_TYPES</a>.
                    </p>
                  </li>
                  <li>
                    <p>A bug was reported that when #defines OTL_ORA8 /
                      8I/ 9I / 10G / 10G_R2 / 11G are used with <a href="https://otl.sourceforge.net/otl3_lob_stream.htm">otl_lob_stream</a>,
                      and when the value of a CLOB/BLOB in a table goes
                      from, say a size &gt; 0 to the size of 0, the
                      actual value doesn't get set to the size of 0. The
                      bug fixed in this release.</p>
                  </li>
                  <li>
                    <p>A bug was reported that when #define OTL_ORA8 /
                      8I / 9I / 10G / 10G_R2 / 11G is defined along with
                      #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_TIMESTEN_UNIX">OTL_ODBC_TIMESTEN_UNIX</a>
                      / <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_TIMESTEN_WINDOWS">OTL_ODBC_TIMESTEN_WINDOWS</a>,
                      and the resulting executable is linked with both
                      the OCI and the TimesTen object libraries, the
                      program's performance (the Oracle side in
                      particular) degrades tenfold. The bug is fixed in
                      this release.</p>
                  </li>
                  <li>
                    <p>A bug was reported that when an otl_exception
                      gets thrown and an error is caused by an <a href="https://otl.sourceforge.net/otl3_bind_variables.htm#nchar">nchar</a>
                      or an <a href="https://otl.sourceforge.net/otl3_bind_variables.htm#nclob">nclob</a>
                      bind variable, the <a href="https://otl.sourceforge.net/otl3_exception_class.htm#var_info">var_info</a>
                      member of the otl_exception isn't populated
                      correctly. In particular, the data type is blank
                      isntead of NCHAR, or NLOB. The bug is fixed in
                      this release.</p>
                  </li>
                  <li>
                    <p>This release introduces the following new #define
                      <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_ENTERPRISEDB">OTL_ODBC_ENTERPRISEDB</a>.
                      The #define can be used with <a href="http://www.enterprisedb.com/">Enterprise
                        DB</a>, a commecial, Oracle compatible offshoot
                      of <a href="http://postgesql.org/">PostgreSQL</a>.
                      Also, see <a href="https://otl.sourceforge.net/otl4_edb_examples.htm">examples</a>
                      586-624 for more detail.</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.160):</p>
                <ul>
                  <li>
                    <p>Oracle 11g Release 1 came out recently. OTL
                      introduces the following new #define to start the
                      OTL/OCI11g series: #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA11G">OTL_ORA11G</a>.</p>
                  </li>
                  <li>
                    <p>When <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC">OTL_ODBC</a>,
                      <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_BIGINT">OTL_BIGINT</a>,
                      <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_STR_TO_BIGINT">OTL_STR_TO_BIGINT</a>,
                      and <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_BIGINT_TO_STR">OTL_BIGINT_TO_STR</a>
                      are defined, OTL does not compile with VC++ 2005,
                      and xlC (C++ in AIX). The bug is fixed in this
                      release.</p>
                  </li>
                  <li>
                    <p>When <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_DEFAULT_STRING_NULL_TO_VAL">OTL_DEFAULT_STRING_NULL_TO_VAL</a>,
                      <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UNICODE">OTL_UNICODE</a>
                      are defined together, and <a href="https://otl.sourceforge.net/otl4_refcur_stream.htm">otl_refcur_stream</a>
                      is used, the default string value that the
                      OTL_DEFAULT_STRING_NULL_VAL defines doesn't get
                      returned correctly in the case if the actual value
                      to be returned is NULL. The bug is fixed in this
                      release.</p>
                  </li>
                  <li>
                    <p><a href="https://otl.sourceforge.net/otl4_stream_read_iterator.htm">otl_stream_read_iterator</a>::get(const

                      int pos, unsigned char* s) was reported to have a
                      compilation error on an unspecified C++ compiler,
                      on an unspecified platform. The proposed code
                      change was merged into this release. .</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.159):</p>
                <ul>
                  <li>
                    <p>In OTL 4.0.158, a bug was introduced which causes
                      the following error message when an &lt;int&gt;
                      bind variable is used:</int></p>
                    <pre>[Microsoft][SQL Native Client][SQL Server]Invalid 2-Parameter (''): The<br>0x23 data typ is a LOB marked as obsolete and used as output parameter.<br>Obsolete types are not supported as output parameters.</pre>
                    <p> The bug is fixed in this release.</p>
                  </li>
                  <li>
                    <p><font face="Arial"><font size="3">C++Builder 2007
                          generates the following error when compiling
                          OTL:<br>
                          <br>
                          &nbsp;&nbsp;&nbsp; <font face="monospace">Error

                            error 2285: E2285</font> <font face="monospace">Could not find a match for
                            'operator
                            otl_ora8_inout_stream::operator&gt;&gt;(float)</font></font></font></p>
                    <p><font face="Arial"><font size="3"><span lang="en-US">There are similar errors in the
                            rest of the numeric operators &gt;&gt;() of
                            the same class. The error goes away when
                            #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_NO_TMPL_MEMBER_FUNC_SUPPORT">OTL_NO_TMPL_MEMBER_FUNC_SUPPORT</a>
                            is enabled. The bug is fixed in this release
                            by enabling the #define for Borland C++ by
                            default.</span></font></font></p>
                  </li>
                  <li>
                    <p><font face="Arial"><font size="3"><span lang="en-US">Michael <a href="mailto:misha@ait.susu.ac.ru">Shishkin</a>
                            from Russia contributed the <a href="https://otl.sourceforge.net/otl4_subscriber.htm">otl_subscriber</a>
                            class that uses the <a href="http://www.oracle.com/technology/oramag/oracle/06-mar/o26odpnet.html">Oracle

                              Database Change Notification</a> Interface
                            to implement a more convenient publish /
                            subscribe mechanism compared to the straight
                            OCI. The otl_subscriber class is optional
                            and can be enabled via #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA_SUBSCRIBE">OTL_ORA_SUBSCRIBE</a>.
                            See also example <a href="https://otl.sourceforge.net/otl4_ex585.htm">585</a>.</span></font></font></p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New in (OTL 4.0.158):</p>
                <ul>
                  <li>
                    <p>When #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UNICODE_EXCEPTION_AND_RLOGON">OTL_UNICODE_EXCEPTION_AND_RLOGON</a>
                      and #define _UNICODE / UNICODE (standard C/C++
                      #defines for Unicode applications) are enabled,
                      and otl_connect::rlogon() is used with ODBC-like
                      style connect strings (<font size="2">"UID=scott;PWD=tiger;DSN=mssql",

                        etc.), the underlying SQLDriverConnect() call
                        may crash the program, because the size of the
                        output string buffer was specified in bytes
                        instead of wide characters. The bug is fixed in
                        this release:<br>
                        <br>
                        &nbsp;&nbsp; </font><font face="monospace"><font size="2"><i><b>Before </b></i></font></font><font face="monospace"><font size="2">(line 9678):</font></font><font size="2"><br>
                        <br>
                        &nbsp;&nbsp; </font><font face="monospace"><font size="2">status=SQLDriverConnect</font></font><font size="2"><br>
                        &nbsp;&nbsp;&nbsp; </font><font face="monospace"><font size="2">(hdbc,</font></font><font size="2"><br>
                        &nbsp;&nbsp;&nbsp;&nbsp; </font><font face="monospace"><font size="2">0,</font></font><font size="2"><br>
                        &nbsp;&nbsp;&nbsp;&nbsp; </font><font face="monospace"><font size="2">temp_connect_str2,</font></font><font size="2"><br>
                        &nbsp;&nbsp;&nbsp;&nbsp; </font><font face="monospace"><font size="2">OTL_SCAST(short,len),</font></font><font size="2"><br>
                        &nbsp;&nbsp;&nbsp;&nbsp; </font><font face="monospace"><font size="2">out_str,</font></font><font size="2"><br>
                        &nbsp;&nbsp;&nbsp;&nbsp; </font><font face="monospace"><font size="2">sizeof(out_str),</font></font><font size="2"><br>
                        &nbsp;&nbsp;&nbsp;&nbsp; </font><font face="monospace"><font size="2">&amp;out_len,</font></font><font size="2"><br>
                        &nbsp;&nbsp;&nbsp;&nbsp; </font><font face="monospace"><font size="2">SQL_DRIVER_NOPROMPT);<br>
                          <br>
                          &nbsp;&nbsp; </font></font><font face="monospace"><font size="2"><i><b>Now </b></i></font></font><font face="monospace"><font size="2">(line 9678):<br>
                          <br>
                          &nbsp;&nbsp; status=SQLDriverConnect<br>
                          &nbsp;&nbsp;&nbsp; (hdbc,<br>
                          &nbsp;&nbsp;&nbsp;&nbsp; 0,<br>
                          &nbsp;&nbsp;&nbsp;&nbsp; temp_connect_str2,<br>
                          &nbsp;&nbsp;&nbsp;&nbsp; OTL_SCAST(short,len),<br>
                          &nbsp;&nbsp;&nbsp;&nbsp; out_str,<br>
                          &nbsp;&nbsp;&nbsp;&nbsp; sizeof(out_str)</font></font><font color="#ff0000"><font face="monospace"><font size="2"><b>/sizeof(SQLWCHAR)</b></font></font></font><font face="monospace"><font size="2">,<br>
                          &nbsp;&nbsp;&nbsp;&nbsp; &amp;out_len,<br>
                          &nbsp;&nbsp;&nbsp;&nbsp; SQL_DRIVER_NOPROMPT);</font></font></p>
                  </li>
                  <li>
                    <p><font size="2">In OTL/OCI8/9/10&nbsp; a break
                        statetement was missing in<font face="monospace"><br>
                          <br>
                          27195&nbsp; void open<br>
                          27196&nbsp; (const otl_stream_buffer_size_type
                          arr_size,<br>
                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                          const char* sqlstm,<br>
                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                          otl_connect&amp; db,<br>
                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                          const char* ref_cur_placeholder=0,<br>
                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                          const char* sqlstm_label=0)<br>
                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                          OTL_THROWS_OTL_EXCEPTION<br>
                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

                          ...<br>
                          27213&nbsp;&nbsp;&nbsp;&nbsp; case
                          otl_select_stream_type:<br>
                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

                          ...<br>
                          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

                        </font><font color="#ff0000"><font face="monospace">break;</font></font><font face="monospace"><br>
                          <br>
                        </font>The bug is fixed is this release.</font></p>
                  </li>
                  <li>
                    <p><font size="2">Following new #define is
                        introduced: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_MAP_LONG_TO_SQL_C_SBIGINT">OTL_MAP_LONG_TO_SQL_C_SBIGINT</a>.
                        It maps 64-bit longs into SQL_C_BIGINT instead
                        of SQL_C_SLONG in OTL/ODBC/DB2-CLI.</font></p>
                  </li>
                  <li>
                    <p><font size="2">The <a href="https://otl.sourceforge.net/otl3_faq.htm#MYSQL">question</a>
                        on MySQL in the F.A.Q was corrected to explain
                        that InnoDB type tables can be used with OTL.</font></p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New in (OTL 4.0.157):</p>
                <ul>
                  <li>
                    <p>A problem was reported that OTL doesn't compile
                      with aCC (HP ANSI C++ B3910B A.03.63), and it
                      requires #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_NO_TMPL_MEMBER_FUNC_SUPPORT">OTL_NO_TMPL_MEMBER_FUNC_SUPPORT</a>
                      to be enabled. The problem is fixed in this
                      release, and the aCC compiler has been added to
                      the list of C++ compilers for which the "no
                      template member function support" feature is
                      enabled by default.</p>
                  </li>
                  <li>
                    <p>A problem was reported that when OTL is used with
                      <a href="http://stlport.org/">STL Port</a>, and
                      when STL Port is not configured to expose some
                      standard C++ functions like uncaught_exception()
                      in STL Port's own namespace _STL, and when #define
                      <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UNCAUGHT_EXCEPTION_ON">OTL_UNCAUGHT_EXCEPTION_ON</a>
                      is enabled, the C++ compiler complains that the
                      uncaught_exception() function is not defined in
                      the _STL namespace. In order to fix the problem,
                      the following new #define may be used: <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_UNCAUGHT_EXCEPTION_OWN_NAMESPACE">OTL_UNCAUGHT_EXCEPTION_OWN_NAMESPACE</a>.<br>
                      <br>
                      Of course, the STL Port can be reconfigured and
                      rebuilt in order to expose the
                      uncaught_exception() in the _STL namespace, but
                      sometimes it's not an option.</p>
                  </li>
                  <li>
                    <p>OTL 4.0.156 introduced a bug in its new support
                      for BINARY_DOUBLE: when an actual BINARY_DOUBLE
                      column gets SELECTed from a table, it causes a
                      program's crash. The bug is fixed in this release.</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.156):</p>
                <ul>
                  <li>
                    <p>A problem was reported that when OTL is used with
                      the OCI 10g, and BINARY_DOUBLE, there is a roundup
                      error in the 17th and 16th decimal singificant
                      digits, for example when 1.6666666666666667E+000
                      gets inserted into a BINARY_DOUBLE column in a
                      table via OTL, the resulting value that is stored
                      in the table is 1.6666666666666701E+000. A similar
                      thing happens with BINARY_FLOAT values. In order
                      to bind &lt;float&gt; and &lt;double&gt; with
                      Oracle NUMBERs, OTL used SQLT_FLT (with
                      sizeof(float), and sizeof(double), respectively)
                      as an external OCI datatype. The same SQLT_FLT was
                      used to bind &lt;float&gt; and &lt;double&gt; with
                      BINARY_FLOAT, and BINARY_DOUBLE. The OCI manual
                      didn't specifiy any ramifications about doing
                      that. <br>
                      <br>
                      It appears that better alternatives would be
                      SQLT_BFLOAT and SQLT_BDOUBLE (OCI manual only
                      mentioned that performance would be better, and
                      nothing else). It also turned out that SQl_BFLOAT
                      and SQLT_BDOUBLE work better / have better
                      precision, even when bound with NUMBERs. <br>
                      <br>
                      As I understood the mechanism, when you bind a
                      &lt;double&gt; as SQLT_BDOUBLE with, say, NUMBER
                      or BINARY_DOUBLE, or with any other numeric type,
                      a &lt;double&gt; value gets sent across the wire /
                      SQL*Net as is, as opposed to a &lt;double&gt;
                      value would be converted into some wire format by
                      the OCI, if the &lt;double&gt; variable is bound
                      as SQLT_FLT (sizof(double)),. In the latter case
                      the conversion loses the 16th and the 17th decimal
                      significant digits (aka roundup).<br>
                      <br>
                      The bug has been fixed in this release. When
                      #define OTL_ORA10G or #define OTL_ORA10G_R2 is
                      defined, &lt;float&gt; and &lt;double&gt; get
                      bound as SQLT_BFLOAT and SQLT_BDOUBLE
                      respectively, which provides better precision.</double></float></double></double></double></double></double></float></double></float></p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (int OTL 4.0.155):</p>
                <ul>
                  <li>
                    <p>Under #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA_TIMESTAMP">OTL_ORA_TIMESTAMP</a>,
                      OTL <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_TRACE">tracing</a>
                      didn't trace Oracle TIMESTAMP / DATE values. The
                      bug is fixed in this release.</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.154):</p>
                <ul>
                  <li>
                    <p>Oracle 10G R2 (10.2) introduced the following
                      bug:<br>
                      <br>
                      <font face="monospace">When a 'alter session set
                        NLS%' statement is first executed in parse only
                        mode and then in normal mode, the setting
                        changed does not get reflected. </font>Bug # in
                      <a href="http://metalink.oracle.com/">metalink.oracle.com</a>
                      is 4904743. Oracle promised to fix the bug in
                      Oracle 11g.<br>
                      <br>
                      OTL used PARSE ONLY to&nbsp; implement
                      otl_connect::<a href="https://otl.sourceforge.net/otl3_connect_class.htm#syntax_check">syntax_check</a>(),

                      and PARSE ONLY + normal mode for direc_exec()
                      functions. So, the bug broke the OTL logic for
                      'alter session set NLS%' commands. This release
                      works around the bug.</p>
                  </li>
                  <li>
                    <p>This release introduces native support for <a href="http://www.oracle.com/timesten/index.html">TimesTen</a>
                      via the following new #defines<a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_TIMESTEN_WIN">:
                        OTL_ODBC_TIMESTEN_WIN</a>, <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_TIMESTEN_UNIX">OTL_ODBC_TIMESTEN_UNIX</a>.
                      Code <a href="https://otl.sourceforge.net/otl4_t10_examples.htm">examples</a>
                      for TimesTen have been updated to reflect the new
                      feature.</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.153):</p>
                <ul>
                  <li>
                    <p style="margin-bottom: 0in;">OTL compiles clean
                      with the latest G++ (GCC 4.2) </p>
                  </li>
                  <li>
                    <p style="margin-bottom: 0in;">OTL compiles clean
                      with Visual C++ 2005 (version 8.0) without
                      disabling warning C4996: <font face="monospace">#pragma

                        warning (disable:4996)</font>. Old C string
                      functions have been replaced&nbsp; with more
                      secure VC++ 8.0 string functions (for example,
                      strcpy_s(), strcat_s(), sprintf_s()) whenever
                      possible, without breaking the existing design too
                      much. Of course, the new string functions get
                      enabled only when OTL is being compiled with VC++
                      8.0. </p>
                  </li>
                  <li>
                    <p>Actual code <a href="https://otl.sourceforge.net/otl4_examples.zip">examples</a>
                      have been reworked to compile clean with Visual
                      C++ 8.0.</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New&nbsp; (in OTL 4.0.152):</p>
                <ul>
                  <li>
                    <p>A bug was reported that OTL 4.0.147 - OTl 4.0.151
                      broke <a href="https://otl.sourceforge.net/otl3_bind_variables.htm#access_qualifiers">inout</a>
                      bind variables' behavior. The actual problem was
                      that when NULL gets written into an inout
                      variable, the OTL stream's internal NULL indicator
                      doesn't get set to non-NULL on the output in case
                      if the variable receives a non-NULL value from the
                      database. The bug was introduced&nbsp; by an
                      optimization tweak in OTL 4.0.147, and fixed in
                      this release.</p>
                  </li>
                  <li>
                    <p>(Updated): There is an open source ODBC driver
                      for Linux/Unix/Windows for accessing MS SQL 7.0 /
                      2000 / 2005 and Sybase 10.x / 11.x / 12.x / 15.x:.
                      It's called <a href="http://freetds.org/">FreeTDS</a>.
                      At this point time, the FreeTDS ODBC driver
                      (version 0.63) is high enough quality to work with
                      OTL. The following FreeTDS based sets of code
                      examples have been added: <a href="https://otl.sourceforge.net/otl4_mssql_freetds_examples.htm">MS SQL
                        Server / FreeTDS ODBC,</a> <a href="https://otl.sourceforge.net/otl4_sybsql_freetds_examples.htm">Sybase
                        SQL Server / FreeTDS ODBC</a>. <br>
                      <br>
                      FreeTDS ODBC supports the bulk interface, calls to
                      stored procedures, etc. It doesn't support some
                      features that are supported by the native MS SQL
                      and Sybase ODBC drivers, but for a free ODBC
                      driver, it's good enough performance-wise, and
                      feature-wise. And it provides access to MS SQL
                      from Linux / Unix. Sybase native ODBC driver is
                      available for Windows and Linux. So, FreeTDS ODBC
                      can be used for accessing Sybase from Solaris and
                      AIX (or any other supported platform that FreeTDS
                      supports). In non-Windows platforms, FreeTDS ODBC
                      can be used with <a href="http://www.unixodbc.org/">unixODBC,</a> or<a href="http://iodbc.org/"> iODBC</a>.</p>
                  </li>
                  <li>
                    <p>(Updated):<a href="https://otl.sourceforge.net/otl4_t10_examples.htm">TimesTen

code

                        examples</a> have been tested against <a href="http://www.oracle.com/technology/products/timesten/index.html">TimesTen</a>
                      7.0.</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.151):</p>
                <ul>
                  <li>
                    <p>This release introduces better support for MS SQL
                      Server 2005 via the following new define: #define
                      <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_MSQL_2005">OTL_ODBC_MSSQL_2005</a>.
                      The main difference between OTL_ODBC and
                      OTL_ODBC_MSQL_2005 is that the latter has <a href="https://otl.sourceforge.net/otl3_lob_stream.htm">otl_lob_stream</a>
                      support for VARCHAR(MAX), VARBINARY(MAX), and
                      NVARCHAR(MAX). Examples for <a href="https://otl.sourceforge.net/otl4_mssql_examples.htm">MS SQL Server /
                        ODBC</a> and <a href="https://otl.sourceforge.net/otl4_mssql_unicode_examples.htm">MS SQL
                        Server Unicode / ODBC&nbsp; </a>have been
                      updated. For more detail, see examples <a href="https://otl.sourceforge.net/otl4_ex497.htm">497</a>, <a href="https://otl.sourceforge.net/otl4_ex498.htm">498</a>, <a href="https://otl.sourceforge.net/otl4_ex499.htm">499</a>, <a href="https://otl.sourceforge.net/otl4_ex500.htm">500</a>, <a href="https://otl.sourceforge.net/otl4_ex501.htm">501</a>. </p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.150):</p>
                <ul>
                  <li>
                    <p>A problem was reported that OTL throws an
                      "Invalid Handle" (OCI) exception when a PL/SQL
                      block / stored procedure returns an uninitialized
                      CLOB / BLOB locator, and when the CLOB / BLOB is
                      being written to / read from via an <a href="https://otl.sourceforge.net/otl3_lob_stream.htm">otl_lob_stream</a>.
                      To address the problem, a new function has been
                      added to the lob stream class: i<a href="https://otl.sourceforge.net/otl3_lob_stream.htm#is_initialized">s_initialized</a>().</p>
                  </li>
                  <li>
                    <p>This release introduces support for Oracle UTF8
                      via the following new #define: #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA_UTF8">OTL_ORA_UTF8</a>.
                      See also examples for <a href="https://otl.sourceforge.net/otl4_ora9_utf8_examples.htm">Oracle 9i,
                        UTF8</a>, and <a href="https://otl.sourceforge.net/otl4_ora10_utf8_examples.htm">Oracle 10g,
                        UTF8</a>.</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.149):</p>
                <ul>
                  <li>
                    <p>A memory leak was reported in <a href="https://otl.sourceforge.net/otl3_stream_class.htm">otl_stream</a>,
                      which turned out to be a call to
                      otl_stream::open() in a loop without a matching
                      call to otl_stream::close().&nbsp; In order to
                      simplify debugging of problems like that, this
                      release introduces the following two new OTL
                      defined exceptions:</p>
                    <ul>
                      <li>
                        <p style="margin-bottom: 0in;">code <a href="https://otl.sourceforge.net/otl3_exc_list.htm#32030">32030</a>,
                          otl_stream is already open </p>
                      </li>
                      <li>
                        <p>code <a href="https://otl.sourceforge.net/otl3_exc_list.htm#32031">32031</a>,
                          otl_connect is already connected</p>
                      </li>
                    </ul>
                  </li>
                  <li>
                    <p>DB2 zOS does not normally release row locks on a
                      SELECT statement, even after all the rows were
                      already fetched, and even the underlying cursor
                      was closed. In order to release the row locks, the
                      SELECT statement has to be "committed" with an
                      explicit otl_connect::commit() call. The thing
                      gets worse when on the DB2 zOS side, a timeout on
                      "inactive DB2 threads that lock resources" is set,
                      which results in a forced disconnect. DB2 CLI
                      manual recommends to explicitly set the SQL
                      statement's SQL_ATTR_CLOSE_BEHAVIOR attribute to
                      SQL_CC_RELEASE (read locks are released), in which
                      case the DB2 server attempts to release read
                      locks. No guarantees, of course. <br>
                      <br>
                      This release sets the SQL statement's attribute to
                      the recommended value in case if the SELECT
                      statement's isolation level was either uncommitted
                      read (UR), or cursor stability (CS, aka "read
                      committed"). </p>
                  </li>
                  <li>
                    <p>In this release, for DB2 CLI, all calls to
                      SQLFreeStmt(hstmt,SQL_CLOSE) were replaced with
                      SQLCloseCursor(hstmt). The difference between the
                      two types of calls is that the latter will return
                      a DB2 CLI error if the call is made on a closed
                      cursor. SQLFreeStmt(hstmt,SQL_CLOSE) will return a
                      "success". This was done in order to simplify
                      debugging of potential problems with cursor
                      management.<br>
                      <br>
                    </p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.148):</p>
                <ul>
                  <li>
                    <p>#define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_TRACE_ENABLE_STREAM_LABELS">OTL_TRACE_ENABLE_STREAM_LABELS</a>.
                      When this #define is enabled, OTL trace records
                      SQL statement labels instead of the bodies of the
                      SQL statements. It is useful for reducing the size
                      of the OTL trace.</p>
                  </li>
                  <li>
                    <p>#define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_NO_TMPL_MEMBER_FUNC_SUPPORT">OTL_NO_TMPL_MEMBER_FUNC_SUPPORT</a>
                      was introduced in OTL <a href="https://otl.sourceforge.net/otl3_whatn_1.htm#OTL40127">4.0.127</a>.
                      The problem was reported that Visual C++ 7.0
                      (2002) does not support / has a bug in template
                      member functions. The OTL header file will
                      automatically enable the #define for Visual C++
                      7.0 from this release and on. Visual C++ 7.1, and
                      8.0 do not have the same problem / bug. </p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.147):</p>
                <ul>
                  <li>
                    <p>Internal code cleanup. Also, otl_stream::<a href="https://otl.sourceforge.net/otl3_stream_class.htm#flush">flush</a>()
                      function has been optimized by 2-2.5%. Mileage may
                      vary from one C++ compiler to another.</p>
                  </li>
                  <li>
                    <p>Following new #defines have been introduced: <font face="monospace"><font size="1"><span style="font-weight: normal;"><a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA7_TIMESTAMP_TO_STRING">OTL_ORA7_TIMESTAMP_TO_STRING</a>,</span></font></font><a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ORA7_STRING_TO_TIMESTAMP"><font face="monospace">OTL_ORA7_STRING_TO_TIMESTAMP</font></a>.
                      <br>
                      The #de<span style="font-weight: normal;">fines
                        should be used when there is a need to use OCI7
                        and Oracle 9i/10g TIMESTAMPs in order to enhance
                        legacy applications. See also example <a href="https://otl.sourceforge.net/otl4_ex473.htm">473</a>.</span></p>
                  </li>
                  <li>
                    <p><span style="font-weight: normal;"><a href="https://otl.sourceforge.net/otl4_sqlite_examples.htm">Examples</a>
                        for <a href="http://sqlite.org/">SQLite</a>
                        have been updated to match what's available in
                        SQLite 3.3.x, and <a href="http://www.ch-werner.de/sqliteodbc/">SQLite

                          ODBC </a>driver 0.71.</span></p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.146):</p>
                <ul>
                  <li>
                    <p>OTL/ODBC didn't compile with the <a href="http://www.enea.com/templates/Extension____259.aspx">Polyhedra</a>
                      ODBC header files. The bug has been fixed in this
                      release.</p>
                  </li>
                  <li>
                    <p>Description of #define <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ODBC_POSTGRESQL">OTL_ODBC_POSTGRESQL</a>
                      as well as the PostgreSQL <a href="https://otl.sourceforge.net/otl4_postgresql_examples.htm">examples</a>
                      have been changed.</p>
                  </li>
                  <li>
                    <p>The <a href="https://otl.sourceforge.net/otl3_faq.htm">F.A.Q.</a> has more
                      answers the following questions:</p>
                    <ul>
                      <li>
                        <p style="margin-bottom: 0in;"><font size="3">Why

                            <a href="https://otl.sourceforge.net/otl3_faq.htm#Nested_Query">nested
                              queries</a> with bind variables do not
                            work in MS SQL Server?</font> </p>
                      </li>
                      <li>
                        <p><font size="3">How do I connect to my
                            database <a href="https://otl.sourceforge.net/otl3_faq.htm#NO_DSN">without</a>
                            creating an ODBC DSN?</font></p>
                      </li>
                    </ul>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.145):</p>
                <ul>
                  <li>
                    <p>Basic support for MS SQL 2005 VARCHAR(MAX) and
                      VARBINARY(MAX) is introduced in this release.
                      VARCHAR(MAX) and VARBINARY(MAX) data types are
                      "replacements" for "old" TEXT and IMAGE. The new
                      types are not quite backward compatible as far as
                      MS SQL ODBC is concerned. Basically it works, only
                      the OTL <a href="https://otl.sourceforge.net/otl3_stream_class.htm#set_lob_stream_mode">LOB

                        stream mode</a> doesn't work. I'd appreciate
                      very much if somebody could&nbsp; point me to an
                      ODBC based code example that demonstrates how to
                      use VARCHAR(MAX) / VARBINARY(MAX)&nbsp; in
                      piece-wise read/write modes.</p>
                  </li>
                  <li>
                    <p>The following code examples have been introduced
                      to demonstrate more [new] features and code
                      techniques:</p>
                    <ul>
                      <li>
                        <p style="margin-bottom: 0in;"><a href="https://otl.sourceforge.net/otl4_ex468.htm"><b>Example 468 (MS SQL
                              Server 2005 and VARCHAR(MAX))</b></a> </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;"><a href="https://otl.sourceforge.net/otl4_ex469.htm"><b>Example 469 (MS SQL
                              Server 2005 and VARBINARY(MAX))</b></a> </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;"><a href="https://otl.sourceforge.net/otl4_ex470.htm"><b>Example 470 (MS SQL
                              Server 2005, INSERT with OUTPUT clause)</b></a>
                        </p>
                      </li>
                      <li>
                        <p style="margin-bottom: 0in;"><a href="https://otl.sourceforge.net/otl4_ex471.htm"><b>Example 471 (DB2,
                              stored procedure with output parameters
                              and a return code)</b></a> </p>
                      </li>
                      <li>
                        <p><a href="https://otl.sourceforge.net/otl4_ex472.htm"><b>Example 472 (DB2,
                              Insert/Implicit Result Set (Stored Proc)
                              /Update)</b></a></p>
                      </li>
                    </ul>
                  </li>
                  <li>
                    <p>This release enforces the minimum size of 2
                      characters in <font face="monospace">:var&lt;char[xxx]&gt;</font>
                      declarations. The reason is that char[1] is
                      invalid because OTL char[xxx] variables are <a href="https://otl.sourceforge.net/otl3_bind_variables.htm#char">null
                        terminated</a> strings. <font face="monospace">#define

                        <a href="https://otl.sourceforge.net/otl3_compile.htm#OTL_ADD_NULL_TERMINATOR_TO_STRING_SIZE">OTL_ADD_NULL_TERMINATOR_TO_STRING_SIZE</a></font>
                      adds one character to the string length, which
                      makes <font face="monospace">:var&lt;char[1]&gt;</font>
                      a valid declaration. </p>
                  </li>
                  <li>
                    <p>OTL <a href="https://otl.sourceforge.net/otl3_whatn_1.htm#40138">4.0.138</a>
                      relaxed the requirement of presetting the LOB
                      length before the first chunk of the LOB gets
                      written to the LOB stream (<a href="https://otl.sourceforge.net/otl3_lob_stream.htm">otl_lob_stream)</a>,
                      which changed the ODBC / DB2 CLI function call
                      sequence. A bug was reported that when a LOB
                      stream is used for writing the LOB value, and the
                      stream gets destroyed before the end of the row,
                      which LOB was written to, it causes the "invaid
                      function call sequence" error. The actual error
                      message is different in different database types,.
                      The bug is fixed in this release. This problem
                      affects only ODBC and DB2 CLI applications, and
                      only if the LOB stream is destroyed before the end
                      of the row. The following [long] piece of code
                      demonstrates the problem: <br>
                      <br>
                      <big><big><font face="monospace"><font size="1"><big><big>void

                                  insert()<br>
                                  // insert rows into table<br>
                                  {<br>
                                  &nbsp;otl_long_string f2(6000); //
                                  define long string variable<br>
                                  &nbsp;otl_stream o; // defined an
                                  otl_stream variable<br>
                                  &nbsp;o.set_lob_stream_mode(true); <br>
                                  &nbsp; // set the "lob stream mode"
                                  flag<br>
                                  &nbsp;o.open(1, <br>
                                  &nbsp; // buffer size has to be set to
                                  1 for operations with LOBs<br>
                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

                                  "insert into test_tab "<br>
                                  &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                  "values(:f1&lt;int&gt;,:f2&lt;varchar_long&gt;,

                                  "<br>
                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

                                  ":f3&lt;varchar_long&gt;) ",<br>
                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

                                  // SQL statement<br>
                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

                                  db // connect object<br>
                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                  );<br>
                                  &nbsp;o.set_commit(0); <br>
                                  &nbsp; // setting stream "auto-commit"
                                  to "off". It is required<br>
                                  &nbsp; // when LOB stream mode is
                                  used.<br>
                                  <br>
                                  &nbsp;int i,j;<br>
                                  &nbsp;otl_lob_stream *lob; <br>
                                  &nbsp; // LOB stream for
                                  reading/writing unlimited number<br>
                                  &nbsp; // of bytes regardless of the
                                  buffer size.<br>
                                  &nbsp;otl_lob_stream *lob2; <br>
                                  &nbsp; // LOB stream for
                                  reading/writing unlimited number<br>
                                  &nbsp; // of bytes regardless of the
                                  buffer size.<br>
                                  <br>
                                  &nbsp;for(i=1;i&lt;=20;++i){<br>
                                  &nbsp; lob = new otl_lob_stream;<br>
                                  &nbsp; lob2 = new otl_lob_stream;<br>
                                  <br>
                                  &nbsp; o&lt;&lt;i;<br>
                                  &nbsp; o&lt;&lt;*lob; // Initialize
                                  otl_lob_stream by writing it<br>
                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

                                  // into otl_stream.<br>
                                  &nbsp; o&lt;&lt;*lob2; // Initialize
                                  otl_lob_stream by writing it<br>
                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

                                  // into otl_stream.<br>
                                  <br>
                                  &nbsp; for(j=0;j&lt;5000;++j)<br>
                                  &nbsp;&nbsp; f2[j]='*';<br>
                                  &nbsp; f2[5000]='?';<br>
                                  &nbsp; f2.set_len(5001);<br>
                                  <br>
                                <br></big></big></font></font><font color="#996633"><font face="monospace"><font size="1"><big><big>&nbsp; // OTL &lt;
                                    4.0.138</big></big></font></font></font><font face="monospace"><font size="1"><big><big><br>
                                </big></big></font></font><font color="#996633"><font face="monospace"><font size="1"><big><big>&nbsp;
                                    lob-&gt;set_len(5001+2123); //
                                    setting the total&nbsp; size of</big></big></font></font></font><font face="monospace"><font size="1"><big><big><br>
                                </big></big></font></font><font color="#996633"><font face="monospace"><font size="1"><big><big>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

                                    // the TEXT to be written.</big></big></font></font></font><font face="monospace"><font size="1"><big><big><br>
                                  &nbsp;&nbsp;&nbsp; *lob&lt;&lt;f2; writing="" first="" chunk="" of="" the="" text="" into="" lob<br="">
                                  <br>
                                  <br>
                                  &nbsp; f2[2122]='?';<br>
                                  &nbsp; f2.set_len(2123); // setting
                                  the size of the second chunk<br>
                                  <br>
                                  &nbsp; *lob&lt;&lt;f2; // writing the second chunk of text into lob<br>
                                  &nbsp; lob-&gt;close(); // closing the
                                  otl_lob_stream<br>
                                  <br>
                                </big></big></font></font><font color="#ff6666"><font face="monospace"><font size="1"><big><big>&nbsp;</big></big></font></font></font><font color="#ff0000"><font face="monospace"><font size="1"><big><big> delete lob; <br>
                                    &nbsp;&nbsp; // here is a problem
                                    (in OTL 4.0.138 - 4.0.144), <br>
                                    &nbsp;&nbsp; // OK in 4.0.145 (this
                                    release)<br>
                                  </big></big></font></font></font><font face="monospace"><font size="1"><big><big>&nbsp;

//

                                  not the </big></big></font></font><font face="monospace"><font size="1"><big><big><i>end

of

                                    the row</i></big></big></font></font><font face="monospace"><font size="1"><big><big>
                                  yet<br>
                                  &nbsp; for(j=0;j&lt;5000;++j)<br>
                                  &nbsp;&nbsp; f2[j]='*';<br>
                                  &nbsp; f2[5000]='?';<br>
                                  &nbsp; f2.set_len(5001);</big></big></font></font></big></big></p>
                  </li>
                </ul>
                <p><big><big><font color="#996633">&nbsp; &nbsp;
                        &nbsp;&nbsp; <font face="monospace"><font size="1"><big><big>// OTL &lt; 4.0.138</big></big></font></font></font></big></big></p>
                <ul>
                  <big> </big>
                  <p><big><big><font color="#996633">&nbsp; </font><font color="#996633"><font face="monospace"><font size="1"><big><big>lob2-&gt;set_len(5001+2123);

                                  // setting the total&nbsp; size of</big></big></font></font></font><font face="monospace"><font size="1"><big><big><br>
                              </big></big></font></font><font color="#996633"><font face="monospace"><font size="1"><big><big>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

                                  // the TEXT to be written.</big></big></font></font></font><font face="monospace"><font size="1"><big><big><br>
                                &nbsp; *lob2&lt;&lt;f2; // writing first chunk of the text into lob<br>
                                <br>
                                &nbsp; f2[2122]='?';<br>
                                &nbsp; f2.set_len(2123); // setting the
                                size of the second chunk<br>
                                <br>
                                &nbsp; *lob2&lt;&lt;f2; // writing the second chunk of text into lob<br>
                                &nbsp; lob2-&gt;close(); // closing the
                                otl_lob_stream<br>
                                &nbsp; // end of the row<br>
                                &nbsp; </big></big></font></font><font color="#33cc00"><font face="monospace"><font size="1"><big><big>//delete lob; //
                                  deleting here is OK</big></big></font></font></font><font face="monospace"><font size="1"><big><big><big><br>
                                  &nbsp; delete lob2;<br>
                                  &nbsp;} </big></big></big></font></font></big>
                    </big></p>
                  <big> </big>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
            <tr>
              <td width="816">
                <p>New (in OTL 4.0.144):</p>
                <ul>
                  <li>
                    <p>OTL (4.0.129 - 4.0.143) did not compile with the
                      real OCI 8.0 header files. There was the following
                      compilation error:<br>
                      <br>
                      &nbsp;&nbsp;&nbsp;&nbsp; <font face="monospace">C2065:

'OCI_PARSE_ONLY'

                        : undeclared identifier<br>
                        <br>
                      </font>The error is fixed in this release..</p>
                  </li>
                  <li>
                    <p>PostgreSQL 8.2 is out. This release has been
                      successfully tested with PostgreSQL 8.2.</p>
                  </li>
                </ul>
              </td>
              <td colspan="1" width="89" valign="top"><br>
              </td>
            </tr>
          </tbody>
        </table>
      </dd>
    </dl>
    <p align="center"><a href="https://otl.sourceforge.net/otl3_whatn_1.htm">Continued on next page</a></p>
    <hr>
    <ul>
      <p align="center"><a href="https://otl.sourceforge.net/home.htm">Go Home</a></p>
      <p>Copyright © 1996-2019, Sergei Kuchin, email: <a href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>, <a href="mailto:skuchin@gmail.com">skuchin@gmail.com&nbsp;
          <script language="JavaScript">

<!-- hide from old browsers

	var modDate = new Date(document.lastModified)

	document.write("<"+"i> Last Updated:<"+"/i> " + (modDate.getMonth()+1) + "/" + 

	modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");

 //-->

 

  </script><i> Last Updated:</i> 2/21/2025. </a>. </p>
      <p><i>Permission to use, copy, modify and redistribute this
          document for any purpose is hereby granted without fee,
          provided that the above copyright notice appear in all copies.
          THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
          WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
          WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
          THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
          CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
          LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
          CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
          OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</i></p>
    </ul>
    <p>
      <script>

var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");

document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));

</script>
      <script>

var pageTracker = _gat._getTracker("UA-5456201-1");

pageTracker._trackPageview();

</script><br>
      <br>
    </p>
    &nbsp; <br>
    &nbsp; <br>
  </body>
</html>
