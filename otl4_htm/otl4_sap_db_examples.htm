<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta content="text/html; charset=iso-8859-1"
 http-equiv="Content-Type">
  <meta content="Sergei Kuchin" name="Author">
  <meta content="Mozilla/4.77 [en] (Win95; U) [Netscape]"
 name="GENERATOR">
  <meta
 content="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library"
 name="KeyWords">
  <title>OTL 4.0, Examples for MAX-DB / SAP-DB (ODBC)</title>
</head>
<body>
<center>
<h1> OTL 4.0, Examples for MAX-DB / SAP-DB (ODBC)<br>
</h1>
</center>
The examples below work with MAX-DB / SAP-DB (ODBC). ODBC seems to be
SAP-DB's native interface that is supported on both Windows and Unix
platforms.<br>
<ol>
  <li><b><a href="otl4_ex322.htm">Example 322 (Simple
Insert/Select/Update)</a></b></li>
  <li><b><a href="otl4_ex323.htm">Example 323 (Incompatible datatypes
in stream operation)</a></b></li>
  <li><b><a href="otl4_ex324.htm">Example 324 (otl_datetime container
and DATE/TIME/TIMESTAMP table columns)</a></b></li>
  <li><b><a href="otl4_ex325.htm">Example 325 (otl_long_string and a
LONG VARCHAR column)</a></b></li>
  <li><b><a href="otl4_ex326.htm">Example 326 (otl_long_string and a
LONG BYTE column)</a></b></li>
  <li><b><a href="otl4_ex327.htm">Example 327 (std::string and
STL-compliant stream iterator)</a></b></li>
  <li><b><a href="otl4_ex328.htm">Example 328
(otl_stream::describe_select() with a simple Select)</a></b></li>
  <li><b><a href="otl4_ex329.htm">Example 329 (otl_stream and NULLs)</a></b></li>
  <li><b><a href="otl4_ex330.htm">Example 330 (Simple
Insert/Stored Proc with Result Set)</a></b></li>
  <li><b><a href="otl4_ex331.htm">Example 331&nbsp; (Simple
Unicode Insert/Select and VARCHAR UNICODE strings)</a></b></li>
  <li><b><a href="otl4_ex332.htm">Example 332 (Simple Unicode
Insert/Select with LONG VARCHAR UNICODE)</a></b></li>
  <li><b><a href="otl4_ex333.htm">Example 333 (Simple Unicode
Insert/Select with LONG VARCHAR UNICODE, and LOB streams)</a></b></li>
  <li><b><a href="otl4_ex334.htm">Example 334 (OTL stream read
iterator, simple SELECT)</a></b></li>
  <li><b><a href="otl4_ex335.htm">Example 335 (OTL stream read
iterator, implicit result set)</a></b></li>
  <li><b><a href="otl4_ex336.htm">Example 336 (Strict numeric type
checking on SELECTs)</a></b></li>
  <li><b><a href="otl4_ex337.htm">Example 337 (Insert/Update/Select
with LONG VARCHAR in stream mode and
otl_stream_read_iterator)</a></b></li>
  <li><b><a href="otl4_ex338.htm">Example 338 (Insert/Update/Select
with LONG BYTE&nbsp; in stream mode and
otl_stream_read_iterator)</a></b></li>
  <li><b><a href="otl4_ex343.htm">Example 343 (OTL stream read
iterator, "get by name" functions, SAP DB)</a></b></li>
  <li><b><a href="otl4_ex363.htm">Example
363 (VARCHAR UNICODE Insert/Select and #define OTL_UNICODE_CHAR_TYPE)</a></b></li>
  <li><b><a href="otl4_ex364.htm">Example
364 (VARCHAR UNICODE Insert/Select and #define OTL_UNICODE_STRING_TYPE)</a></b></li>
  <li><b><a href="otl4_ex370.htm">Example
370 (LONG VARCHAR UNICODE Insert/Select and #define
OTL_UNICODE_STRING_TYPE)</a></b></li>
  <li><b><a href="otl4_ex377.htm">Example 377
(Simple Insert/Select,
otl_connect::operator&lt;&lt;, &lt;&lt;=, &gt;&gt;)</a></b></li>
  <li><b><a href="otl4_ex384.htm">Example 384
(Insert/Update/Select, MAX/DB LONG VARCHAR in stream mode, and
std:strings)</a></b></li>
  <li><b><a href="file:///D%7C/oscl/vc/doc/otl4/otl4_ex394.htm">Example
394
(Insert/Update/Select
with MAX/DB LONG VARCHAR&nbsp; in stream mode, without
otl_lob_stream::set_len())</a></b></li>
  <li><b><a href="otl4_ex395.htm">Example
395 (Insert/Update/Select
with&nbsp; MAX/DB LONG BYTE in stream mode, without
otl_lob_stream::set_len())</a></b></li>
  <li><b><a href="otl4_ex455.htm">Example 455 (Simple Insert/Select
with VARCHAR BYTE datatype)</a></b></li>
  <li><b><a href="otl4_ex456.htm">Example 456 (Simple Insert/Select
with CHAR BYTE datatype)</a></b></li>
  <li><b><a href="otl4_ex466.htm">Example 466 (Simple Insert/Select
with VARCHAR BYTE datatype and otl_stream_read_iterator)</a></b></li>
  <li><b><a href="otl4_ex467.htm">Example 467 (Simple Insert/Select
with CHAR BYTE datatype and otl_stream_read_iterator)</a></b></li>
</ol>
<ul>
</ul>
<center>
<hr width="100%">
<p><a href="otl3.htm">Contents </a><a href="home.htm">Go Home</a></p>
</center>
<p>Copyright &copy; 1996-2020, Sergei Kuchin, email: <a
 href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>, <a
 href="mailto:skuchin@gmail.com">skuchin@gmail.com
<script language="JavaScript"><!-- hide from old browsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </script></a>.</p>
<p><i>Permission to use, copy, modify and redistribute this document
for any purpose is hereby granted without fee, provided that the above
copyright notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</i> </p>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>
</body>
</html>
