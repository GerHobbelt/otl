<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;
      charset=windows-1252">
    <meta name="Author" content="Sergei Kuchin">
    <meta name="GENERATOR" content="Mozilla/4.77 [en] (Win95; U)
      [Netscape]">
    <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database
      API, C++, Template Library">
    <title>Example 769 (Oracle 11.2 and higher, SDO Spatial Geometry)</title>
  </head>
  <body>
    <center>
      <h1>OTL 4.0, Example 769 (Oracle 11.2 and higher, SDO Spatial
        Geometry)</h1>
    </center>
    <h1> </h1>
    This example demonstrates how to use OTL with <a
      href="otl3_stream_class.htm#OCI_SPATIAL_GEOMETRY">oci_spatial_geometry</a>
    for reading/writing MDSYS.SDO_GEOMETRY values from/to the
    otl_stream.
    <h2>Source Code</h2>
    <pre>#include &lt;iostream&gt;<br>using namespace std;<br><br>#include &lt;stdio.h&gt;</pre>
<pre>#define <a href="otl3_compile.htm#OTL_STL">OTL_STL</a> // enables OTL/STL integration<br>#define <a href="otl3_compile.htm#OTL_ORA_SDO_GEOMETRY">OTL_ORA_SDO_GEOMETRY</a> // enables support for Oracle MDSYS.SDO_GEOMETRY<br>#define <a href="otl3_compile.htm#OTL_ORA_OCI_ENV_CREATE">OTL_ORA_OCI_ENV_CREATE</a> // enables OCI mode that supports "OCI object mode"<br>#define <a href="otl3_compile.htm#OTL_ORA_OCI_ENV_CREATE_MODE">OTL_ORA_OCI_ENV_CREATE_MODE</a> (OCI_THREADED|OCI_OBJECT) // enables OCI threaded and object modes<br>#define <a href="otl3_compile.htm#OTL_ORA11G_R2">OTL_ORA11G_R2</a> // OCI 11.2<br><br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br><a href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br>void insert()<br>{<br>  <a href="otl3_stream_class.htm">otl_stream</a> o(5, // buffer size<br>               "insert into test_tab "<br>               "values(:f1/*int*/,:f2/*<a href="otl3_bind_variables.htm#sdo_geometry">sdo_geometry</a>*/)",<br>               // SQL statement<br>               db // connect object<br>              );<br>  // Point<br>  {<br>    <a href="otl3_stream_class.htm#OCI_SPATIAL_GEOMETRY">oci_spatial_geometry</a> geom;<br>    geom.isNull = false;<br>    geom.x = 10;<br>    geom.y = 10;<br>    geom.gtype = 2001;//gType of Point2D<br>    o&lt;&lt;1<a href="otl3_stream_class.htm#OTL_STREAM_OCI_SPATIAL_GEOMETRY">&lt;&lt;</a>geom;<br>  }<br><br>  // Line<br>  {<br>    <a href="otl3_stream_class.htm#OCI_SPATIAL_GEOMETRY">oci_spatial_geometry</a> geom;<br>    geom.isNull = false;<br>    geom.gtype = 2002;//gType of Line2D<br>    geom.eleminfo.push_back(1);<br>    geom.eleminfo.push_back(2);<br>    geom.eleminfo.push_back(1);<br>// array of coordinates, every pair = (x,y). <br>// for such example line is {(100,100),(50,80),(40,40)}<br>    geom.ordinates.push_back(100.0);<br>    geom.ordinates.push_back(100.0);<br>    geom.ordinates.push_back(50.0);<br>    geom.ordinates.push_back(80.0);<br>    geom.ordinates.push_back(40.0);<br>    geom.ordinates.push_back(40.0);<br>    o&lt;&lt;2<a href="otl3_stream_class.htm#OTL_STREAM_OCI_SPATIAL_GEOMETRY">&lt;&lt;</a>geom;<br>  }<br>  <br>// Polygon<br>  {<br>    <a href="otl3_stream_class.htm#OCI_SPATIAL_GEOMETRY">oci_spatial_geometry</a> geom;<br>    geom.isNull = false;<br>    geom.gtype = 2003; //gType of Polygon2D<br>    std::vector&lt;int&gt; v1;<br>    geom.eleminfo.push_back(1);<br>    geom.eleminfo.push_back(1003);<br>    geom.eleminfo.push_back(1);<br>// array of coordinates, every pair = (x,y). <br>// for such example polygon is {(100,100),(100,0),(0,0),(0,100),(100,100)}<br>    geom.ordinates.push_back(100.0);<br>    geom.ordinates.push_back(100.0);<br>    geom.ordinates.push_back(100.0);<br>    geom.ordinates.push_back(0.0);<br>    geom.ordinates.push_back(0.0);<br>    geom.ordinates.push_back(0.0);<br>    geom.ordinates.push_back(0.0);<br>    geom.ordinates.push_back(100.0);<br>    geom.ordinates.push_back(100.0);<br>    geom.ordinates.push_back(100.0);<br>    o&lt;&lt;3<a href="otl3_stream_class.htm#OTL_STREAM_OCI_SPATIAL_GEOMETRY">&lt;&lt;</a>geom;<br>  }<br>  <br>}<br><br>void select()<br>{<br>  <a href="otl3_stream_class.htm">otl_stream</a> i(5, // buffer size<br>               "select id,geoloc from test_tab",<br>               // SQL statement<br>               db // connect object<br>              );<br>  while(!i.eof()){<br>    int id;<br>    <a href="ot3_stream_class.htm#OCI_SPATIAL_GEOMETRY">oci_spatial_geometry</a> geom;<br>    i&gt;&gt;id<a href="otl3_stream_class.htm#OTL_STREAM_OCI_SPATIAL_GEOMETRY">&gt;&gt;</a>geom;<br>    switch(geom.gtype){<br>    case 2001://read Point2D<br>      {<br>        cout&lt;&lt;"Point2D: X="&lt;&lt;geom.x&lt;&lt;", Y="&lt;&lt;geom.y&lt;&lt;endl;<br>        break;<br>      }<br>    case 2002://read line2D<br>      {<br>        cout&lt;&lt;"Line2D: ";<br>        cout&lt;&lt;"eleminfo(";<br>        for(size_t i2=0; i2&lt;geom.eleminfo.size();++i2){<br>          cout&lt;&lt;geom.eleminfo[i2];<br>          if(i2&lt;geom.eleminfo.size()-1)<br>            cout&lt;&lt;", ";<br>          else<br>            cout&lt;&lt;"), ";<br>        }<br>        cout&lt;&lt;"ordinates(";<br>        for(size_t i2=0; i2&lt;geom.ordinates.size();++i2){<br>          cout&lt;&lt;geom.ordinates[i2];<br>          if(i2&lt;geom.ordinates.size()-1)<br>            cout&lt;&lt;", ";<br>          else<br>            cout&lt;&lt;") ";<br>        }<br>        cout&lt;&lt;endl;<br>        break;<br>      }<br>    case 2003://read Polygon2D<br>      {<br>        cout&lt;&lt;"Polygon2D: ";<br>        cout&lt;&lt;"eleminfo(";<br>        for(size_t i2=0; i2&lt;geom.eleminfo.size();++i2){<br>          cout&lt;&lt;geom.eleminfo[i2];<br>          if(i2&lt;geom.eleminfo.size()-1)<br>            cout&lt;&lt;", ";<br>          else<br>            cout&lt;&lt;"), ";<br>        }<br>        cout&lt;&lt;"ordinates(";<br>        for(size_t i2=0; i2&lt;geom.ordinates.size();++i2){<br>          cout&lt;&lt;geom.ordinates[i2];<br>          if(i2&lt;geom.ordinates.size()-1)<br>            cout&lt;&lt;", ";<br>          else<br>            cout&lt;&lt;") ";<br>        }<br>        cout&lt;&lt;endl;<br>        break;<br>      }<br>    }<br>  }<br>  <br>}<br><br></pre><tt>int main()</tt><tt><br></tt><tt>{</tt><tt><br></tt><pre>&nbsp;try{<br><br>&nbsp; db.rlogon("scott/tiger"); // connect to Oracle<br>  db.direct_exec("drop table test_tab",otl_exception::disabled);<br>  db.direct_exec<br>    ("create table test_tab "<br>     "(id integer not null,"<br>     " geoloc mdsys.sdo_geometry not null, "<br>     " primary key (id))");<br>  db.direct_exec("delete from user_sdo_geom_metadata where table_name = 'TEST_TAB'");<br>  db.direct_exec<br>    ("insert into user_sdo_geom_metadata (table_name , column_name , diminfo , srid) "<br>     "values('TEST_TAB', 'GEOLOC', mdsys.sdo_dim_array(mdsys.sdo_dim_element('X', -100000, 100000, 0.001), "<br>     "mdsys.sdo_dim_element('Y', -100000, 100000, 0.001)), "<br>     "(select srid from mdsys.cs_srs where cs_name = 'Non-Earth (meters)')) ");<br>  insert();<br>  select();<br>  db.logoff();<br>&nbsp;}<br><br>&nbsp;catch(<a href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>&nbsp; cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>&nbsp; cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>&nbsp; cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br>&nbsp;}<br><br>&nbsp;db.logoff(); // disconnect from Oracle<br><br>&nbsp;return 0;<br><br>}</pre>
<h2>
Output</h2>
<pre>Point2D: X=10, Y=10<br>Line2D: eleminfo(1, 2, 1), ordinates(100, 100, 50, 80, 40, 40)<br>Polygon2D: eleminfo(1, 1003, 1), ordinates(100, 100, 100, 0, 0, 0, 0, 100, 100, 100)<br><br><hr width="100%"></pre>
<center><a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a><a href="home.htm">Go
Home</a></center>
<p>Copyright © 1996-2023, Sergei Kuchin, email: <a href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>,
<a href="mailto:skuchin@gmail.com">skuchin@gmail.com
<script language="JavaScript"><!-- hide from old browsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </script></a>.
</p>
<p><i>Permission to use, copy, modify and redistribute this document
for
any purpose is hereby granted without fee, provided that the above
copyright
notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</i>
</p>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>


</body></html>
