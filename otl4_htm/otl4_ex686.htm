<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <meta name="Author" content="Sergei Kuchin">
  <meta name="GENERATOR"
 content="Mozilla/4.77 [en] (Win95; U) [Netscape]">
  <meta name="KeyWords"
 content="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">
  <title>OTL 4.0, Example 686 (otl_datetime container and a
TIME/TIMESTAMP WITH TIME ZONE table column under #define OTL_UNICODE)</title>
</head>
<body>
<center>
<h1>OTL 4.0, Example 686 (otl_datetime container and a TIMESTAMP WITH
TIME ZONE table
column under #define OTL_UNICODE)</h1>
</center>
This example demonstrates simple INSERT/SELECT with&nbsp; TIMESTAMPs
WITH TIME ZONE for PostgreSQL and <a
 href="otl3_stream_class.htm#otl_datetime">otl_datetime</a>.
<h2>Source Code</h2>
<pre>#include &lt;iostream&gt;<br>using namespace std;<br><br>#include &lt;stdio.h&gt;<br><br>#define <a
 href="otl3_compile.htm#OTL_UNICODE">OTL_UNICODE</a> // enable Unicode (UTF-16)<br><br>// Uncomment the line below if you use #define OTL_UNICODE_CHAR_TYPE<br>//#define OTL_UNICODE_CHAR_TYPE wchar_t<br><br></pre>
<pre>// #define OTL_ODBC_UNIX // uncomment this line if UnixODBC is used<br>#define <a
 href="otl3_compile.htm#OTL_ODBC_ALTERNATE_RPC">OTL_ODBC_ALTERNATE_RPC</a><br>#if !defined(_WIN32) &amp;&amp; !defined(_WIN64)<br>#define <a
 href="otl3_compile.htm#OTL_ODBC">OTL_ODBC</a><br>#else <br>#define <a
 href="otl3_compile.htm#OTL_ODBC_POSTGRESQL">OTL_ODBC_POSTGRESQL</a> // required with PG ODBC on Windows<br>#endif<br>#define <a
 href="otl3_compile.htm#OTL_ODBC_TIME_ZONE">OTL_ODBC_TIME_ZONE</a><br>#define <a
 href="otl3_compile.htm#OTL_ODBC_STRING_TO_TIMESTAMP">OTL_ODBC_STRING_TO_TIMESTAMP</a>(str,tm)            \<br>{                                                       \<br>  swscanf(str,                                          \<br>         L"%04d-%02d-%02d %02d:%02d:%02d.%06ld%hd",     \<br>         &amp;tm.year,                                      \<br>         &amp;tm.month,                                     \<br>         &amp;tm.day,                                       \<br>         &amp;tm.hour,                                      \<br>         &amp;tm.minute,                                    \<br>         &amp;tm.second,                                    \<br>         &amp;tm.fraction,                                  \<br>         &amp;tm.tz_hour);                                  \<br>}<br><br>#define <a
 href="otl3_compile.htm#OTL_ODBC_TIMESTAMP_TO_STRING">OTL_ODBC_TIMESTAMP_TO_STRING</a>(tm,str)            \<br>{                                                       \<br>  swprintf(str,                                         \<br>          L"%04d-%02d-%02d %02d:%02d:%02d.%06ld %+hd",  \<br>          tm.year,                                      \<br>          tm.month,                                     \<br>          tm.day,                                       \<br>          tm.hour,                                      \<br>          tm.minute,                                    \<br>          tm.second,                                    \<br>          tm.fraction,                                  \<br>          tm.tz_hour);                                  \<br>}<br><br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br><br><a
 href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br>void insert(void)<br>// insert rows into table<br>{&nbsp;<br>&nbsp;<a
 href="otl3_stream_class.htm">otl_stream</a> o(1, // PostgreSQL 8.1 and higher, the buffer can be &gt; 1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "insert into test_tab values(:f1&lt;int&gt;,:f2&lt;char[60]&gt;, :f3&lt;char[60]&gt;)",&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // INSERT statement, :f2, and :f3 need to be declared as char[XX]<br>                   // in order for otl_datetime-to-string conversion to work.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db // connect object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br><br>&nbsp;<a
 href="otl3_stream_class.htm#otl_datetime">otl_datetime</a> tm;<br><br>&nbsp;for(int i=1;i&lt;=10;++i){<br>&nbsp; tm.year=1998;<br>&nbsp; tm.month=10;<br>&nbsp; tm.day=19;<br>&nbsp; tm.hour=23;<br>&nbsp; tm.minute=12;<br>&nbsp; tm.second=12;<br>  tm.frac_precision=6; // microseconds<br>  tm.fraction=123456;<br>  tm.tz_hour=-5; // time zone offset in hours<br>  tm.tz_minute=0;<br>&nbsp; o&lt;&lt;i&lt;&lt;tm&lt;&lt;tm;<br>&nbsp;}<br>}<br><br>void select(void)<br>{&nbsp;<br>&nbsp;otl_stream i(5, // stream buffer size can be &gt; great 1 on SELECT.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "select f1, f2\\:\\:varchar, f3\\:\\:varchar from test_tab",<br>               // f2, f3 need to be converted into varchar/string, <br>               // for example: f2::varchar<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // SELECT statement<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db // connect object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );&nbsp;<br><br> int f1;<br> otl_datetime f2, f3;<br><br> // Second's precision needs to be specified BEFORE the stucture can be<br> // used either for writing or reading timestamp values, which have second's <br> // fractional part.<br> f2.frac_precision=6; // milliseconds<br><br> while(!i.eof()){ // while not end-of-data<br>   i&gt;&gt;f1&gt;&gt;f2&gt;&gt;f3;<br>   cout&lt;&lt;"f1="&lt;&lt;f1;<br>   cout&lt;&lt;", f2="&lt;&lt;f2.month&lt;&lt;"/"&lt;&lt;f2.day&lt;&lt;"/"<br>       &lt;&lt;f2.year&lt;&lt;" "&lt;&lt;f2.hour&lt;&lt;":"&lt;&lt;f2.minute&lt;&lt;":"<br>       &lt;&lt;f2.second&lt;&lt;"."<br>       &lt;&lt;f2.fraction;<br>   if(f2.tz_hour&gt;=0)<br>       cout&lt;&lt;" +"&lt;&lt;f2.tz_hour;<br>   else<br>       cout&lt;&lt;" "&lt;&lt;f2.tz_hour;<br>   cout&lt;&lt;", f3="&lt;&lt;f3.month&lt;&lt;"/"&lt;&lt;f3.day&lt;&lt;"/"<br>       &lt;&lt;f3.year&lt;&lt;" "&lt;&lt;f3.hour&lt;&lt;":"&lt;&lt;f3.minute&lt;&lt;":"<br>       &lt;&lt;f3.second&lt;&lt;"."<br>       &lt;&lt;f3.fraction;<br>   cout&lt;&lt;endl;<br> }<br>&nbsp;<br>}</pre>
<pre>int main()<br>{<br>&nbsp;<a href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize ODBC environment<br>&nbsp;try{<br><br>&nbsp; db.rlogon("scott/tiger@postgresql"); // connect to PostgreSQL<br><br>&nbsp; <a
 href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>&nbsp;&nbsp; (<br>&nbsp;&nbsp;&nbsp; db,<br>&nbsp;&nbsp;&nbsp; "drop table test_tab",<br>&nbsp;&nbsp;&nbsp; otl_exception::disabled // disable OTL exceptions<br>&nbsp;&nbsp; ); // drop table<br><br>   db.commit();<br>&nbsp; <a
 href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>&nbsp;&nbsp; (<br>&nbsp;&nbsp;&nbsp; db,<br>&nbsp;&nbsp;&nbsp; "create table test_tab(f1 int, f2 timestamp(6) with time zone, f3 timestamp(6))"<br>&nbsp;&nbsp;&nbsp; );&nbsp; // create table<br><br>  db.commit(); // commit DDL statements <br><br>&nbsp; insert(); // insert records into table<br>&nbsp; select(); // select records from table<br><br>&nbsp;}<br><br>&nbsp;catch(<a
 href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>&nbsp; cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>&nbsp; cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>&nbsp; cerr&lt;&lt;p.sqlstate&lt;&lt;endl; // print out SQLSTATE message<br>&nbsp; cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br>&nbsp;}<br><br>&nbsp;db.logoff(); // disconnect from ODBC<br><br>&nbsp;return 0;<br><br>}</pre>
<h2>
Output</h2>
<pre>f1=1, f2=10/19/1998 23:12:12.123456 -5, f3=10/19/1998 23:12:12.123456<br>f1=2, f2=10/19/1998 23:12:12.123456 -5, f3=10/19/1998 23:12:12.123456<br>f1=3, f2=10/19/1998 23:12:12.123456 -5, f3=10/19/1998 23:12:12.123456<br>f1=4, f2=10/19/1998 23:12:12.123456 -5, f3=10/19/1998 23:12:12.123456<br>f1=5, f2=10/19/1998 23:12:12.123456 -5, f3=10/19/1998 23:12:12.123456<br>f1=6, f2=10/19/1998 23:12:12.123456 -5, f3=10/19/1998 23:12:12.123456<br>f1=7, f2=10/19/1998 23:12:12.123456 -5, f3=10/19/1998 23:12:12.123456<br>f1=8, f2=10/19/1998 23:12:12.123456 -5, f3=10/19/1998 23:12:12.123456<br>f1=9, f2=10/19/1998 23:12:12.123456 -5, f3=10/19/1998 23:12:12.123456<br>f1=10, f2=10/19/1998 23:12:12.123456 -5, f3=10/19/1998 23:12:12.123456<br><hr
 width="100%"></pre>
<center><a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a><a
 href="home.htm">Go
Home</a></center>
<p>Copyright &copy; 1996-2025, Sergei Kuchin, email: <a
 href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>,
<a href="mailto:skuchin@gmail.com">skuchin@gmail.com
<script language="JavaScript"><!-- hide from old browsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </script></a>.
</p>
<p><i>Permission to use, copy, modify and redistribute this document
for
any purpose is hereby granted without fee, provided that the above
copyright
notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</i>
</p>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>
</body>
</html>
