<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
  <head>

    <meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
    <title>OTL 4.0, Example 741 (Extended / customized numeric data type
      support))</title>
    <meta name="Author" content="Sergei Kuchin">
    <meta name="GENERATOR" content="Mozilla/3.03Gold (Win95; I)
      [Netscape]">
    <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database
      API, C++, Template Library">
  </head>
  <body>
    <h1 align="center">OTL 4.0, Example 741 (Extended/ customized
      numeric data type support)</h1>
    <p>This example demonstrates how OTL can be <a
        href="otl3_compile.htm#OTL_NUMERIC_TYPE_1">extended</a> with
      numeric data types that are not supported by the underlying
      database API.</p>
    <h2>Source Code</h2>
    <pre>// Suppress VC++ warnings about insecure sprintf / sscanf calls.<br>#define _CRT_SECURE_NO_WARNINGS<br>#include &lt;iostream&gt;<br>using namespace std;<br><br>#include &lt;stdio.h&gt;</pre>
    <pre>#define OTL_ORA8 // Compile OTL 4.0/OCI8<br><br>// disable private operators &gt;&gt;/&lt;&lt; for unsigned long<br>#define <a href="otl3_compile.htm#OTL_STREAM_NO_PRIVATE_UNSIGNED_LONG_OPERATORS">OTL_STREAM_NO_PRIVATE_UNSIGNED_LONG_OPERATORS</a> <br><br>// #defines for <a href="otl3_compile.htm#OTL_NUMERIC_TYPE_1">extended</a> numeric data types<br>#define OTL_NUMERIC_TYPE_1_ID "ULONG"<br>#define OTL_NUMERIC_TYPE_1_STR_SIZE 40<br>#define OTL_NUMERIC_TYPE_1 unsigned long <br>#define OTL_STR_TO_NUMERIC_TYPE_1(str,n)        \<br>{                                               \<br>  sscanf(str,"%lu",&amp;n);                         \<br>}<br><br>#define OTL_NUMERIC_TYPE_1_TO_STR(n,str)        \<br>{                                               \<br>  sprintf(str,"%lu",n);                         \<br>}<br><br>#define OTL_NUMERIC_TYPE_2_ID "UULONG"<br>#define OTL_NUMERIC_TYPE_2_STR_SIZE 40<br>#define OTL_NUMERIC_TYPE_2 unsigned long long<br>#define OTL_STR_TO_NUMERIC_TYPE_2(str,n)        \<br>{                                               \<br>  sscanf(str,"%llu",&amp;n);                        \<br>}<br><br>#define OTL_NUMERIC_TYPE_2_TO_STR(n,str)        \<br>{                                               \<br>  sprintf(str,"%llu",n);                        \<br>}<br><br>#define OTL_NUMERIC_TYPE_3_ID "LDOUBLE"<br>#define OTL_NUMERIC_TYPE_3_STR_SIZE 60<br>#define OTL_NUMERIC_TYPE_3 long double<br>#define OTL_STR_TO_NUMERIC_TYPE_3(str,n)        \<br>{                                               \<br>  sscanf(str,"%Lf",&amp;n);                         \<br>}<br><br>#define OTL_NUMERIC_TYPE_3_TO_STR(n,str)        \<br>{                                               \<br>  sprintf(str,"%Lf",n);                         \<br>}<br><br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br>const OTL_NUMERIC_TYPE_1 VAL1=1234567890;<br>const OTL_NUMERIC_TYPE_2 VAL2=1234567890;<br>const OTL_NUMERIC_TYPE_3 VAL3=1234567890;<br><br><a href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br>void insert()<br>// insert rows into table<br>{ <br> <a href="otl3_stream_class.htm">otl_stream</a> o(50, // buffer size<br>              "insert into test_tab values(:f1&lt;uulong&gt;,:f2&lt;char[31]&gt;)", <br>                 // SQL statement<br>              db // connect object<br>             );<br> char tmp[32];<br> <br> for(OTL_NUMERIC_TYPE_2 i=VAL2;i&lt;=VAL2+100;++i){<br>  int ndx=static_cast&lt;int&gt;(i-VAL2);<br>  sprintf(tmp,"Name%d",ndx);<br>  o&lt;&lt;i;<br>  o&lt;&lt;tmp;<br> }<br>}<br><br>void select()<br>{ <br> <a href="otl3_stream_class.htm">otl_stream</a> i(50, // buffer size<br>              "select f1 :#1&lt;ulong&gt;, f2 "<br>              "from test_tab "<br>              "where f1&gt;=:f&lt;ulong&gt; "<br>              "  and f1&lt;=:ff&lt;ulong&gt;",<br>              db<br>            &nbsp;); <br>   // create select stream<br> <br> OTL_NUMERIC_TYPE_1 f1;<br> char f2[31];<br><br> i&lt;&lt;VAL1+8<br>  &lt;&lt;VAL1+16;<br><br> while(!i.eof()){ // while not end-of-data<br>  i&gt;&gt;f1&gt;&gt;f2;<br>  cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", f2="&lt;&lt;f2&lt;&lt;endl;<br> }<br><br>}<br><br>void select2()<br>{ <br> <a href="otl3_stream_class.htm">otl_stream</a> i(50, // buffer size<br>              "select f1 :#1&lt;ldouble&gt;, f2 "<br>              "from test_tab "<br>              "where f1&gt;=:f&lt;ldouble&gt; "<br>              "  and f1&lt;=:ff&lt;ldouble&gt;",<br>              db<br>             ); <br>   // create select stream<br> <br> OTL_NUMERIC_TYPE_3 f1;<br> char f2[31];<br><br> i&lt;&lt;VAL3+8<br>  &lt;&lt;VAL3+16;<br><br> while(!i.eof()){ // while not end-of-data<br>  i&gt;&gt;f1&gt;&gt;f2;<br>  cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", f2="&lt;&lt;f2&lt;&lt;endl;<br> }<br><br>}<br><br>int main()<br>{<br> <a href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize OCI environment<br> try{<br><br>  db.rlogon("scott/tiger"); // connect to Oracle<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "drop table test_tab",<br>    otl_exception::disabled // disable OTL exceptions<br>   ); // drop table<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "create table test_tab(f1 number, f2 varchar2(30))"<br>    );  // create table<br><br>  insert(); <br>  select(); <br>  select2(); <br> }<br><br> catch(<a href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br> }<br><br> db.logoff(); // disconnect from Oracle<br><br> return 0;<br><br>}<br></pre>
    <h2>Output</h2>
    <pre>f1=1234567898, f2=Name8<br>f1=1234567899, f2=Name9<br>f1=1234567900, f2=Name10<br>f1=1234567901, f2=Name11<br>f1=1234567902, f2=Name12<br>f1=1234567903, f2=Name13<br>f1=1234567904, f2=Name14<br>f1=1234567905, f2=Name15<br>f1=1234567906, f2=Name16<br>f1=1.23457e+009, f2=Name8<br>f1=1.23457e+009, f2=Name9<br>f1=1.23457e+009, f2=Name10<br>f1=1.23457e+009, f2=Name11<br>f1=1.23457e+009, f2=Name12<br>f1=1.23457e+009, f2=Name13<br>f1=1.23457e+009, f2=Name14<br>f1=1.23457e+009, f2=Name15<br>f1=1.23457e+009, f2=Name16<br><hr width="100%"></pre>
    <center>
      <p><a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a>
        <a href="home.htm">Go Home</a> </p>
    </center>
    <p>Copyright &copy; 1996-2023, Sergei Kuchin, email: <a
        href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>,
      <a href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>
      <script language="JavaScript"><!-- hide from old browsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </script>.</p>
    <p><i>Permission to use, copy, modify and redistribute this document
        for
        any purpose is hereby granted without fee, provided that the
        above
        copyright
        notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS"
        AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
        SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
        FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
        DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
        WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
        IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
        ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
        THIS SOFTWARE. </i></p>
    <script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
    <script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>
  </body>
</html>
