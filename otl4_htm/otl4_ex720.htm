<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
<head>
  <meta http-equiv="content-type"
 content="text/html; charset=ISO-8859-1">
  <title>OTL 4.0, Example 720 (Oracle 10.2 and higher, raw[XXX] and
LONG RAWs, combined with the bulk interface (stream buffer size&gt;1))</title>
  <meta name="Author" content="Sergei Kuchin">
  <meta name="GENERATOR"
 content="Mozilla/3.03Gold (Win95; I) [Netscape]">
  <meta name="KeyWords"
 content="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">
</head>
<body>
<h1 align="center">OTL 4.0, Example 720 (Oracle 10.2 and higher,
raw[XXX] and LONG RAWs, combined with the bulk interface (stream buffer
size&gt;1))</h1>
<p>This example demonstrates INSERT and SELECT statements with
the raw[XXX] bind variable data type and LONG RAWs, combined with the
bulk
interface (stream buffer size &gt;1).</p>
<h2>Source Code</h2>
<pre>#include &lt;iostream&gt;<br>using namespace std;<br><br>#include &lt;stdio.h&gt;</pre>
<pre>#define OTL_ORA7 // Compile OTL 4.0/OCI7<br>#include &lt;otlv4.h&gt; // include the OTL 4.0 header file<br><br><a
 href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br>void insert()<br>// insert rows into table<br>{ </pre>
<pre> <a href="otl3_long_string.htm">otl_long_string</a> f2(65000); // define long string variable<br> <a
 href="otl3_stream_class.htm">otl_stream</a> o(10, // buffer size<br>              "insert into test_tab values(:f1&lt;int&gt;,:f2&lt;<a
 href="otl3_bind_variables.htm#raw">raw</a>[65000]&gt;)",<br>                 // SQL statement<br>              db // connect object<br>             );<br> for(int i=1;i&lt;=20;++i){<br>  for(int j=0;j&lt;64999;++j)<br>   f2[j]='*';<br>  f2[64999]='?';<br>  f2.<a
 href="otl3_long_string.htm#set_len">set_len</a>(65000);<br>  o&lt;&lt;i&lt;&lt;f2;<br> }<br><br>}<br><br>void select()<br>{ <br> <a
 href="otl3_long_string.htm">otl_long_string</a> f2(65000); // define long string variable<br> <a
 href="otl3_stream_class.htm">otl_stream</a> i(10, // buffer size<br>              "select f1, f2 :#2&lt;raw[65000]&gt; from test_tab "<br>// override f2's default data type "LONG RAW" with raw[XXX] so that the bulk interface<br>// can be used efficiently<br>              "where f1&gt;=:f11&lt;int&gt; and f1&lt;=:f12&lt;int&gt;*2",<br>                 // SELECT statement<br>              db // connect object<br>             ); <br>   // create select stream<br> <br> int f1;<br><br> i&lt;&lt;8&lt;&lt;8; // assigning :f11 = 8, :f12 = 8<br>   // SELECT automatically executes when all input variables are<br>   // assigned. First portion of output rows is fetched to the buffer<br><br> while(!i.eof()){ // while not end-of-data<br>  i&gt;&gt;f1&gt;&gt;f2;<br>  cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", f2="&lt;&lt;f2[0]&lt;&lt;f2[f2.<a
 href="otl3_long_string.htm#len">len</a>()-1]&lt;&lt;", len="&lt;&lt;f2.<a
 href="otl3_long_string.htm#len">len</a>()&lt;&lt;endl;<br> }<br><br> i&lt;&lt;4&lt;&lt;4; // assigning :f11 = 4, :f12 = 4<br>   // SELECT automatically executes when all input variables are<br>   // assigned. First portion of output rows is fetched to the buffer<br><br> while(!i.eof()){ // while not end-of-data<br>  i&gt;&gt;f1&gt;&gt;f2;<br>  cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", f2="&lt;&lt;f2[0]&lt;&lt;f2[f2.len()-1]&lt;&lt;", len="&lt;&lt;f2.len()&lt;&lt;endl;<br> }<br><br>}<br><br>int main()<br>{<br> <a
 href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize the database API environment<br> try{<br><br>  db.rlogon("scott/tiger"); // connect to Oracle<br><br>  <a
 href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "drop table test_tab",<br>    otl_exception::disabled // disable OTL exceptions<br>   ); // drop table<br><br>  <a
 href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "create table test_tab(f1 number, f2 long raw)"<br>    );  // create table<br><br>  insert(); // insert records into table<br>  select(); // select records from table<br><br> }<br><br> catch(<a
 href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br> }<br><br> db.logoff(); // disconnect from the database<br><br> return 0;<br><br>}<br></pre>
<h2>Output</h2>
<pre>f1=8, f2=*?, len=65000<br>f1=9, f2=*?, len=65000<br>f1=10, f2=*?, len=65000<br>f1=11, f2=*?, len=65000<br>f1=12, f2=*?, len=65000<br>f1=13, f2=*?, len=65000<br>f1=14, f2=*?, len=65000<br>f1=15, f2=*?, len=65000<br>f1=16, f2=*?, len=65000<br>f1=4, f2=*?, len=65000<br>f1=5, f2=*?, len=65000<br>f1=6, f2=*?, len=65000<br>f1=7, f2=*?, len=65000<br>f1=8, f2=*?, len=65000<br><hr
 width="100%"></pre>
<center>
<p><a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a>
<a href="home.htm">Go Home</a> </p>
</center>
<p>Copyright &copy; 1996-2023, Sergei Kuchin, email: <a
 href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>,
<a href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>
<script language="JavaScript">
<!-- hide from old browsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </script>.</p>
<p><i>Permission to use, copy, modify and redistribute this document
for
any purpose is hereby granted without fee, provided that the above
copyright
notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE
AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT
SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE. </i></p>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>
</body>
</html>
