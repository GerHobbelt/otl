<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta content="text/html; charset=iso-8859-1"
 http-equiv="Content-Type">
  <meta content="Sergei Kuchin" name="Author">
  <meta content="Mozilla/4.77 [en] (Win95; U) [Netscape]"
 name="GENERATOR">
  <meta
 content="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library"
 name="KeyWords">
  <title>OTL 4.0, Examples for Informix (CLI)</title>
</head>
<body>
<center>
<h1>OTL 4.0, Examples for Informix (CLI)<br>
</h1>
<div style="text-align: left;">The examples below work with Informix.
In general, all
of these examples should work with any Informix 11 and higher<span
 style="font-style: italic;"></span> on Windows or Unix.<br>
</div>
<br>
</center>
<ul>
</ul>
<ol>
  <li> <b><a href="otl4_ex625.htm">Example 625 (Simple Insert/Select)</a></b></li>
  <li> <b><a href="otl4_ex626.htm">Example 626 ("Incompatible
datatypes
in stream operation" exception)</a></b></li>
  <li> <b><a href="otl4_ex627.htm">Example 627 (Simple Insert/Select
with the TEXT datatype)</a></b></li>
  <li> <b><a href="otl4_ex628.htm">Example 628 (Simple Insert/Select
with the BYTE datatype)</a></b></li>
  <li> <b><a href="otl4_ex629.htm">Example 629
(otl_stream::describe_select() with a simple Select)</a></b></li>
  <li> <b><a href="otl4_ex630.htm">Example 630 (otl_stream and NULLs)</a></b></li>
  <li><b><a href="otl4_ex631.htm">Example 631 (otl_nocommit_stream)</a></b></li>
  <li><b><a href="otl4_ex632.htm">Example 632 (otl_datetime)</a></b></li>
  <li><b><a href="otl4_ex633.htm">Example 633 (Get Rows Processed
Count)</a></b></li>
  <li><b><a href="otl4_ex634.htm">Example 634 ("Auto-commit every
SQL statement / commit-on-success" mode)</a></b></li>
  <li><b><a href="otl4_ex635.htm">Example 635 (Datatype override
in SELECT)</a></b></li>
  <li><b><a href="otl4_ex636.htm">Example 636 (STL std::strings,
ANSI C++ typecasts)</a></b></li>
  <li><b><a href="otl4_ex637.htm">Example 637 (STL-compliant OTL
stream iterators)</a></b></li>
  <li><b><a href="otl4_ex638.htm">Example 638 (otl_value&lt;T&gt;)</a></b></li>
  <li><b><a href="otl4_ex639.htm">Example 639 (#define
OTL_UNCAUGHT_EXCEPTION_ON)</a></b></li>
  <li><b><a href="otl4_ex640.htm">Example 640 (Group data type
override in SELECT)</a></b></li>
  <li><b><a href="otl4_ex602.htm">Example 641 (OTL stream
pooling)</a></b></li>
  <li><b><a href="otl4_ex642.htm">Example 642
(otl_stream::set_flush())</a></b></li>
  <li><b><a href="otl4_ex643.htm">Example 643 (<font size="-1">OTL_VALUE_TEMPLATE_ON,
OTL_USER_DEFINED_STRING_CLASS_ON</font>)</a></b></li>
  <li><b><a href="otl4_ex644.htm">Example 644 (Describe
otl_stream's bind variables)</a></b></li>
  <li> <b><a href="otl4_ex645.htm">Example 645 (otl_stream::clean(),
cancelling SELECT's fetch sequence)</a></b></li>
  <li><b><a href="otl4_ex646.htm">Example 646
(otl_stream::clean(), cleaning the SELECT stream's error flags)</a></b></li>
  <li><b><a href="otl4_ex647.htm">Example 647 (#define's
OTL_DEFAULT_XXX_NULL_TO_VAL)</a></b></li>
  <li><b><a href="otl4_ex648.htm">Example 648 (otl_exception, derived
from a base
class)</a></b></li>
  <li><b><a href="otl4_ex649.htm">Example 649
(OTL_ADD_NULL_TERMINATOR_STRING_SIZE)</a></b></li>
  <li><b><a href="otl4_ex650.htm">Example 650 (std::string and TEXT)</a></b></li>
  <li><b><a href="otl4_ex651.htm">Example 651 (SQL statement label)</a></b></li>
  <li><b><a href="otl4_ex652.htm">Example 652 (user defined string
class and TEXT)</a></b></li>
  <li><b><a href="otl4_ex653.htm">Example 653 (OTL tracing)</a></b></li>
  <li><b><a href="otl4_ex654.htm">Example 654 (Explict bind variables
in SELECT statement column definitions)</a></b></li>
  <li><b><a href="otl4_ex655.htm">Example 655 (64-bit signed integers)</a></b></li>
  <li><b><a href="otl4_ex656.htm">Example 656 (OTL stream read
iterator, simple SELECT)</a></b></li>
  <li><b><a href="otl4_ex657.htm">Example 657 (Strict numeric type
checking on SELECTs)</a></b></li>
  <li><b><a href="otl4_ex658.htm">Example 658 (Simple Insert/Select,
otl_connect::operator&lt;&lt;, &lt;&lt;=, &gt;&gt;)</a></b></li>
</ol>
<ul>
</ul>
<center>
<hr width="100%">
<p><a href="otl3_const_sql.htm">Prev</a> <a href="otl3_compile.htm">Next</a><a
 href="otl3.htm">Contents</a><a href="home.htm">Go Home</a></p>
</center>
<p>Copyright &copy; 1996-2025, Sergei Kuchin, email: <a
 href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>, <a
 href="mailto:skuchin@gmail.com">skuchin@gmail.com
<script language="JavaScript"><!-- hide from old browsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </script></a>.</p>
<p><i>Permission to use, copy, modify and redistribute this document
for any purpose is hereby granted without fee, provided that the above
copyright notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</i> </p>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>
</body>
</html>
