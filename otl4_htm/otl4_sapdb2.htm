<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="Author" content="Sergei Kuchin">
   <meta name="GENERATOR" content="Mozilla/4.77 [en] (Win95; U) [Netscape]">
   <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">
   <title>OTL 4.0, SAP DB, Example 2 (Implicit Select/Result Set returned by a stored procedure)</title>
</head>
<body>

<center>
<h1>
OTL 4.0, SAP DB, Example 2 (<b>Implicit Select/Result Set returned by a
stored procedure</b>)</h1></center>

<h1>
SAP DB, Example 2 (<b>Implicit Select/Result Set returned by a stored procedure</b>)</h1>
This example demonstrates a SAP DB stored procedure call that returns a
result set.
<h2>
Source Code</h2>

<pre>#include &lt;iostream.h>
#include &lt;stdio.h>
#define OTL_ODBC // Compile OTL 4.0/ODBC
#include &lt;otlv4.h>

<a href="otl3_connect_class.htm">otl_connect</a> db; // connect object

void insert()
// insert rows into table
{&nbsp;
&nbsp;<a href="otl3_stream_class.htm">otl_stream</a> o(50, // buffer size
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "insert into test_tab values(:f1&lt;float>,:f2&lt;char[31]>)",&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // SQL statement
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db // connect object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );
&nbsp;char tmp[32];

&nbsp;for(int i=1;i&lt;=100;++i){
&nbsp; sprintf(tmp,"Name%d",i);
&nbsp; o&lt;&lt;(float)i&lt;&lt;tmp;
&nbsp;}
}

void select(void)
// fetching result set returned by a stored procedure
{&nbsp;
&nbsp;<a href="otl3_stream_class.htm">otl_stream</a> i(50, // buffer size
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "{call my_proc(:f1&lt;int,in>)}",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // implicit SELECT statement
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; db, // connect object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="otl3_stream_class.htm#implicit_select">otl_implicit_select</a> // implicit SELECT statement
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );&nbsp;
&nbsp;&nbsp; // create select stream
&nbsp;
&nbsp;int f1;
&nbsp;char f2[31];

&nbsp;i&lt;&lt;8; // assigning :f1 = 8
&nbsp;&nbsp; // SELECT automatically executes when all input variables are
&nbsp;&nbsp; // assigned. First portion of output rows is fetched to the buffer

&nbsp;while(!i.eof()){ // while not end-of-data
&nbsp; i>>f1>>f2;
&nbsp; cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", f2="&lt;&lt;f2&lt;&lt;endl;
&nbsp;}
&nbsp;
&nbsp;i&lt;&lt;4; // assigning :f1 = 4
&nbsp;&nbsp; // SELECT automatically re-executes when all input variables are
&nbsp;&nbsp; // assigned. First portion of out rows is fetched to the buffer

&nbsp;while(!i.eof()){ // while not end-of-data
&nbsp; i>>f1>>f2;
&nbsp; cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", f2="&lt;&lt;f2&lt;&lt;endl;
&nbsp;}

}

int main()
{
&nbsp;otl_connect::otl_initialize(); // initialize ODBC environment
&nbsp;try{
&nbsp; db.rlogon("uid=scott;pwd=tiger;dsn=sapdb"); // connect to ODBC
&nbsp; otl_cursor::direct_exec
&nbsp;&nbsp; (
&nbsp;&nbsp;&nbsp; db,
&nbsp;&nbsp;&nbsp; "drop table test_tab",
&nbsp;&nbsp;&nbsp; otl_exception::disabled // disable OTL exceptions
&nbsp;&nbsp; ); // drop table

&nbsp; otl_cursor::direct_exec
&nbsp;&nbsp; (
&nbsp;&nbsp;&nbsp; db,
&nbsp;&nbsp;&nbsp; "create table test_tab(f1 int, f2 varchar(30))"
&nbsp;&nbsp;&nbsp; );&nbsp; // create table

&nbsp; otl_cursor::direct_exec
&nbsp;&nbsp; (
&nbsp;&nbsp;&nbsp; db,
&nbsp;&nbsp;&nbsp; "DROP PROCEDURE my_proc",
&nbsp;&nbsp;&nbsp; 0 // ignore any errors
&nbsp;&nbsp;&nbsp; );&nbsp; // drop stored procedure

&nbsp; otl_cursor::direct_exec
&nbsp;&nbsp; (
&nbsp;&nbsp;&nbsp; db,
&nbsp;&nbsp;&nbsp; "CREATE DBPROC my_proc "
&nbsp;&nbsp;&nbsp; "&nbsp; (IN F1 INTEGER) "
&nbsp;&nbsp;&nbsp; " RETURNS CURSOR "
&nbsp;&nbsp;&nbsp; "AS "
&nbsp;&nbsp;&nbsp; "$CURSOR = 'F1_CURSOR'; "
&nbsp;&nbsp;&nbsp; "DECLARE :$CURSOR CURSOR FOR SELECT * FROM SCOTT.test_tab "
&nbsp;&nbsp;&nbsp; "WHERE f1>=:F1 AND f1&lt;=:F1*2; "
&nbsp;&nbsp;&nbsp; );&nbsp; // create stored procedure


&nbsp; insert(); // insert records into table
&nbsp; select(); // select records from table


&nbsp;}
&nbsp;catch(otl_exception&amp; p){ // intercept OTL exceptions
&nbsp; cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message
&nbsp; cerr&lt;&lt;p.code&lt;&lt;endl; // print out error code
&nbsp; cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error
&nbsp; cerr&lt;&lt;p.sqlstate&lt;&lt;endl; // print out SQLSTATE message
&nbsp; cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error
&nbsp;}
&nbsp;db.logoff(); // disconnect from the data source
&nbsp;return 0;
}&nbsp;


</pre>

<h2>
Output</h2>

<pre>&nbsp;A=2, B=Test String1


<hr WIDTH="100%"></pre>

<center><a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a><a href="home.htm">Go
Home</a></center>

<p>Copyright &copy; 1996-2022, Sergei Kuchin, email: <a href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>,
<a href="mailto:skuchin@gmail.com">skuchin@gmail.com<script Language="Javgmailpt">
<!-- hide from old browsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </script>
</a>.
<p><i>Permission to use, copy, modify and redistribute this document for
any purpose is hereby granted without fee, provided that the above copyright
notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</i>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>
</body>
</html>
