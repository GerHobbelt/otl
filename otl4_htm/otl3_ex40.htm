<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
   <TITLE>OTL 4.0, Example 39 (otl_datetime in Oracle 78</TITLE>
   <META NAME="Author" CONTENT="Sergei Kuchin">
   <META NAME="GENERATOR" CONTENT="Mozilla/3.03Gold (Win95; I) [Netscape]">
   <META NAME="KeyWords" CONTENT="OTL, Oracle, ODBC, DB2, CLI, database API, C++, Template Library">
</HEAD>
<BODY>

<H1 ALIGN=CENTER>OTL 4.0, Example 40 (otl_datetime in ODBC)</H1>

<H1><A NAME="example1"></A>Example 40 (otl_datetime in ODBC)</H1>

<P>This example demonstrates simple INSERT and SELECT with MS SQL Server's
DATETIMEs and <A HREF="otl3_stream_class.htm#otl_datetime">otl_datetime</A>.</P>

<H2>Source Code</H2>

<PRE>#include &lt;iostream&gt;
using namespace std;

#include &lt;stdio.h&gt;</PRE>

<PRE>#define OTL_ODBC // Compile OTL 4.0/ODBC
#include &lt;otlv4.h&gt; // include the OTL 4.0 header file

<A HREF="otl3_connect_class.htm">otl_connect</A> db; // connect object

void insert(void)
// insert rows into table
{ 
 otl_stream o(50, // buffer size
              &quot;insert into test_tab2 values(:f1&lt;float&gt;,:f2&lt;timestamp&gt;)&quot;, 
                 // SQL statement
              db // connect object
             );

 otl_datetime tm;

 for(int i=1;i&lt;=10;++i){
  tm.year=1998;
  tm.month=10;
  tm.day=19;
  tm.hour=23;
  tm.minute=12;
  tm.second=12;
  o&lt;&lt;(float)i&lt;&lt;tm;
 }
}

void select(void)
{ 
 otl_stream i(50, // buffer size
              &quot;select * from test_tab2 where f2=:f2&lt;timestamp&gt;&quot;,
                 // SELECT statement
              db // connect object
             ); 
   // create select stream
 
 int f1;
 otl_datetime tm,f2;

 tm.year=1998;
 tm.month=10;
 tm.day=19;
 tm.hour=23;
 tm.minute=12;
 tm.second=12;

 i&lt;&lt;tm; // assigning :f2 = tm
   // SELECT automatically executes when all input variables are
   // assigned. First portion of out rows is fetched to the buffer

 while(!i.eof()){ // while not end-of-data
  i&gt;&gt;f1&gt;&gt;f2;
  cout&lt;&lt;&quot;f1=&quot;&lt;&lt;f1&lt;&lt;&quot;, f2=&quot;&lt;&lt;f2.month&lt;&lt;&quot;/&quot;&lt;&lt;f2.day&lt;&lt;&quot;/&quot;
      &lt;&lt;f2.year&lt;&lt;&quot; &quot;&lt;&lt;f2.hour&lt;&lt;&quot;:&quot;&lt;&lt;f2.minute&lt;&lt;&quot;:&quot;
      &lt;&lt;f2.second&lt;&lt;endl;
 }
 
}</PRE>

<PRE>int main()
{
 <A HREF="otl3_connect_class.htm">otl_connect::otl_initialize</A>(); // initialize ODBC environment
 try{

  db.rlogon(&quot;scott/tiger@mssql&quot;); // connect to ODBC

  <A HREF="otl3_const_sql.htm">otl_cursor::direct_exec
</A>   (
    db,
    &quot;drop table test_tab2&quot;,
    otl_exception::disabled // disable OTL exceptions
   ); // drop table

  <A HREF="otl3_const_sql.htm">otl_cursor::direct_exec
</A>   (
    db,
    &quot;create table test_tab2(f1 int, f2 datetime)&quot;
    );  // create table

  insert(); // insert records into table
  select(); // select records from table

 }

 catch(<A HREF="otl3_exception_class.htm">otl_exception</A>&amp; p){ // intercept OTL exceptions
  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message
  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error
  cerr&lt;&lt;p.sqlstate&lt;&lt;endl; // print out SQLSTATE message
  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error
 }

 db.logoff(); // disconnect from ODBC

 return 0;

}
</PRE>

<H2>Output</H2>

<PRE>f1=1, f2=10/19/1998 23:12:12
f1=2, f2=10/19/1998 23:12:12
f1=3, f2=10/19/1998 23:12:12
f1=4, f2=10/19/1998 23:12:12
f1=5, f2=10/19/1998 23:12:12
f1=6, f2=10/19/1998 23:12:12
f1=7, f2=10/19/1998 23:12:12
f1=8, f2=10/19/1998 23:12:12
f1=9, f2=10/19/1998 23:12:12
f1=10, f2=10/19/1998 23:12:12








<HR WIDTH="100%"></PRE>

<CENTER><P><A HREF="otl3_examples.htm">Examples</A> <A HREF="otl3.htm">Contents</A>
<A HREF="home.htm">Go Home</A> </P></CENTER>

<P>Copyright &copy; 1996-2023, Sergei Kuchin, email: <A HREF="mailto:skuchin@gmail.com">skuchin@gmail.com</A>,
<A HREF="mailto:skuchin@gmail.com">skuchin@gmail.com</A> <SCRIPT Language="JavaScript"><!-- hide from oldgmailsers
 var modDate = new Date(document.lastModified)
 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 
                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");
 //-->
 </SCRIPT>.</P>

<P><I>Permission to use, copy, modify and redistribute this document for
any purpose is hereby granted without fee, provided that the above copyright
notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. </I></P>

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5456201-1");
pageTracker._trackPageview();
</script>
</BODY>
</HTML>
