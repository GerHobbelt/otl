<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html>
  <head>
    <meta http-equiv="content-type" content="text/html;
      charset=windows-1252">
    <title>OTL 4.0, Example 771 (OTL stream, std::variant&lt;&gt;,
      std::tuple&lt;&gt;, std::array&lt;char,...&gt;, and
      std::span&lt;&gt;)</title>
    <meta name="Author" content="Sergei Kuchin">
    <meta name="GENERATOR" content="Mozilla/3.03Gold (Win95; I)
      [Netscape]">
    <meta name="KeyWords" content="OTL, Oracle, ODBC, DB2, CLI, database
      API, C++, Template Library">
  </head>
  <body>
    <h1 align="center">OTL 4.0, Example 771 (OTL stream,
      std::variant&lt;&gt;, std::tuple&lt;&gt;,
      std::array&lt;char,...&gt;, and span&lt;&gt;)</h1>
    <p>This example demonstrates how to use OTL with various standard
      C++ templates.</p>
    <h2>Source Code</h2>
    <pre>#include &lt;iostream&gt;<br>using namespace std;<br><br>#include &lt;stdio.h&gt;</pre>
    <pre>#define OTL_DB2_CLI // Compile OTL 4.0/DB2 CLI<br>#define <a href="otl3_compile.htm#OTL_STREAM_WITH_STD_TUPLE_ON">OTL_STREAM_WITH_STD_TUPLE_ON</a><br>#define <a href="otl3_compile.htm#OTL_STREAM_WITH_STD_VARIANT_ON">OTL_STREAM_WITH_STD_VARIANT_ON</a><br>#define <a href="otl3_compile.htm#OTL_STREAM_WITH_STD_CHAR_ARRAY_ON">OTL_STREAM_WITH_CHAR_ARRAY_ON</a><br>#if !defined(<a href="otl3_compile.htm#OTL_CPP_17_ON">OTL_CPP_17_ON</a>)<br>#define OTL_CPP_17_ON<br>#endif<br><br>#if defined(<a href="otl3_compile.htm#OTL_CPP_20_ON">OTL_CPP_20_ON</a>)<br>// enable OTL support for std::span<br>#define <a href="otl3_compile.htm#OTL_STREAM_WITH_STD_SPAN_ON">OTL_STREAM_WITH_STD_SPAN_ON</a><br>#endif<br><br>#include &lt;otlv4.h&gt; // include the OTL 4 header file<br><br><a href="otl3_connect_class.htm">otl_connect</a> db; // connect object<br><br>using Variant=std::variant&lt;int,float&gt;;<br>using Tuple=std::tuple&lt;Variant,std:array&lt;char,32&gt;&gt;;<br><br>#if defined(<a href="otl3_compile.htm#OTL_CPP_20_ON">OTL_CPP_20_ON</a>)<br>using Span=std::span&lt;Tuple&gt;;<br>#endif<br><br><br>void insert()<br>// insert rows into table<br>{ <br> <a href="otl3_stream_class.htm">otl_stream</a> o(50, // buffer size<br>              "insert into test_tab values(:f&lt;int&gt;,:f2&lt;char[31]&gt;)", <br>                 // SQL statement<br>              db // connect object<br>             );<br> Tuple t;<br><br> for(int i=1;i&lt;=100;++i){<br>#if defined(_MSC_VER) &amp;&amp; (_MSC_VER &gt;= 1400) // VC++ 8.0 or higher<br>   sprintf_s(std::get&lt;1&gt;(t).data(),std::get&lt;1&gt;(t).size(),"Name%d",i);<br>#else<br>   sprintf(std::get&lt;1&gt;(t).data(),"Name%d",i);<br>#endif<br>  std::get&lt;0&gt;(t)=i;<br>#if defined(OTL_CPP_20_ON)<br>  o<a href="otl3_stream_class.htm#OTL_STD_SPAN">&lt;&lt;</a>Span(&amp;t,1);<br>#else<br>  o<a href="otl3_stream_class.htm#OTL_STD_TUPLE">&lt;&lt;</a>t;<br>#endif<br> }<br><br>}<br><br>void select()<br>{ <br> <a href="otl3_stream_class.htm">otl_stream</a> i(50, // buffer size<br>              "select * from test_tab where f1&gt;=:f1_1&lt;int&gt; and f1&lt;=:f1_2&lt;int&gt;*2",<br>                 // SELECT statement<br>              db // connect object<br>             ); <br>   // create select stream<br> <br> Tuple t;<br> int f1;<br> char f2[32];<br><br> i&lt;&lt;8&lt;&lt;8;<br><br>// C++11 <a href="otl3_whatn.htm#OTL40361">range-for loop can be used with OTL streams</a><br> for(auto&amp; it : i){<br>   it<a href="otl3_stream_class.htm#OTL_STD_TUPLE">&gt;&gt;</a>t;<br>   const Variant&amp; v=std::get&lt;0&gt;(t);<br>   cout&lt;&lt;"f1="&lt;&lt;std::get&lt;0&gt;(v)&lt;&lt;", f2="&lt;&lt;std::get&lt;1&gt;(t).data()&lt;&lt;endl;<br> }<br><br> i&lt;&lt;4&lt;&lt;4; // assigning :f = 4<br>   // SELECT automatically executes when all input variables are<br>   // assigned. First portion of output rows is fetched to the buffer<br><br> while(!i.eof()){ // while not end-of-data<br>  i&gt;&gt;f1&gt;&gt;f2;<br>  cout&lt;&lt;"f1="&lt;&lt;f1&lt;&lt;", f2="&lt;&lt;f2&lt;&lt;endl;<br> }<br><br><br>}<br><br>int main()<br>{<br> <a href="otl3_connect_class.htm">otl_connect::otl_initialize</a>(); // initialize database environment<br> try{<br><br>  db.rlogon("scott/tiger@db2sql"); // connect to the database<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "drop table test_tab",<br>    otl_exception::disabled // disable OTL exceptions<br>   ); // drop table<br><br>  <a href="otl3_const_sql.htm">otl_cursor::direct_exec<br></a>   (<br>    db,<br>    "create table test_tab(f1 int, f2 varchar(31))"<br>    );  // create table<br><br>  insert(); // insert records into table<br>  select(); // select records from table<br><br> }<br><br> catch(<a href="otl3_exception_class.htm">otl_exception</a>&amp; p){ // intercept OTL exceptions<br>  cerr&lt;&lt;p.msg&lt;&lt;endl; // print out error message<br>  cerr&lt;&lt;p.stm_text&lt;&lt;endl; // print out SQL that caused the error<br>  cerr&lt;&lt;p.var_info&lt;&lt;endl; // print out the variable that caused the error<br> }<br><br> db.logoff(); // disconnect from the database<br><br> return 0;<br><br>}<br></pre>
    <h2>Output</h2>
    <pre>f1=8, f2=Name8<br>f1=9, f2=Name9<br>f1=10, f2=Name10<br>f1=11, f2=Name11<br>f1=12, f2=Name12<br>f1=13, f2=Name13<br>f1=14, f2=Name14<br>f1=15, f2=Name15<br>f1=16, f2=Name16<br>f1=4, f2=Name4<br>f1=5, f2=Name5<br>f1=6, f2=Name6<br>f1=7, f2=Name7<br>f1=8, f2=Name8<br><hr width="100%"></pre>
    <center>
      <p><a href="otl3_examples.htm">Examples</a> <a href="otl3.htm">Contents</a>
        <a href="home.htm">Go Home</a> </p>
    </center>
    <p>Copyright © 1996-2023, Sergei Kuchin, email: <a
        href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>, <a
        href="mailto:skuchin@gmail.com">skuchin@gmail.com</a>
      <script language="JavaScript"><!-- hide from old browsers

 var modDate = new Date(document.lastModified)

 document.write("<i> Last Updated:</i> " + (modDate.getMonth()+1) + "/" + 

                modDate.getDate() + "/" + "0"+(modDate.getYear())%100+".");

 //-->

 </script>.</p>
    <p><i>Permission to use, copy, modify and redistribute this document
        for any purpose is hereby granted without fee, provided that the
        above copyright notice appear in all copies. THE SOFTWARE IS
        PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
        REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
        MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE
        LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
        DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
        DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
        OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
        USE OR PERFORMANCE OF THIS SOFTWARE. </i></p>
    <script type="text/javascript">

var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");

document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));

</script>
    <script type="text/javascript">

var pageTracker = _gat._getTracker("UA-5456201-1");

pageTracker._trackPageview();

</script>
  </body>
</html>
